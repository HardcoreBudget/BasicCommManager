
BasicCommStack.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006bc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  00006bc6  00006c5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000404  008001ca  008001ca  00006dc4  2**0
                  ALLOC
  3 .stab         00006c60  00000000  00000000  00006dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002da3  00000000  00000000  0000da24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000107c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00010967  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00010b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00012f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000142ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000154c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00015680  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00015976  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000162e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__vector_1>
       8:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <__vector_2>
       c:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <__vector_3>
      10:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__vector_4>
      14:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <__vector_5>
      18:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__vector_10>
      2c:	0c 94 6d 11 	jmp	0x22da	; 0x22da <__vector_11>
      30:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <__vector_12>
      34:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__vector_13>
      38:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__vector_14>
      3c:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <__vector_15>
      40:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	fb e6       	ldi	r31, 0x6B	; 107
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3c       	cpi	r26, 0xCE	; 206
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9f 34 	call	0x693e	; 0x693e <main>
      8a:	0c 94 e1 35 	jmp	0x6bc2	; 0x6bc2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 aa 35 	jmp	0x6b54	; 0x6b54 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c6 35 	jmp	0x6b8c	; 0x6b8c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b6 35 	jmp	0x6b6c	; 0x6b6c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d2 35 	jmp	0x6ba4	; 0x6ba4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b6 35 	jmp	0x6b6c	; 0x6b6c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d2 35 	jmp	0x6ba4	; 0x6ba4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 aa 35 	jmp	0x6b54	; 0x6b54 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c6 35 	jmp	0x6b8c	; 0x6b8c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b2 35 	jmp	0x6b64	; 0x6b64 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ce 35 	jmp	0x6b9c	; 0x6b9c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b6 35 	jmp	0x6b6c	; 0x6b6c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d2 35 	jmp	0x6ba4	; 0x6ba4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b6 35 	jmp	0x6b6c	; 0x6b6c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d2 35 	jmp	0x6ba4	; 0x6ba4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b6 35 	jmp	0x6b6c	; 0x6b6c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d2 35 	jmp	0x6ba4	; 0x6ba4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ba 35 	jmp	0x6b74	; 0x6b74 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d6 35 	jmp	0x6bac	; 0x6bac <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 b2 35 	jmp	0x6b64	; 0x6b64 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ce 35 	jmp	0x6b9c	; 0x6b9c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <BCM_voidResetState>:
static volatile u8 currentSPIIndex = 0;
static volatile u8 currentI2CIndex = 0;
static volatile u8 interruptI2Cindex = 1;


static void BCM_voidResetState(volatile u8* index, volatile u8* state, volatile BCM bcm_queue[]){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <BCM_voidResetState+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <BCM_voidResetState+0x8>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <BCM_voidResetState+0xa>
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	9a 83       	std	Y+2, r25	; 0x02
     e3e:	89 83       	std	Y+1, r24	; 0x01
     e40:	7c 83       	std	Y+4, r23	; 0x04
     e42:	6b 83       	std	Y+3, r22	; 0x03
     e44:	5e 83       	std	Y+6, r21	; 0x06
     e46:	4d 83       	std	Y+5, r20	; 0x05
	bcm_queue[*index].state = DONE;
     e48:	e9 81       	ldd	r30, Y+1	; 0x01
     e4a:	fa 81       	ldd	r31, Y+2	; 0x02
     e4c:	80 81       	ld	r24, Z
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	c9 01       	movw	r24, r18
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	28 0f       	add	r18, r24
     e62:	39 1f       	adc	r19, r25
     e64:	8d 81       	ldd	r24, Y+5	; 0x05
     e66:	9e 81       	ldd	r25, Y+6	; 0x06
     e68:	fc 01       	movw	r30, r24
     e6a:	e2 0f       	add	r30, r18
     e6c:	f3 1f       	adc	r31, r19
     e6e:	17 82       	std	Z+7, r1	; 0x07
	if(bcm_queue[*index].Fun_PTR != NULL){
     e70:	e9 81       	ldd	r30, Y+1	; 0x01
     e72:	fa 81       	ldd	r31, Y+2	; 0x02
     e74:	80 81       	ld	r24, Z
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	c9 01       	movw	r24, r18
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	28 0f       	add	r18, r24
     e8a:	39 1f       	adc	r19, r25
     e8c:	8d 81       	ldd	r24, Y+5	; 0x05
     e8e:	9e 81       	ldd	r25, Y+6	; 0x06
     e90:	fc 01       	movw	r30, r24
     e92:	e2 0f       	add	r30, r18
     e94:	f3 1f       	adc	r31, r19
     e96:	82 81       	ldd	r24, Z+2	; 0x02
     e98:	93 81       	ldd	r25, Z+3	; 0x03
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	b9 f0       	breq	.+46     	; 0xecc <BCM_voidResetState+0x9e>
		bcm_queue[*index].Fun_PTR();
     e9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ea0:	fa 81       	ldd	r31, Y+2	; 0x02
     ea2:	80 81       	ld	r24, Z
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	c9 01       	movw	r24, r18
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	28 0f       	add	r18, r24
     eb8:	39 1f       	adc	r19, r25
     eba:	8d 81       	ldd	r24, Y+5	; 0x05
     ebc:	9e 81       	ldd	r25, Y+6	; 0x06
     ebe:	fc 01       	movw	r30, r24
     ec0:	e2 0f       	add	r30, r18
     ec2:	f3 1f       	adc	r31, r19
     ec4:	02 80       	ldd	r0, Z+2	; 0x02
     ec6:	f3 81       	ldd	r31, Z+3	; 0x03
     ec8:	e0 2d       	mov	r30, r0
     eca:	09 95       	icall
	}
	(*index)++;
     ecc:	e9 81       	ldd	r30, Y+1	; 0x01
     ece:	fa 81       	ldd	r31, Y+2	; 0x02
     ed0:	80 81       	ld	r24, Z
     ed2:	8f 5f       	subi	r24, 0xFF	; 255
     ed4:	e9 81       	ldd	r30, Y+1	; 0x01
     ed6:	fa 81       	ldd	r31, Y+2	; 0x02
     ed8:	80 83       	st	Z, r24
	*state = READY;
     eda:	eb 81       	ldd	r30, Y+3	; 0x03
     edc:	fc 81       	ldd	r31, Y+4	; 0x04
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	80 83       	st	Z, r24
}
     ee2:	26 96       	adiw	r28, 0x06	; 6
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <USARTTransmissionDone>:

static void USARTTransmissionDone(){
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	00 d0       	rcall	.+0      	; 0xefa <USARTTransmissionDone+0x6>
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
	if(bcm_USART_queue[currentUSARTIndex].state != BUSY){
     efe:	80 91 cf 01 	lds	r24, 0x01CF
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	c9 01       	movw	r24, r18
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	82 0f       	add	r24, r18
     f16:	93 1f       	adc	r25, r19
     f18:	fc 01       	movw	r30, r24
     f1a:	e5 56       	subi	r30, 0x65	; 101
     f1c:	fc 4f       	sbci	r31, 0xFC	; 252
     f1e:	80 81       	ld	r24, Z
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	c9 f0       	breq	.+50     	; 0xf56 <USARTTransmissionDone+0x62>
		BCM_voidResetState(&currentGeneralIndex, &generalQueueState, bcm_General_queue);
     f24:	8e ec       	ldi	r24, 0xCE	; 206
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	28 e6       	ldi	r18, 0x68	; 104
     f2a:	31 e0       	ldi	r19, 0x01	; 1
     f2c:	42 ed       	ldi	r20, 0xD2	; 210
     f2e:	51 e0       	ldi	r21, 0x01	; 1
     f30:	b9 01       	movw	r22, r18
     f32:	0e 94 17 07 	call	0xe2e	; 0xe2e <BCM_voidResetState>
		currentGeneralIndex = currentGeneralIndex > (MAX_GENERAL_QUEUE_SIZE - 1) ? 0 : currentGeneralIndex;
     f36:	80 91 ce 01 	lds	r24, 0x01CE
     f3a:	82 33       	cpi	r24, 0x32	; 50
     f3c:	20 f4       	brcc	.+8      	; 0xf46 <USARTTransmissionDone+0x52>
     f3e:	80 91 ce 01 	lds	r24, 0x01CE
     f42:	8a 83       	std	Y+2, r24	; 0x02
     f44:	01 c0       	rjmp	.+2      	; 0xf48 <USARTTransmissionDone+0x54>
     f46:	1a 82       	std	Y+2, r1	; 0x02
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	80 93 ce 01 	sts	0x01CE, r24
		USARTQueueState = READY;
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	80 93 69 01 	sts	0x0169, r24
     f54:	15 c0       	rjmp	.+42     	; 0xf80 <USARTTransmissionDone+0x8c>
	}
	else{
		BCM_voidResetState(&currentUSARTIndex, &USARTQueueState, bcm_USART_queue);
     f56:	8f ec       	ldi	r24, 0xCF	; 207
     f58:	91 e0       	ldi	r25, 0x01	; 1
     f5a:	29 e6       	ldi	r18, 0x69	; 105
     f5c:	31 e0       	ldi	r19, 0x01	; 1
     f5e:	44 e9       	ldi	r20, 0x94	; 148
     f60:	53 e0       	ldi	r21, 0x03	; 3
     f62:	b9 01       	movw	r22, r18
     f64:	0e 94 17 07 	call	0xe2e	; 0xe2e <BCM_voidResetState>
		currentUSARTIndex = currentUSARTIndex > (MAX_USART_QUEUE_SIZE - 1) ? 0 : currentUSARTIndex;
     f68:	80 91 cf 01 	lds	r24, 0x01CF
     f6c:	84 31       	cpi	r24, 0x14	; 20
     f6e:	20 f4       	brcc	.+8      	; 0xf78 <USARTTransmissionDone+0x84>
     f70:	80 91 cf 01 	lds	r24, 0x01CF
     f74:	89 83       	std	Y+1, r24	; 0x01
     f76:	01 c0       	rjmp	.+2      	; 0xf7a <USARTTransmissionDone+0x86>
     f78:	19 82       	std	Y+1, r1	; 0x01
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	80 93 cf 01 	sts	0x01CF, r24
	}
	BCM_voidSendQueuedData();
     f80:	0e 94 37 0c 	call	0x186e	; 0x186e <BCM_voidSendQueuedData>
}
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <SPITransmissionDone>:

static void SPITransmissionDone(){
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	00 d0       	rcall	.+0      	; 0xf94 <SPITransmissionDone+0x6>
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
	if(bcm_SPI_queue[currentSPIIndex].state != BUSY){
     f98:	80 91 d0 01 	lds	r24, 0x01D0
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	c9 01       	movw	r24, r18
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	82 0f       	add	r24, r18
     fb0:	93 1f       	adc	r25, r19
     fb2:	fc 01       	movw	r30, r24
     fb4:	e1 5b       	subi	r30, 0xB1	; 177
     fb6:	fb 4f       	sbci	r31, 0xFB	; 251
     fb8:	80 81       	ld	r24, Z
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	c9 f0       	breq	.+50     	; 0xff0 <SPITransmissionDone+0x62>
		BCM_voidResetState(&currentGeneralIndex, &generalQueueState, bcm_General_queue);
     fbe:	8e ec       	ldi	r24, 0xCE	; 206
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	28 e6       	ldi	r18, 0x68	; 104
     fc4:	31 e0       	ldi	r19, 0x01	; 1
     fc6:	42 ed       	ldi	r20, 0xD2	; 210
     fc8:	51 e0       	ldi	r21, 0x01	; 1
     fca:	b9 01       	movw	r22, r18
     fcc:	0e 94 17 07 	call	0xe2e	; 0xe2e <BCM_voidResetState>
		currentGeneralIndex = currentGeneralIndex > (MAX_GENERAL_QUEUE_SIZE - 1) ? 0 : currentGeneralIndex;
     fd0:	80 91 ce 01 	lds	r24, 0x01CE
     fd4:	82 33       	cpi	r24, 0x32	; 50
     fd6:	20 f4       	brcc	.+8      	; 0xfe0 <SPITransmissionDone+0x52>
     fd8:	80 91 ce 01 	lds	r24, 0x01CE
     fdc:	8a 83       	std	Y+2, r24	; 0x02
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <SPITransmissionDone+0x54>
     fe0:	1a 82       	std	Y+2, r1	; 0x02
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	80 93 ce 01 	sts	0x01CE, r24
		SPIQueueState = READY;
     fe8:	82 e0       	ldi	r24, 0x02	; 2
     fea:	80 93 6a 01 	sts	0x016A, r24
     fee:	15 c0       	rjmp	.+42     	; 0x101a <SPITransmissionDone+0x8c>
	}
	else{
		BCM_voidResetState(&currentSPIIndex, &SPIQueueState, bcm_SPI_queue);
     ff0:	80 ed       	ldi	r24, 0xD0	; 208
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	2a e6       	ldi	r18, 0x6A	; 106
     ff6:	31 e0       	ldi	r19, 0x01	; 1
     ff8:	48 e4       	ldi	r20, 0x48	; 72
     ffa:	54 e0       	ldi	r21, 0x04	; 4
     ffc:	b9 01       	movw	r22, r18
     ffe:	0e 94 17 07 	call	0xe2e	; 0xe2e <BCM_voidResetState>
		currentSPIIndex = currentSPIIndex > (MAX_SPI_QUEUE_SIZE - 1) ? 0 : currentSPIIndex;
    1002:	80 91 d0 01 	lds	r24, 0x01D0
    1006:	84 31       	cpi	r24, 0x14	; 20
    1008:	20 f4       	brcc	.+8      	; 0x1012 <SPITransmissionDone+0x84>
    100a:	80 91 d0 01 	lds	r24, 0x01D0
    100e:	89 83       	std	Y+1, r24	; 0x01
    1010:	01 c0       	rjmp	.+2      	; 0x1014 <SPITransmissionDone+0x86>
    1012:	19 82       	std	Y+1, r1	; 0x01
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	80 93 d0 01 	sts	0x01D0, r24
	}
	BCM_voidSendQueuedData();
    101a:	0e 94 37 0c 	call	0x186e	; 0x186e <BCM_voidSendQueuedData>
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <I2CTransmissionDone>:

static void I2CTransmissionDone(){
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <I2CTransmissionDone+0x6>
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
	if(bcm_I2C_queue[currentI2CIndex].state != BUSY){
    1032:	80 91 d1 01 	lds	r24, 0x01D1
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	c9 01       	movw	r24, r18
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	82 0f       	add	r24, r18
    104a:	93 1f       	adc	r25, r19
    104c:	fc 01       	movw	r30, r24
    104e:	ed 5f       	subi	r30, 0xFD	; 253
    1050:	fa 4f       	sbci	r31, 0xFA	; 250
    1052:	80 81       	ld	r24, Z
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	c9 f0       	breq	.+50     	; 0x108a <I2CTransmissionDone+0x62>
		BCM_voidResetState(&currentGeneralIndex, &generalQueueState, bcm_General_queue);
    1058:	8e ec       	ldi	r24, 0xCE	; 206
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	28 e6       	ldi	r18, 0x68	; 104
    105e:	31 e0       	ldi	r19, 0x01	; 1
    1060:	42 ed       	ldi	r20, 0xD2	; 210
    1062:	51 e0       	ldi	r21, 0x01	; 1
    1064:	b9 01       	movw	r22, r18
    1066:	0e 94 17 07 	call	0xe2e	; 0xe2e <BCM_voidResetState>
		currentGeneralIndex = currentGeneralIndex > (MAX_GENERAL_QUEUE_SIZE - 1) ? 0 : currentGeneralIndex;
    106a:	80 91 ce 01 	lds	r24, 0x01CE
    106e:	82 33       	cpi	r24, 0x32	; 50
    1070:	20 f4       	brcc	.+8      	; 0x107a <I2CTransmissionDone+0x52>
    1072:	80 91 ce 01 	lds	r24, 0x01CE
    1076:	8a 83       	std	Y+2, r24	; 0x02
    1078:	01 c0       	rjmp	.+2      	; 0x107c <I2CTransmissionDone+0x54>
    107a:	1a 82       	std	Y+2, r1	; 0x02
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	80 93 ce 01 	sts	0x01CE, r24
		I2CQueueState = READY;
    1082:	82 e0       	ldi	r24, 0x02	; 2
    1084:	80 93 6b 01 	sts	0x016B, r24
    1088:	15 c0       	rjmp	.+42     	; 0x10b4 <I2CTransmissionDone+0x8c>
	}
	else{
		BCM_voidResetState(&currentI2CIndex, &I2CQueueState, bcm_I2C_queue);
    108a:	81 ed       	ldi	r24, 0xD1	; 209
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	2b e6       	ldi	r18, 0x6B	; 107
    1090:	31 e0       	ldi	r19, 0x01	; 1
    1092:	4c ef       	ldi	r20, 0xFC	; 252
    1094:	54 e0       	ldi	r21, 0x04	; 4
    1096:	b9 01       	movw	r22, r18
    1098:	0e 94 17 07 	call	0xe2e	; 0xe2e <BCM_voidResetState>
		currentI2CIndex = currentI2CIndex > (MAX_I2C_QUEUE_SIZE - 1) ? 0 : currentI2CIndex;
    109c:	80 91 d1 01 	lds	r24, 0x01D1
    10a0:	84 31       	cpi	r24, 0x14	; 20
    10a2:	20 f4       	brcc	.+8      	; 0x10ac <I2CTransmissionDone+0x84>
    10a4:	80 91 d1 01 	lds	r24, 0x01D1
    10a8:	89 83       	std	Y+1, r24	; 0x01
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <I2CTransmissionDone+0x86>
    10ac:	19 82       	std	Y+1, r1	; 0x01
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	80 93 d1 01 	sts	0x01D1, r24
	}
	BCM_voidSendQueuedData();
    10b4:	0e 94 37 0c 	call	0x186e	; 0x186e <BCM_voidSendQueuedData>
}
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <I2C_Callback>:

static void I2C_Callback(){
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
	if(interruptI2Cindex == 1){
    10ca:	80 91 6c 01 	lds	r24, 0x016C
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <I2C_Callback+0x12>
    10d2:	40 c0       	rjmp	.+128    	; 0x1154 <I2C_Callback+0x92>
		interruptI2Cindex++;
    10d4:	80 91 6c 01 	lds	r24, 0x016C
    10d8:	8f 5f       	subi	r24, 0xFF	; 255
    10da:	80 93 6c 01 	sts	0x016C, r24
		if(bcm_I2C_queue[currentI2CIndex].state != BUSY){
    10de:	80 91 d1 01 	lds	r24, 0x01D1
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	c9 01       	movw	r24, r18
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	82 0f       	add	r24, r18
    10f6:	93 1f       	adc	r25, r19
    10f8:	fc 01       	movw	r30, r24
    10fa:	ed 5f       	subi	r30, 0xFD	; 253
    10fc:	fa 4f       	sbci	r31, 0xFA	; 250
    10fe:	80 81       	ld	r24, Z
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	a1 f0       	breq	.+40     	; 0x112c <I2C_Callback+0x6a>
			I2C_Master_INT_voidSendSlaveAddressWithWrite(bcm_General_queue[currentGeneralIndex].SlaveAddress);
    1104:	80 91 ce 01 	lds	r24, 0x01CE
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	c9 01       	movw	r24, r18
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	82 0f       	add	r24, r18
    111c:	93 1f       	adc	r25, r19
    111e:	fc 01       	movw	r30, r24
    1120:	ea 52       	subi	r30, 0x2A	; 42
    1122:	fe 4f       	sbci	r31, 0xFE	; 254
    1124:	80 81       	ld	r24, Z
    1126:	0e 94 2e 14 	call	0x285c	; 0x285c <I2C_Master_INT_voidSendSlaveAddressWithWrite>
    112a:	da c0       	rjmp	.+436    	; 0x12e0 <I2C_Callback+0x21e>
		}
		else{
			I2C_Master_INT_voidSendSlaveAddressWithWrite(bcm_I2C_queue[currentI2CIndex].SlaveAddress);
    112c:	80 91 d1 01 	lds	r24, 0x01D1
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	c9 01       	movw	r24, r18
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	82 0f       	add	r24, r18
    1144:	93 1f       	adc	r25, r19
    1146:	fc 01       	movw	r30, r24
    1148:	e0 50       	subi	r30, 0x00	; 0
    114a:	fb 4f       	sbci	r31, 0xFB	; 251
    114c:	80 81       	ld	r24, Z
    114e:	0e 94 2e 14 	call	0x285c	; 0x285c <I2C_Master_INT_voidSendSlaveAddressWithWrite>
    1152:	c6 c0       	rjmp	.+396    	; 0x12e0 <I2C_Callback+0x21e>
		}
	}
	else if(interruptI2Cindex == 2){
    1154:	80 91 6c 01 	lds	r24, 0x016C
    1158:	82 30       	cpi	r24, 0x02	; 2
    115a:	09 f0       	breq	.+2      	; 0x115e <I2C_Callback+0x9c>
    115c:	b6 c0       	rjmp	.+364    	; 0x12ca <I2C_Callback+0x208>
		if(bcm_I2C_queue[currentI2CIndex].state != BUSY){
    115e:	80 91 d1 01 	lds	r24, 0x01D1
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	c9 01       	movw	r24, r18
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	82 0f       	add	r24, r18
    1176:	93 1f       	adc	r25, r19
    1178:	fc 01       	movw	r30, r24
    117a:	ed 5f       	subi	r30, 0xFD	; 253
    117c:	fa 4f       	sbci	r31, 0xFA	; 250
    117e:	80 81       	ld	r24, Z
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	09 f4       	brne	.+2      	; 0x1186 <I2C_Callback+0xc4>
    1184:	51 c0       	rjmp	.+162    	; 0x1228 <I2C_Callback+0x166>
			if(bcm_General_queue[currentGeneralIndex].RegAvailable == 1){
    1186:	80 91 ce 01 	lds	r24, 0x01CE
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	c9 01       	movw	r24, r18
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	82 0f       	add	r24, r18
    119e:	93 1f       	adc	r25, r19
    11a0:	fc 01       	movw	r30, r24
    11a2:	e8 52       	subi	r30, 0x28	; 40
    11a4:	fe 4f       	sbci	r31, 0xFE	; 254
    11a6:	80 81       	ld	r24, Z
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	29 f5       	brne	.+74     	; 0x11f6 <I2C_Callback+0x134>
				I2C_Master_INT_voidSendu8Data(bcm_General_queue[currentGeneralIndex].RegisterAddress);
    11ac:	80 91 ce 01 	lds	r24, 0x01CE
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	c9 01       	movw	r24, r18
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	82 0f       	add	r24, r18
    11c4:	93 1f       	adc	r25, r19
    11c6:	fc 01       	movw	r30, r24
    11c8:	e9 52       	subi	r30, 0x29	; 41
    11ca:	fe 4f       	sbci	r31, 0xFE	; 254
    11cc:	80 81       	ld	r24, Z
    11ce:	0e 94 47 14 	call	0x288e	; 0x288e <I2C_Master_INT_voidSendu8Data>
				bcm_General_queue[currentGeneralIndex].RegAvailable = 0;
    11d2:	80 91 ce 01 	lds	r24, 0x01CE
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	c9 01       	movw	r24, r18
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	82 0f       	add	r24, r18
    11ea:	93 1f       	adc	r25, r19
    11ec:	fc 01       	movw	r30, r24
    11ee:	e8 52       	subi	r30, 0x28	; 40
    11f0:	fe 4f       	sbci	r31, 0xFE	; 254
    11f2:	10 82       	st	Z, r1
    11f4:	75 c0       	rjmp	.+234    	; 0x12e0 <I2C_Callback+0x21e>
			}
			else{
				interruptI2Cindex++;
    11f6:	80 91 6c 01 	lds	r24, 0x016C
    11fa:	8f 5f       	subi	r24, 0xFF	; 255
    11fc:	80 93 6c 01 	sts	0x016C, r24
				I2C_Master_INT_voidSendu8Data(bcm_General_queue[currentGeneralIndex].data);
    1200:	80 91 ce 01 	lds	r24, 0x01CE
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	c9 01       	movw	r24, r18
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	82 0f       	add	r24, r18
    1218:	93 1f       	adc	r25, r19
    121a:	fc 01       	movw	r30, r24
    121c:	ed 52       	subi	r30, 0x2D	; 45
    121e:	fe 4f       	sbci	r31, 0xFE	; 254
    1220:	80 81       	ld	r24, Z
    1222:	0e 94 47 14 	call	0x288e	; 0x288e <I2C_Master_INT_voidSendu8Data>
    1226:	5c c0       	rjmp	.+184    	; 0x12e0 <I2C_Callback+0x21e>
			}
		}
		else{
			if(bcm_I2C_queue[currentI2CIndex].RegAvailable == 1){
    1228:	80 91 d1 01 	lds	r24, 0x01D1
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	c9 01       	movw	r24, r18
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	82 0f       	add	r24, r18
    1240:	93 1f       	adc	r25, r19
    1242:	fc 01       	movw	r30, r24
    1244:	ee 5f       	subi	r30, 0xFE	; 254
    1246:	fa 4f       	sbci	r31, 0xFA	; 250
    1248:	80 81       	ld	r24, Z
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	29 f5       	brne	.+74     	; 0x1298 <I2C_Callback+0x1d6>
				I2C_Master_INT_voidSendu8Data(bcm_I2C_queue[currentI2CIndex].RegisterAddress);
    124e:	80 91 d1 01 	lds	r24, 0x01D1
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	c9 01       	movw	r24, r18
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	82 0f       	add	r24, r18
    1266:	93 1f       	adc	r25, r19
    1268:	fc 01       	movw	r30, r24
    126a:	ef 5f       	subi	r30, 0xFF	; 255
    126c:	fa 4f       	sbci	r31, 0xFA	; 250
    126e:	80 81       	ld	r24, Z
    1270:	0e 94 47 14 	call	0x288e	; 0x288e <I2C_Master_INT_voidSendu8Data>
				bcm_I2C_queue[currentI2CIndex].RegAvailable = 0;
    1274:	80 91 d1 01 	lds	r24, 0x01D1
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	c9 01       	movw	r24, r18
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	82 0f       	add	r24, r18
    128c:	93 1f       	adc	r25, r19
    128e:	fc 01       	movw	r30, r24
    1290:	ee 5f       	subi	r30, 0xFE	; 254
    1292:	fa 4f       	sbci	r31, 0xFA	; 250
    1294:	10 82       	st	Z, r1
    1296:	24 c0       	rjmp	.+72     	; 0x12e0 <I2C_Callback+0x21e>
			}
			else{
				interruptI2Cindex++;
    1298:	80 91 6c 01 	lds	r24, 0x016C
    129c:	8f 5f       	subi	r24, 0xFF	; 255
    129e:	80 93 6c 01 	sts	0x016C, r24
				I2C_Master_INT_voidSendu8Data(bcm_I2C_queue[currentI2CIndex].data);
    12a2:	80 91 d1 01 	lds	r24, 0x01D1
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	c9 01       	movw	r24, r18
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	82 0f       	add	r24, r18
    12ba:	93 1f       	adc	r25, r19
    12bc:	fc 01       	movw	r30, r24
    12be:	e3 50       	subi	r30, 0x03	; 3
    12c0:	fb 4f       	sbci	r31, 0xFB	; 251
    12c2:	80 81       	ld	r24, Z
    12c4:	0e 94 47 14 	call	0x288e	; 0x288e <I2C_Master_INT_voidSendu8Data>
    12c8:	0b c0       	rjmp	.+22     	; 0x12e0 <I2C_Callback+0x21e>
			}
		}
	}
	else if(interruptI2Cindex == 3){
    12ca:	80 91 6c 01 	lds	r24, 0x016C
    12ce:	83 30       	cpi	r24, 0x03	; 3
    12d0:	39 f4       	brne	.+14     	; 0x12e0 <I2C_Callback+0x21e>
		interruptI2Cindex = 1;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	80 93 6c 01 	sts	0x016C, r24
		I2C_Master_INT_voidSendStopCond();
    12d8:	0e 94 64 14 	call	0x28c8	; 0x28c8 <I2C_Master_INT_voidSendStopCond>
		I2CTransmissionDone();
    12dc:	0e 94 14 08 	call	0x1028	; 0x1028 <I2CTransmissionDone>
	}
}
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <BCM_structLoadData>:

static BCM BCM_structLoadData(u8 data,BCM_COMM_Protocol protocol ,void(*Fun_PTR)(void), u8* SlaveAddress, u8* RegisterAddress, QUEUE_TYPE queueType){
    12e6:	cf 92       	push	r12
    12e8:	ef 92       	push	r14
    12ea:	ff 92       	push	r15
    12ec:	0f 93       	push	r16
    12ee:	1f 93       	push	r17
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	69 97       	sbiw	r28, 0x19	; 25
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	9c 8b       	std	Y+20, r25	; 0x14
    1306:	8b 8b       	std	Y+19, r24	; 0x13
    1308:	6a 87       	std	Y+10, r22	; 0x0a
    130a:	4b 87       	std	Y+11, r20	; 0x0b
    130c:	3d 87       	std	Y+13, r19	; 0x0d
    130e:	2c 87       	std	Y+12, r18	; 0x0c
    1310:	1f 87       	std	Y+15, r17	; 0x0f
    1312:	0e 87       	std	Y+14, r16	; 0x0e
    1314:	f9 8a       	std	Y+17, r15	; 0x11
    1316:	e8 8a       	std	Y+16, r14	; 0x10
    1318:	ca 8a       	std	Y+18, r12	; 0x12
	BCM bcm;
	bcm.data = data;
    131a:	8a 85       	ldd	r24, Y+10	; 0x0a
    131c:	8a 83       	std	Y+2, r24	; 0x02
	bcm.protocol = protocol;
    131e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1320:	89 83       	std	Y+1, r24	; 0x01
	bcm.Fun_PTR = Fun_PTR;
    1322:	8c 85       	ldd	r24, Y+12	; 0x0c
    1324:	9d 85       	ldd	r25, Y+13	; 0x0d
    1326:	9c 83       	std	Y+4, r25	; 0x04
    1328:	8b 83       	std	Y+3, r24	; 0x03
	bcm.state = DONE;
    132a:	18 86       	std	Y+8, r1	; 0x08
	bcm.type = queueType;
    132c:	8a 89       	ldd	r24, Y+18	; 0x12
    132e:	89 87       	std	Y+9, r24	; 0x09
	if(SlaveAddress != NULL){
    1330:	8e 85       	ldd	r24, Y+14	; 0x0e
    1332:	9f 85       	ldd	r25, Y+15	; 0x0f
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	89 f0       	breq	.+34     	; 0x135a <BCM_structLoadData+0x74>
		bcm.SlaveAddress = *SlaveAddress;
    1338:	ee 85       	ldd	r30, Y+14	; 0x0e
    133a:	ff 85       	ldd	r31, Y+15	; 0x0f
    133c:	80 81       	ld	r24, Z
    133e:	8d 83       	std	Y+5, r24	; 0x05
		if(RegisterAddress != NULL){
    1340:	88 89       	ldd	r24, Y+16	; 0x10
    1342:	99 89       	ldd	r25, Y+17	; 0x11
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	39 f0       	breq	.+14     	; 0x1356 <BCM_structLoadData+0x70>
			bcm.RegAvailable = 1;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	8f 83       	std	Y+7, r24	; 0x07
			bcm.RegisterAddress = *RegisterAddress;
    134c:	e8 89       	ldd	r30, Y+16	; 0x10
    134e:	f9 89       	ldd	r31, Y+17	; 0x11
    1350:	80 81       	ld	r24, Z
    1352:	8e 83       	std	Y+6, r24	; 0x06
    1354:	04 c0       	rjmp	.+8      	; 0x135e <BCM_structLoadData+0x78>
		}
		else{
			bcm.RegAvailable = 0;
    1356:	1f 82       	std	Y+7, r1	; 0x07
    1358:	02 c0       	rjmp	.+4      	; 0x135e <BCM_structLoadData+0x78>
		}
	}
	else{
		bcm.SlaveAddress = 0;
    135a:	1d 82       	std	Y+5, r1	; 0x05
		bcm.RegAvailable = 0;
    135c:	1f 82       	std	Y+7, r1	; 0x07
	}

	return bcm;
    135e:	8b 89       	ldd	r24, Y+19	; 0x13
    1360:	9c 89       	ldd	r25, Y+20	; 0x14
    1362:	9e 8b       	std	Y+22, r25	; 0x16
    1364:	8d 8b       	std	Y+21, r24	; 0x15
    1366:	fe 01       	movw	r30, r28
    1368:	31 96       	adiw	r30, 0x01	; 1
    136a:	f8 8f       	std	Y+24, r31	; 0x18
    136c:	ef 8b       	std	Y+23, r30	; 0x17
    136e:	f9 e0       	ldi	r31, 0x09	; 9
    1370:	f9 8f       	std	Y+25, r31	; 0x19
    1372:	ef 89       	ldd	r30, Y+23	; 0x17
    1374:	f8 8d       	ldd	r31, Y+24	; 0x18
    1376:	00 80       	ld	r0, Z
    1378:	8f 89       	ldd	r24, Y+23	; 0x17
    137a:	98 8d       	ldd	r25, Y+24	; 0x18
    137c:	01 96       	adiw	r24, 0x01	; 1
    137e:	98 8f       	std	Y+24, r25	; 0x18
    1380:	8f 8b       	std	Y+23, r24	; 0x17
    1382:	ed 89       	ldd	r30, Y+21	; 0x15
    1384:	fe 89       	ldd	r31, Y+22	; 0x16
    1386:	00 82       	st	Z, r0
    1388:	8d 89       	ldd	r24, Y+21	; 0x15
    138a:	9e 89       	ldd	r25, Y+22	; 0x16
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	9e 8b       	std	Y+22, r25	; 0x16
    1390:	8d 8b       	std	Y+21, r24	; 0x15
    1392:	99 8d       	ldd	r25, Y+25	; 0x19
    1394:	91 50       	subi	r25, 0x01	; 1
    1396:	99 8f       	std	Y+25, r25	; 0x19
    1398:	e9 8d       	ldd	r30, Y+25	; 0x19
    139a:	ee 23       	and	r30, r30
    139c:	51 f7       	brne	.-44     	; 0x1372 <BCM_structLoadData+0x8c>
}
    139e:	8b 89       	ldd	r24, Y+19	; 0x13
    13a0:	9c 89       	ldd	r25, Y+20	; 0x14
    13a2:	69 96       	adiw	r28, 0x19	; 25
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	ef 90       	pop	r14
    13ba:	cf 90       	pop	r12
    13bc:	08 95       	ret

000013be <BCM_voidAddProtocol>:

static void BCM_voidAddProtocol(BCM bcm, volatile u8* index, volatile BCM bcm_queue[]){
    13be:	cf 92       	push	r12
    13c0:	df 92       	push	r13
    13c2:	ef 92       	push	r14
    13c4:	ff 92       	push	r15
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	62 97       	sbiw	r28, 0x12	; 18
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	09 83       	std	Y+1, r16	; 0x01
    13e0:	1a 83       	std	Y+2, r17	; 0x02
    13e2:	2b 83       	std	Y+3, r18	; 0x03
    13e4:	3c 83       	std	Y+4, r19	; 0x04
    13e6:	4d 83       	std	Y+5, r20	; 0x05
    13e8:	5e 83       	std	Y+6, r21	; 0x06
    13ea:	6f 83       	std	Y+7, r22	; 0x07
    13ec:	78 87       	std	Y+8, r23	; 0x08
    13ee:	89 87       	std	Y+9, r24	; 0x09
    13f0:	fb 86       	std	Y+11, r15	; 0x0b
    13f2:	ea 86       	std	Y+10, r14	; 0x0a
    13f4:	dd 86       	std	Y+13, r13	; 0x0d
    13f6:	cc 86       	std	Y+12, r12	; 0x0c
	if(bcm_queue[*index].state == DONE){
    13f8:	ea 85       	ldd	r30, Y+10	; 0x0a
    13fa:	fb 85       	ldd	r31, Y+11	; 0x0b
    13fc:	80 81       	ld	r24, Z
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	c9 01       	movw	r24, r18
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	28 0f       	add	r18, r24
    1412:	39 1f       	adc	r19, r25
    1414:	8c 85       	ldd	r24, Y+12	; 0x0c
    1416:	9d 85       	ldd	r25, Y+13	; 0x0d
    1418:	fc 01       	movw	r30, r24
    141a:	e2 0f       	add	r30, r18
    141c:	f3 1f       	adc	r31, r19
    141e:	87 81       	ldd	r24, Z+7	; 0x07
    1420:	88 23       	and	r24, r24
    1422:	09 f0       	breq	.+2      	; 0x1426 <BCM_voidAddProtocol+0x68>
    1424:	4c c0       	rjmp	.+152    	; 0x14be <BCM_voidAddProtocol+0x100>
		bcm_queue[*index] = bcm;
    1426:	ea 85       	ldd	r30, Y+10	; 0x0a
    1428:	fb 85       	ldd	r31, Y+11	; 0x0b
    142a:	80 81       	ld	r24, Z
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	c9 01       	movw	r24, r18
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	28 0f       	add	r18, r24
    1440:	39 1f       	adc	r19, r25
    1442:	8c 85       	ldd	r24, Y+12	; 0x0c
    1444:	9d 85       	ldd	r25, Y+13	; 0x0d
    1446:	82 0f       	add	r24, r18
    1448:	93 1f       	adc	r25, r19
    144a:	9f 87       	std	Y+15, r25	; 0x0f
    144c:	8e 87       	std	Y+14, r24	; 0x0e
    144e:	ce 01       	movw	r24, r28
    1450:	01 96       	adiw	r24, 0x01	; 1
    1452:	99 8b       	std	Y+17, r25	; 0x11
    1454:	88 8b       	std	Y+16, r24	; 0x10
    1456:	99 e0       	ldi	r25, 0x09	; 9
    1458:	9a 8b       	std	Y+18, r25	; 0x12
    145a:	e8 89       	ldd	r30, Y+16	; 0x10
    145c:	f9 89       	ldd	r31, Y+17	; 0x11
    145e:	00 80       	ld	r0, Z
    1460:	88 89       	ldd	r24, Y+16	; 0x10
    1462:	99 89       	ldd	r25, Y+17	; 0x11
    1464:	01 96       	adiw	r24, 0x01	; 1
    1466:	99 8b       	std	Y+17, r25	; 0x11
    1468:	88 8b       	std	Y+16, r24	; 0x10
    146a:	ee 85       	ldd	r30, Y+14	; 0x0e
    146c:	ff 85       	ldd	r31, Y+15	; 0x0f
    146e:	00 82       	st	Z, r0
    1470:	8e 85       	ldd	r24, Y+14	; 0x0e
    1472:	9f 85       	ldd	r25, Y+15	; 0x0f
    1474:	01 96       	adiw	r24, 0x01	; 1
    1476:	9f 87       	std	Y+15, r25	; 0x0f
    1478:	8e 87       	std	Y+14, r24	; 0x0e
    147a:	9a 89       	ldd	r25, Y+18	; 0x12
    147c:	91 50       	subi	r25, 0x01	; 1
    147e:	9a 8b       	std	Y+18, r25	; 0x12
    1480:	ea 89       	ldd	r30, Y+18	; 0x12
    1482:	ee 23       	and	r30, r30
    1484:	51 f7       	brne	.-44     	; 0x145a <BCM_voidAddProtocol+0x9c>
		bcm_queue[*index].state = READY;
    1486:	ea 85       	ldd	r30, Y+10	; 0x0a
    1488:	fb 85       	ldd	r31, Y+11	; 0x0b
    148a:	80 81       	ld	r24, Z
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	c9 01       	movw	r24, r18
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	28 0f       	add	r18, r24
    14a0:	39 1f       	adc	r19, r25
    14a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    14a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    14a6:	fc 01       	movw	r30, r24
    14a8:	e2 0f       	add	r30, r18
    14aa:	f3 1f       	adc	r31, r19
    14ac:	82 e0       	ldi	r24, 0x02	; 2
    14ae:	87 83       	std	Z+7, r24	; 0x07
		(*index)++;
    14b0:	ea 85       	ldd	r30, Y+10	; 0x0a
    14b2:	fb 85       	ldd	r31, Y+11	; 0x0b
    14b4:	80 81       	ld	r24, Z
    14b6:	8f 5f       	subi	r24, 0xFF	; 255
    14b8:	ea 85       	ldd	r30, Y+10	; 0x0a
    14ba:	fb 85       	ldd	r31, Y+11	; 0x0b
    14bc:	80 83       	st	Z, r24
	}
	BCM_voidSendQueuedData();
    14be:	0e 94 37 0c 	call	0x186e	; 0x186e <BCM_voidSendQueuedData>
}
    14c2:	62 96       	adiw	r28, 0x12	; 18
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	1f 91       	pop	r17
    14d4:	0f 91       	pop	r16
    14d6:	ff 90       	pop	r15
    14d8:	ef 90       	pop	r14
    14da:	df 90       	pop	r13
    14dc:	cf 90       	pop	r12
    14de:	08 95       	ret

000014e0 <BCM_voidCheckAndStart>:



static void BCM_voidCheckAndStart(volatile u8* state, u8 index, volatile BCM bcm_queue[]){
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	27 97       	sbiw	r28, 0x07	; 7
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	9a 83       	std	Y+2, r25	; 0x02
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	6b 83       	std	Y+3, r22	; 0x03
    14fa:	5d 83       	std	Y+5, r21	; 0x05
    14fc:	4c 83       	std	Y+4, r20	; 0x04
	if(*state == READY){
    14fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1500:	fa 81       	ldd	r31, Y+2	; 0x02
    1502:	80 81       	ld	r24, Z
    1504:	82 30       	cpi	r24, 0x02	; 2
    1506:	09 f0       	breq	.+2      	; 0x150a <BCM_voidCheckAndStart+0x2a>
    1508:	c4 c0       	rjmp	.+392    	; 0x1692 <BCM_voidCheckAndStart+0x1b2>
		if(bcm_queue[index].state == READY){
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	c9 01       	movw	r24, r18
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	28 0f       	add	r18, r24
    1520:	39 1f       	adc	r19, r25
    1522:	8c 81       	ldd	r24, Y+4	; 0x04
    1524:	9d 81       	ldd	r25, Y+5	; 0x05
    1526:	fc 01       	movw	r30, r24
    1528:	e2 0f       	add	r30, r18
    152a:	f3 1f       	adc	r31, r19
    152c:	87 81       	ldd	r24, Z+7	; 0x07
    152e:	82 30       	cpi	r24, 0x02	; 2
    1530:	09 f0       	breq	.+2      	; 0x1534 <BCM_voidCheckAndStart+0x54>
    1532:	af c0       	rjmp	.+350    	; 0x1692 <BCM_voidCheckAndStart+0x1b2>
			switch(bcm_queue[index].protocol){
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	c9 01       	movw	r24, r18
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	28 0f       	add	r18, r24
    154a:	39 1f       	adc	r19, r25
    154c:	8c 81       	ldd	r24, Y+4	; 0x04
    154e:	9d 81       	ldd	r25, Y+5	; 0x05
    1550:	fc 01       	movw	r30, r24
    1552:	e2 0f       	add	r30, r18
    1554:	f3 1f       	adc	r31, r19
    1556:	80 81       	ld	r24, Z
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	3f 83       	std	Y+7, r19	; 0x07
    155e:	2e 83       	std	Y+6, r18	; 0x06
    1560:	8e 81       	ldd	r24, Y+6	; 0x06
    1562:	9f 81       	ldd	r25, Y+7	; 0x07
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	91 05       	cpc	r25, r1
    1568:	09 f4       	brne	.+2      	; 0x156c <BCM_voidCheckAndStart+0x8c>
    156a:	3f c0       	rjmp	.+126    	; 0x15ea <BCM_voidCheckAndStart+0x10a>
    156c:	2e 81       	ldd	r18, Y+6	; 0x06
    156e:	3f 81       	ldd	r19, Y+7	; 0x07
    1570:	22 30       	cpi	r18, 0x02	; 2
    1572:	31 05       	cpc	r19, r1
    1574:	09 f4       	brne	.+2      	; 0x1578 <BCM_voidCheckAndStart+0x98>
    1576:	6d c0       	rjmp	.+218    	; 0x1652 <BCM_voidCheckAndStart+0x172>
    1578:	8e 81       	ldd	r24, Y+6	; 0x06
    157a:	9f 81       	ldd	r25, Y+7	; 0x07
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	09 f0       	breq	.+2      	; 0x1582 <BCM_voidCheckAndStart+0xa2>
    1580:	88 c0       	rjmp	.+272    	; 0x1692 <BCM_voidCheckAndStart+0x1b2>
			case USART:
				if(USARTQueueState != BUSY){
    1582:	80 91 69 01 	lds	r24, 0x0169
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	09 f4       	brne	.+2      	; 0x158c <BCM_voidCheckAndStart+0xac>
    158a:	83 c0       	rjmp	.+262    	; 0x1692 <BCM_voidCheckAndStart+0x1b2>
					USARTQueueState = BUSY;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	80 93 69 01 	sts	0x0169, r24
					bcm_queue[index].state = BUSY;
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	c9 01       	movw	r24, r18
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	28 0f       	add	r18, r24
    15a8:	39 1f       	adc	r19, r25
    15aa:	8c 81       	ldd	r24, Y+4	; 0x04
    15ac:	9d 81       	ldd	r25, Y+5	; 0x05
    15ae:	fc 01       	movw	r30, r24
    15b0:	e2 0f       	add	r30, r18
    15b2:	f3 1f       	adc	r31, r19
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	87 83       	std	Z+7, r24	; 0x07
					*state = BUSY;
    15b8:	e9 81       	ldd	r30, Y+1	; 0x01
    15ba:	fa 81       	ldd	r31, Y+2	; 0x02
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	80 83       	st	Z, r24
					USART_voidSendInterruptByte(bcm_queue[index].data);
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	c9 01       	movw	r24, r18
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	28 0f       	add	r18, r24
    15d6:	39 1f       	adc	r19, r25
    15d8:	8c 81       	ldd	r24, Y+4	; 0x04
    15da:	9d 81       	ldd	r25, Y+5	; 0x05
    15dc:	fc 01       	movw	r30, r24
    15de:	e2 0f       	add	r30, r18
    15e0:	f3 1f       	adc	r31, r19
    15e2:	81 81       	ldd	r24, Z+1	; 0x01
    15e4:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <USART_voidSendInterruptByte>
    15e8:	54 c0       	rjmp	.+168    	; 0x1692 <BCM_voidCheckAndStart+0x1b2>
				}
				break;
			case SPI:
				if(SPIQueueState != BUSY){
    15ea:	80 91 6a 01 	lds	r24, 0x016A
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <BCM_voidCheckAndStart+0x114>
    15f2:	4f c0       	rjmp	.+158    	; 0x1692 <BCM_voidCheckAndStart+0x1b2>
					SPIQueueState = BUSY;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	80 93 6a 01 	sts	0x016A, r24
					bcm_queue[index].state = BUSY;
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	c9 01       	movw	r24, r18
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	28 0f       	add	r18, r24
    1610:	39 1f       	adc	r19, r25
    1612:	8c 81       	ldd	r24, Y+4	; 0x04
    1614:	9d 81       	ldd	r25, Y+5	; 0x05
    1616:	fc 01       	movw	r30, r24
    1618:	e2 0f       	add	r30, r18
    161a:	f3 1f       	adc	r31, r19
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	87 83       	std	Z+7, r24	; 0x07
					*state = BUSY;
    1620:	e9 81       	ldd	r30, Y+1	; 0x01
    1622:	fa 81       	ldd	r31, Y+2	; 0x02
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	80 83       	st	Z, r24
					SPI_voidSendDataISR(bcm_queue[index].data);
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	c9 01       	movw	r24, r18
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	28 0f       	add	r18, r24
    163e:	39 1f       	adc	r19, r25
    1640:	8c 81       	ldd	r24, Y+4	; 0x04
    1642:	9d 81       	ldd	r25, Y+5	; 0x05
    1644:	fc 01       	movw	r30, r24
    1646:	e2 0f       	add	r30, r18
    1648:	f3 1f       	adc	r31, r19
    164a:	81 81       	ldd	r24, Z+1	; 0x01
    164c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <SPI_voidSendDataISR>
    1650:	20 c0       	rjmp	.+64     	; 0x1692 <BCM_voidCheckAndStart+0x1b2>
				}
				break;
			case I2C:
				if(I2CQueueState != BUSY){
    1652:	80 91 6b 01 	lds	r24, 0x016B
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	e1 f0       	breq	.+56     	; 0x1692 <BCM_voidCheckAndStart+0x1b2>
					I2CQueueState = BUSY;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	80 93 6b 01 	sts	0x016B, r24
					bcm_queue[index].state = BUSY;
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	c9 01       	movw	r24, r18
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	28 0f       	add	r18, r24
    1676:	39 1f       	adc	r19, r25
    1678:	8c 81       	ldd	r24, Y+4	; 0x04
    167a:	9d 81       	ldd	r25, Y+5	; 0x05
    167c:	fc 01       	movw	r30, r24
    167e:	e2 0f       	add	r30, r18
    1680:	f3 1f       	adc	r31, r19
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	87 83       	std	Z+7, r24	; 0x07
					*state = BUSY;
    1686:	e9 81       	ldd	r30, Y+1	; 0x01
    1688:	fa 81       	ldd	r31, Y+2	; 0x02
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	80 83       	st	Z, r24
					I2C_Master_INT_voidSendStartCond();
    168e:	0e 94 23 14 	call	0x2846	; 0x2846 <I2C_Master_INT_voidSendStartCond>
				}
				break;
			}
		}
	}
}
    1692:	27 96       	adiw	r28, 0x07	; 7
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <BCM_voidInit>:

void BCM_voidInit(){
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
	GIE_voidEnable();
    16ac:	0e 94 b4 14 	call	0x2968	; 0x2968 <GIE_voidEnable>
#if USART_PROTOCOL == BCM_ENABLE
	USART_voidEnableTXCInterrupt();
    16b0:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <USART_voidEnableTXCInterrupt>
	USART_voidTXCSetCallBack(USARTTransmissionDone);
    16b4:	8a e7       	ldi	r24, 0x7A	; 122
    16b6:	97 e0       	ldi	r25, 0x07	; 7
    16b8:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <USART_voidTXCSetCallBack>
	USART_voidInit();
    16bc:	0e 94 66 0c 	call	0x18cc	; 0x18cc <USART_voidInit>
#endif

#if SPI_PROTOCOL == BCM_ENABLE
	SPI_voidSetCallBack(SPITransmissionDone);
    16c0:	87 ec       	ldi	r24, 0xC7	; 199
    16c2:	97 e0       	ldi	r25, 0x07	; 7
    16c4:	0e 94 52 12 	call	0x24a4	; 0x24a4 <SPI_voidSetCallBack>
	SPI_voidMasterInit();
    16c8:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <SPI_voidMasterInit>
#endif

#if I2C_PROTOCOL == BCM_ENABLE
	I2C_voidSetCallBack(I2C_Callback);
    16cc:	81 e6       	ldi	r24, 0x61	; 97
    16ce:	98 e0       	ldi	r25, 0x08	; 8
    16d0:	0e 94 6f 14 	call	0x28de	; 0x28de <I2C_voidSetCallBack>
	I2C_Master_voidInit();
    16d4:	0e 94 af 12 	call	0x255e	; 0x255e <I2C_Master_voidInit>
#endif
}
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <BCM_voidAddToQueue>:

void BCM_voidAddToQueue(u8 data,BCM_COMM_Protocol protocol ,void(*Fun_PTR)(void), u8* SlaveAddress, u8* RegisterAddress, QUEUE_TYPE queueType){
    16de:	cf 92       	push	r12
    16e0:	df 92       	push	r13
    16e2:	ef 92       	push	r14
    16e4:	ff 92       	push	r15
    16e6:	0f 93       	push	r16
    16e8:	1f 93       	push	r17
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	68 97       	sbiw	r28, 0x18	; 24
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	8a 87       	std	Y+10, r24	; 0x0a
    1700:	6b 87       	std	Y+11, r22	; 0x0b
    1702:	5d 87       	std	Y+13, r21	; 0x0d
    1704:	4c 87       	std	Y+12, r20	; 0x0c
    1706:	3f 87       	std	Y+15, r19	; 0x0f
    1708:	2e 87       	std	Y+14, r18	; 0x0e
    170a:	19 8b       	std	Y+17, r17	; 0x11
    170c:	08 8b       	std	Y+16, r16	; 0x10
    170e:	ea 8a       	std	Y+18, r14	; 0x12
	BCM bcm = BCM_structLoadData(data, protocol, Fun_PTR, SlaveAddress, RegisterAddress, queueType);
    1710:	2c 85       	ldd	r18, Y+12	; 0x0c
    1712:	3d 85       	ldd	r19, Y+13	; 0x0d
    1714:	ee 85       	ldd	r30, Y+14	; 0x0e
    1716:	ff 85       	ldd	r31, Y+15	; 0x0f
    1718:	a8 89       	ldd	r26, Y+16	; 0x10
    171a:	b9 89       	ldd	r27, Y+17	; 0x11
    171c:	ce 01       	movw	r24, r28
    171e:	01 96       	adiw	r24, 0x01	; 1
    1720:	6a 85       	ldd	r22, Y+10	; 0x0a
    1722:	4b 85       	ldd	r20, Y+11	; 0x0b
    1724:	8f 01       	movw	r16, r30
    1726:	7d 01       	movw	r14, r26
    1728:	ca 88       	ldd	r12, Y+18	; 0x12
    172a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <BCM_structLoadData>
	if(queueType == GENERAL){
    172e:	8a 89       	ldd	r24, Y+18	; 0x12
    1730:	88 23       	and	r24, r24
    1732:	f1 f4       	brne	.+60     	; 0x1770 <BCM_voidAddToQueue+0x92>
		generalQueueIndex = generalQueueIndex > (MAX_GENERAL_QUEUE_SIZE - 1) ? 0 : generalQueueIndex;
    1734:	80 91 ca 01 	lds	r24, 0x01CA
    1738:	82 33       	cpi	r24, 0x32	; 50
    173a:	20 f4       	brcc	.+8      	; 0x1744 <BCM_voidAddToQueue+0x66>
    173c:	20 91 ca 01 	lds	r18, 0x01CA
    1740:	28 8f       	std	Y+24, r18	; 0x18
    1742:	01 c0       	rjmp	.+2      	; 0x1746 <BCM_voidAddToQueue+0x68>
    1744:	18 8e       	std	Y+24, r1	; 0x18
    1746:	38 8d       	ldd	r19, Y+24	; 0x18
    1748:	30 93 ca 01 	sts	0x01CA, r19
		BCM_voidAddProtocol(bcm, &generalQueueIndex, bcm_General_queue);
    174c:	ea ec       	ldi	r30, 0xCA	; 202
    174e:	f1 e0       	ldi	r31, 0x01	; 1
    1750:	a2 ed       	ldi	r26, 0xD2	; 210
    1752:	b1 e0       	ldi	r27, 0x01	; 1
    1754:	09 81       	ldd	r16, Y+1	; 0x01
    1756:	1a 81       	ldd	r17, Y+2	; 0x02
    1758:	2b 81       	ldd	r18, Y+3	; 0x03
    175a:	3c 81       	ldd	r19, Y+4	; 0x04
    175c:	4d 81       	ldd	r20, Y+5	; 0x05
    175e:	5e 81       	ldd	r21, Y+6	; 0x06
    1760:	6f 81       	ldd	r22, Y+7	; 0x07
    1762:	78 85       	ldd	r23, Y+8	; 0x08
    1764:	89 85       	ldd	r24, Y+9	; 0x09
    1766:	7f 01       	movw	r14, r30
    1768:	6d 01       	movw	r12, r26
    176a:	0e 94 df 09 	call	0x13be	; 0x13be <BCM_voidAddProtocol>
    176e:	6e c0       	rjmp	.+220    	; 0x184c <BCM_voidAddToQueue+0x16e>
	}
	else{
		switch(protocol){
    1770:	8b 85       	ldd	r24, Y+11	; 0x0b
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	3f 8b       	std	Y+23, r19	; 0x17
    1778:	2e 8b       	std	Y+22, r18	; 0x16
    177a:	8e 89       	ldd	r24, Y+22	; 0x16
    177c:	9f 89       	ldd	r25, Y+23	; 0x17
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	91 05       	cpc	r25, r1
    1782:	49 f1       	breq	.+82     	; 0x17d6 <BCM_voidAddToQueue+0xf8>
    1784:	2e 89       	ldd	r18, Y+22	; 0x16
    1786:	3f 89       	ldd	r19, Y+23	; 0x17
    1788:	22 30       	cpi	r18, 0x02	; 2
    178a:	31 05       	cpc	r19, r1
    178c:	09 f4       	brne	.+2      	; 0x1790 <BCM_voidAddToQueue+0xb2>
    178e:	41 c0       	rjmp	.+130    	; 0x1812 <BCM_voidAddToQueue+0x134>
    1790:	8e 89       	ldd	r24, Y+22	; 0x16
    1792:	9f 89       	ldd	r25, Y+23	; 0x17
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	09 f0       	breq	.+2      	; 0x179a <BCM_voidAddToQueue+0xbc>
    1798:	59 c0       	rjmp	.+178    	; 0x184c <BCM_voidAddToQueue+0x16e>
		case USART:
			USARTQueueIndex = USARTQueueIndex > (MAX_USART_QUEUE_SIZE - 1) ? 0 : USARTQueueIndex;
    179a:	80 91 cb 01 	lds	r24, 0x01CB
    179e:	84 31       	cpi	r24, 0x14	; 20
    17a0:	20 f4       	brcc	.+8      	; 0x17aa <BCM_voidAddToQueue+0xcc>
    17a2:	90 91 cb 01 	lds	r25, 0x01CB
    17a6:	9d 8b       	std	Y+21, r25	; 0x15
    17a8:	01 c0       	rjmp	.+2      	; 0x17ac <BCM_voidAddToQueue+0xce>
    17aa:	1d 8a       	std	Y+21, r1	; 0x15
    17ac:	2d 89       	ldd	r18, Y+21	; 0x15
    17ae:	20 93 cb 01 	sts	0x01CB, r18
			BCM_voidAddProtocol(bcm, &USARTQueueIndex, bcm_USART_queue);
    17b2:	eb ec       	ldi	r30, 0xCB	; 203
    17b4:	f1 e0       	ldi	r31, 0x01	; 1
    17b6:	a4 e9       	ldi	r26, 0x94	; 148
    17b8:	b3 e0       	ldi	r27, 0x03	; 3
    17ba:	09 81       	ldd	r16, Y+1	; 0x01
    17bc:	1a 81       	ldd	r17, Y+2	; 0x02
    17be:	2b 81       	ldd	r18, Y+3	; 0x03
    17c0:	3c 81       	ldd	r19, Y+4	; 0x04
    17c2:	4d 81       	ldd	r20, Y+5	; 0x05
    17c4:	5e 81       	ldd	r21, Y+6	; 0x06
    17c6:	6f 81       	ldd	r22, Y+7	; 0x07
    17c8:	78 85       	ldd	r23, Y+8	; 0x08
    17ca:	89 85       	ldd	r24, Y+9	; 0x09
    17cc:	7f 01       	movw	r14, r30
    17ce:	6d 01       	movw	r12, r26
    17d0:	0e 94 df 09 	call	0x13be	; 0x13be <BCM_voidAddProtocol>
    17d4:	3b c0       	rjmp	.+118    	; 0x184c <BCM_voidAddToQueue+0x16e>
			break;
		case SPI:
			SPIQueueIndex = SPIQueueIndex > (MAX_SPI_QUEUE_SIZE - 1) ? 0 : SPIQueueIndex;
    17d6:	80 91 cc 01 	lds	r24, 0x01CC
    17da:	84 31       	cpi	r24, 0x14	; 20
    17dc:	20 f4       	brcc	.+8      	; 0x17e6 <BCM_voidAddToQueue+0x108>
    17de:	30 91 cc 01 	lds	r19, 0x01CC
    17e2:	3c 8b       	std	Y+20, r19	; 0x14
    17e4:	01 c0       	rjmp	.+2      	; 0x17e8 <BCM_voidAddToQueue+0x10a>
    17e6:	1c 8a       	std	Y+20, r1	; 0x14
    17e8:	8c 89       	ldd	r24, Y+20	; 0x14
    17ea:	80 93 cc 01 	sts	0x01CC, r24
			BCM_voidAddProtocol(bcm, &SPIQueueIndex, bcm_SPI_queue);
    17ee:	ec ec       	ldi	r30, 0xCC	; 204
    17f0:	f1 e0       	ldi	r31, 0x01	; 1
    17f2:	a8 e4       	ldi	r26, 0x48	; 72
    17f4:	b4 e0       	ldi	r27, 0x04	; 4
    17f6:	09 81       	ldd	r16, Y+1	; 0x01
    17f8:	1a 81       	ldd	r17, Y+2	; 0x02
    17fa:	2b 81       	ldd	r18, Y+3	; 0x03
    17fc:	3c 81       	ldd	r19, Y+4	; 0x04
    17fe:	4d 81       	ldd	r20, Y+5	; 0x05
    1800:	5e 81       	ldd	r21, Y+6	; 0x06
    1802:	6f 81       	ldd	r22, Y+7	; 0x07
    1804:	78 85       	ldd	r23, Y+8	; 0x08
    1806:	89 85       	ldd	r24, Y+9	; 0x09
    1808:	7f 01       	movw	r14, r30
    180a:	6d 01       	movw	r12, r26
    180c:	0e 94 df 09 	call	0x13be	; 0x13be <BCM_voidAddProtocol>
    1810:	1d c0       	rjmp	.+58     	; 0x184c <BCM_voidAddToQueue+0x16e>
			break;
		case I2C:
			I2CQueueIndex = I2CQueueIndex > (MAX_I2C_QUEUE_SIZE - 1) ? 0 : I2CQueueIndex;
    1812:	80 91 cd 01 	lds	r24, 0x01CD
    1816:	84 31       	cpi	r24, 0x14	; 20
    1818:	20 f4       	brcc	.+8      	; 0x1822 <BCM_voidAddToQueue+0x144>
    181a:	90 91 cd 01 	lds	r25, 0x01CD
    181e:	9b 8b       	std	Y+19, r25	; 0x13
    1820:	01 c0       	rjmp	.+2      	; 0x1824 <BCM_voidAddToQueue+0x146>
    1822:	1b 8a       	std	Y+19, r1	; 0x13
    1824:	2b 89       	ldd	r18, Y+19	; 0x13
    1826:	20 93 cd 01 	sts	0x01CD, r18
			BCM_voidAddProtocol(bcm, &I2CQueueIndex, bcm_I2C_queue);
    182a:	ed ec       	ldi	r30, 0xCD	; 205
    182c:	f1 e0       	ldi	r31, 0x01	; 1
    182e:	ac ef       	ldi	r26, 0xFC	; 252
    1830:	b4 e0       	ldi	r27, 0x04	; 4
    1832:	09 81       	ldd	r16, Y+1	; 0x01
    1834:	1a 81       	ldd	r17, Y+2	; 0x02
    1836:	2b 81       	ldd	r18, Y+3	; 0x03
    1838:	3c 81       	ldd	r19, Y+4	; 0x04
    183a:	4d 81       	ldd	r20, Y+5	; 0x05
    183c:	5e 81       	ldd	r21, Y+6	; 0x06
    183e:	6f 81       	ldd	r22, Y+7	; 0x07
    1840:	78 85       	ldd	r23, Y+8	; 0x08
    1842:	89 85       	ldd	r24, Y+9	; 0x09
    1844:	7f 01       	movw	r14, r30
    1846:	6d 01       	movw	r12, r26
    1848:	0e 94 df 09 	call	0x13be	; 0x13be <BCM_voidAddProtocol>
			break;
		}
	}
	BCM_voidSendQueuedData();
    184c:	0e 94 37 0c 	call	0x186e	; 0x186e <BCM_voidSendQueuedData>
}
    1850:	68 96       	adiw	r28, 0x18	; 24
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	ff 90       	pop	r15
    1866:	ef 90       	pop	r14
    1868:	df 90       	pop	r13
    186a:	cf 90       	pop	r12
    186c:	08 95       	ret

0000186e <BCM_voidSendQueuedData>:

void BCM_voidSendQueuedData(){
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
	BCM_voidCheckAndStart(&generalQueueState, currentGeneralIndex, bcm_General_queue);
    1876:	40 91 ce 01 	lds	r20, 0x01CE
    187a:	88 e6       	ldi	r24, 0x68	; 104
    187c:	91 e0       	ldi	r25, 0x01	; 1
    187e:	22 ed       	ldi	r18, 0xD2	; 210
    1880:	31 e0       	ldi	r19, 0x01	; 1
    1882:	64 2f       	mov	r22, r20
    1884:	a9 01       	movw	r20, r18
    1886:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <BCM_voidCheckAndStart>
	BCM_voidCheckAndStart(&USARTQueueState, currentUSARTIndex, bcm_USART_queue);
    188a:	40 91 cf 01 	lds	r20, 0x01CF
    188e:	89 e6       	ldi	r24, 0x69	; 105
    1890:	91 e0       	ldi	r25, 0x01	; 1
    1892:	24 e9       	ldi	r18, 0x94	; 148
    1894:	33 e0       	ldi	r19, 0x03	; 3
    1896:	64 2f       	mov	r22, r20
    1898:	a9 01       	movw	r20, r18
    189a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <BCM_voidCheckAndStart>
	BCM_voidCheckAndStart(&SPIQueueState, currentSPIIndex, bcm_SPI_queue);
    189e:	40 91 d0 01 	lds	r20, 0x01D0
    18a2:	8a e6       	ldi	r24, 0x6A	; 106
    18a4:	91 e0       	ldi	r25, 0x01	; 1
    18a6:	28 e4       	ldi	r18, 0x48	; 72
    18a8:	34 e0       	ldi	r19, 0x04	; 4
    18aa:	64 2f       	mov	r22, r20
    18ac:	a9 01       	movw	r20, r18
    18ae:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <BCM_voidCheckAndStart>
	BCM_voidCheckAndStart(&I2CQueueState, currentI2CIndex, bcm_I2C_queue);
    18b2:	40 91 d1 01 	lds	r20, 0x01D1
    18b6:	8b e6       	ldi	r24, 0x6B	; 107
    18b8:	91 e0       	ldi	r25, 0x01	; 1
    18ba:	2c ef       	ldi	r18, 0xFC	; 252
    18bc:	34 e0       	ldi	r19, 0x04	; 4
    18be:	64 2f       	mov	r22, r20
    18c0:	a9 01       	movw	r20, r18
    18c2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <BCM_voidCheckAndStart>
}
    18c6:	cf 91       	pop	r28
    18c8:	df 91       	pop	r29
    18ca:	08 95       	ret

000018cc <USART_voidInit>:
static void (*Global_RXCCallBack)(void)= NULL;
static void (*Global_TXCCallBack)(void)= NULL;


void USART_voidInit()
{
    18cc:	df 93       	push	r29
    18ce:	cf 93       	push	r28
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
#if SPEED_OPERATION == USART_DOUBLE_SPEED_MODE
#define UBRR_VALUE (((f32)F_OSC/(8 * USART_BAUDRATE))-1)
	SET_BIT(UCSRA,UCSRA_U2X);    /* Configure UART double speed rate*/
    18d4:	ab e2       	ldi	r26, 0x2B	; 43
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	eb e2       	ldi	r30, 0x2B	; 43
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	82 60       	ori	r24, 0x02	; 2
    18e0:	8c 93       	st	X, r24
	 * UPM1:0 = 0 (Disable parity)
	 * USBS   = 0 (One bit stop bit)
	 * UCSZ1  = UCSZ0 = 1 (8-bit data size)
	 * UCPOL  = 0  (0 for Asynch. mode)
	 */
	SET_BIT(UCSRC, UCSRC_URSEL);
    18e2:	a0 e4       	ldi	r26, 0x40	; 64
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e0 e4       	ldi	r30, 0x40	; 64
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	80 68       	ori	r24, 0x80	; 128
    18ee:	8c 93       	st	X, r24

#if MODE_OF_OPERATION == USART_ASYNCHRONOUS
	CLR_BIT(UCSRC, UCSRC_UMSEL);
    18f0:	a0 e4       	ldi	r26, 0x40	; 64
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e0 e4       	ldi	r30, 0x40	; 64
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	8f 7b       	andi	r24, 0xBF	; 191
    18fc:	8c 93       	st	X, r24
	CLR_BIT(UCSRC, UCSRC_UCPOL);
    18fe:	a0 e4       	ldi	r26, 0x40	; 64
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e0 e4       	ldi	r30, 0x40	; 64
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	8e 7f       	andi	r24, 0xFE	; 254
    190a:	8c 93       	st	X, r24
#endif
#endif

#if FRAME_SIZE == 8
//	UCSRC |= (1<< UCSRC_URSEL| 1 << UCSRC_UCSZ0 | UCSRC, 1 << UCSRC_UCSZ1);
	SET_BIT(UCSRC, UCSRC_UCSZ0);
    190c:	a0 e4       	ldi	r26, 0x40	; 64
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e0 e4       	ldi	r30, 0x40	; 64
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	82 60       	ori	r24, 0x02	; 2
    1918:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSRC_UCSZ1);
    191a:	a0 e4       	ldi	r26, 0x40	; 64
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e0 e4       	ldi	r30, 0x40	; 64
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	84 60       	ori	r24, 0x04	; 4
    1926:	8c 93       	st	X, r24
#endif

#if PARITY_MODE == USART_PARITY_DISABLED
	CLR_BIT(UCSRC, UCSRC_UPM1);
    1928:	a0 e4       	ldi	r26, 0x40	; 64
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e0 e4       	ldi	r30, 0x40	; 64
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	8f 7d       	andi	r24, 0xDF	; 223
    1934:	8c 93       	st	X, r24
	CLR_BIT(UCSRC, UCSRC_UPM0);
    1936:	a0 e4       	ldi	r26, 0x40	; 64
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e0 e4       	ldi	r30, 0x40	; 64
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	8f 7e       	andi	r24, 0xEF	; 239
    1942:	8c 93       	st	X, r24
#endif

#if STOP_BIT_SELECT == USART_STOP_2BIT
	SET_BIT(UCSRC, UCSRC_USBS);
    1944:	a0 e4       	ldi	r26, 0x40	; 64
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e0 e4       	ldi	r30, 0x40	; 64
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	88 60       	ori	r24, 0x08	; 8
    1950:	8c 93       	st	X, r24
#elif STOP_BIT_SELECT == USART_STOP_1BIT
	CLR_BIT(UCSRC, UCSRC_USBS);
#endif

	/* Write data in UBRR*/
	CLR_BIT(UCSRC, UCSRC_URSEL);
    1952:	a0 e4       	ldi	r26, 0x40	; 64
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e0 e4       	ldi	r30, 0x40	; 64
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	8f 77       	andi	r24, 0x7F	; 127
    195e:	8c 93       	st	X, r24

	UCSRC = 0; // writing to UBRRH
    1960:	e0 e4       	ldi	r30, 0x40	; 64
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	10 82       	st	Z, r1
	UBRRL = UBRR_VALUE;
    1966:	e9 e2       	ldi	r30, 0x29	; 41
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	8f ec       	ldi	r24, 0xCF	; 207
    196c:	80 83       	st	Z, r24
	/* RXCIE = TXCIE = UDRIE = 0  (No interrupt Mode)
	 * RXEN = TXEN = 1 (Enable receive and transmit)
	 * UCSZ2 = 0 (8-bit data size)
	 * RXB8 & TXB8 not used
	 */
	SET_BIT(UCSRB, UCSRB_RXEN);
    196e:	aa e2       	ldi	r26, 0x2A	; 42
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ea e2       	ldi	r30, 0x2A	; 42
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	80 61       	ori	r24, 0x10	; 16
    197a:	8c 93       	st	X, r24
	SET_BIT(UCSRB, UCSRB_TXEN);
    197c:	aa e2       	ldi	r26, 0x2A	; 42
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	ea e2       	ldi	r30, 0x2A	; 42
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	88 60       	ori	r24, 0x08	; 8
    1988:	8c 93       	st	X, r24
}
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <USART_voidEnableUDREInterrupt>:


void USART_voidEnableUDREInterrupt(){
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,UCSRB_UDRIE);
    1998:	aa e2       	ldi	r26, 0x2A	; 42
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	ea e2       	ldi	r30, 0x2A	; 42
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	80 62       	ori	r24, 0x20	; 32
    19a4:	8c 93       	st	X, r24
}
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <USART_voidDisableUDREInterrupt>:

void USART_voidDisableUDREInterrupt(){
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,UCSRB_UDRIE);
    19b4:	aa e2       	ldi	r26, 0x2A	; 42
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	ea e2       	ldi	r30, 0x2A	; 42
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	8f 7d       	andi	r24, 0xDF	; 223
    19c0:	8c 93       	st	X, r24
}
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <USART_voidEnableRXCInterrupt>:

void USART_voidEnableRXCInterrupt(){
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,UCSRB_RXCIE);
    19d0:	aa e2       	ldi	r26, 0x2A	; 42
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	ea e2       	ldi	r30, 0x2A	; 42
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	80 68       	ori	r24, 0x80	; 128
    19dc:	8c 93       	st	X, r24
}
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	08 95       	ret

000019e4 <USART_voidDisableRXCInterrupt>:

void USART_voidDisableRXCInterrupt(){
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,UCSRB_RXCIE);
    19ec:	aa e2       	ldi	r26, 0x2A	; 42
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	ea e2       	ldi	r30, 0x2A	; 42
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	8f 77       	andi	r24, 0x7F	; 127
    19f8:	8c 93       	st	X, r24
}
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <USART_voidEnableTXCInterrupt>:

void USART_voidEnableTXCInterrupt(){
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,UCSRB_TXCIE);
    1a08:	aa e2       	ldi	r26, 0x2A	; 42
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	ea e2       	ldi	r30, 0x2A	; 42
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	80 64       	ori	r24, 0x40	; 64
    1a14:	8c 93       	st	X, r24
}
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <USART_voidDisableTXCInterrupt>:

void USART_voidDisableTXCInterrupt(){
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,UCSRB_TXCIE);
    1a24:	aa e2       	ldi	r26, 0x2A	; 42
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	ea e2       	ldi	r30, 0x2A	; 42
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	8f 7b       	andi	r24, 0xBF	; 191
    1a30:	8c 93       	st	X, r24
}
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <USART_voidSendByte>:

void USART_voidSendByte(const u8 data)
{
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	0f 92       	push	r0
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	89 83       	std	Y+1, r24	; 0x01
	/*UDRE is 1 once UDR register is empty*/
	while(!GET_BIT(UCSRA,UCSRA_UDRE));
    1a44:	eb e2       	ldi	r30, 0x2B	; 43
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	82 95       	swap	r24
    1a4c:	86 95       	lsr	r24
    1a4e:	87 70       	andi	r24, 0x07	; 7
    1a50:	88 2f       	mov	r24, r24
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	81 70       	andi	r24, 0x01	; 1
    1a56:	90 70       	andi	r25, 0x00	; 0
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	a1 f3       	breq	.-24     	; 0x1a44 <USART_voidSendByte+0xc>
	/*Once polling finished (UDR is empty) load ur new data in the UDR register*/
	UDR = data;
    1a5c:	ec e2       	ldi	r30, 0x2C	; 44
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	80 83       	st	Z, r24
}
    1a64:	0f 90       	pop	r0
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <USART_voidSendInterruptByte>:

void USART_voidSendInterruptByte(const u8 data){
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	0f 92       	push	r0
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
    1a78:	ec e2       	ldi	r30, 0x2C	; 44
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	80 83       	st	Z, r24
}
    1a80:	0f 90       	pop	r0
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <USART_u8ReceiveInterruptByte>:

u8 USART_u8ReceiveInterruptByte(){
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    1a90:	ec e2       	ldi	r30, 0x2C	; 44
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
}
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <USART_u8ReceiveByte>:

u8 USART_u8ReceiveByte()
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(UCSRA, UCSRA_RXC));
    1aa4:	eb e2       	ldi	r30, 0x2B	; 43
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	88 23       	and	r24, r24
    1aac:	dc f7       	brge	.-10     	; 0x1aa4 <USART_u8ReceiveByte+0x8>
	return UDR;
    1aae:	ec e2       	ldi	r30, 0x2C	; 44
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
}
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <USART_voidSendString>:

void USART_voidSendString(const u8* str)
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <USART_voidSendString+0x6>
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	9a 83       	std	Y+2, r25	; 0x02
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	0a c0       	rjmp	.+20     	; 0x1ade <USART_voidSendString+0x24>
	while(*str != '\0')
	{
		USART_voidSendByte(*str);
    1aca:	e9 81       	ldd	r30, Y+1	; 0x01
    1acc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ace:	80 81       	ld	r24, Z
    1ad0:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <USART_voidSendByte>
		str++;
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad8:	01 96       	adiw	r24, 0x01	; 1
    1ada:	9a 83       	std	Y+2, r25	; 0x02
    1adc:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void USART_voidSendString(const u8* str)
{
	while(*str != '\0')
    1ade:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae2:	80 81       	ld	r24, Z
    1ae4:	88 23       	and	r24, r24
    1ae6:	89 f7       	brne	.-30     	; 0x1aca <USART_voidSendString+0x10>
	{
		USART_voidSendByte(*str);
		str++;
	}
}
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <USART_voidReceiveString>:

void USART_voidReceiveString(u8* str)
{
    1af2:	0f 93       	push	r16
    1af4:	1f 93       	push	r17
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <USART_voidReceiveString+0xa>
    1afc:	0f 92       	push	r0
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	9b 83       	std	Y+3, r25	; 0x03
    1b04:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1b06:	19 82       	std	Y+1, r1	; 0x01
    1b08:	0f c0       	rjmp	.+30     	; 0x1b28 <USART_voidReceiveString+0x36>
	while(str[i] != '\0')
	{
		str[i++] = USART_u8ReceiveByte();
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	9b 81       	ldd	r25, Y+3	; 0x03
    1b14:	8c 01       	movw	r16, r24
    1b16:	02 0f       	add	r16, r18
    1b18:	13 1f       	adc	r17, r19
    1b1a:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <USART_u8ReceiveByte>
    1b1e:	f8 01       	movw	r30, r16
    1b20:	80 83       	st	Z, r24
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	8f 5f       	subi	r24, 0xFF	; 255
    1b26:	89 83       	std	Y+1, r24	; 0x01
}

void USART_voidReceiveString(u8* str)
{
	u8 i = 0;
	while(str[i] != '\0')
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	9b 81       	ldd	r25, Y+3	; 0x03
    1b32:	fc 01       	movw	r30, r24
    1b34:	e2 0f       	add	r30, r18
    1b36:	f3 1f       	adc	r31, r19
    1b38:	80 81       	ld	r24, Z
    1b3a:	88 23       	and	r24, r24
    1b3c:	31 f7       	brne	.-52     	; 0x1b0a <USART_voidReceiveString+0x18>
	{
		str[i++] = USART_u8ReceiveByte();
	}
	str[i]= '\0';
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	9b 81       	ldd	r25, Y+3	; 0x03
    1b48:	fc 01       	movw	r30, r24
    1b4a:	e2 0f       	add	r30, r18
    1b4c:	f3 1f       	adc	r31, r19
    1b4e:	10 82       	st	Z, r1
}
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	1f 91       	pop	r17
    1b5c:	0f 91       	pop	r16
    1b5e:	08 95       	ret

00001b60 <USART_voidRXCSetCallBack>:

void USART_voidRXCSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <USART_voidRXCSetCallBack+0x6>
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	9a 83       	std	Y+2, r25	; 0x02
    1b6c:	89 83       	std	Y+1, r24	; 0x01
	Global_RXCCallBack = Copy_pvCallBackFunc;
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	9a 81       	ldd	r25, Y+2	; 0x02
    1b72:	90 93 b3 05 	sts	0x05B3, r25
    1b76:	80 93 b2 05 	sts	0x05B2, r24
}
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <USART_voidTXCSetCallBack>:

void USART_voidTXCSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <USART_voidTXCSetCallBack+0x6>
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
    1b8e:	9a 83       	std	Y+2, r25	; 0x02
    1b90:	89 83       	std	Y+1, r24	; 0x01
	Global_TXCCallBack = Copy_pvCallBackFunc;
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	9a 81       	ldd	r25, Y+2	; 0x02
    1b96:	90 93 b5 05 	sts	0x05B5, r25
    1b9a:	80 93 b4 05 	sts	0x05B4, r24
}
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	08 95       	ret

00001ba8 <USART_voidUDRESetCallBack>:

void USART_voidUDRESetCallBack(void (*Copy_pvCallBackFunc)(void)){
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	00 d0       	rcall	.+0      	; 0x1bae <USART_voidUDRESetCallBack+0x6>
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	9a 83       	std	Y+2, r25	; 0x02
    1bb4:	89 83       	std	Y+1, r24	; 0x01
	Global_UDRECallBack = Copy_pvCallBackFunc;
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bba:	90 93 b1 05 	sts	0x05B1, r25
    1bbe:	80 93 b0 05 	sts	0x05B0, r24
}
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <__vector_13>:

void  __vector_13 (void)	__attribute__((signal));
void  __vector_13 (void)
{
    1bcc:	1f 92       	push	r1
    1bce:	0f 92       	push	r0
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	0f 92       	push	r0
    1bd4:	11 24       	eor	r1, r1
    1bd6:	2f 93       	push	r18
    1bd8:	3f 93       	push	r19
    1bda:	4f 93       	push	r20
    1bdc:	5f 93       	push	r21
    1bde:	6f 93       	push	r22
    1be0:	7f 93       	push	r23
    1be2:	8f 93       	push	r24
    1be4:	9f 93       	push	r25
    1be6:	af 93       	push	r26
    1be8:	bf 93       	push	r27
    1bea:	ef 93       	push	r30
    1bec:	ff 93       	push	r31
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
	if(Global_RXCCallBack != NULL)
    1bf6:	80 91 b2 05 	lds	r24, 0x05B2
    1bfa:	90 91 b3 05 	lds	r25, 0x05B3
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	29 f0       	breq	.+10     	; 0x1c0c <__vector_13+0x40>
	{
		Global_RXCCallBack();
    1c02:	e0 91 b2 05 	lds	r30, 0x05B2
    1c06:	f0 91 b3 05 	lds	r31, 0x05B3
    1c0a:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	ff 91       	pop	r31
    1c12:	ef 91       	pop	r30
    1c14:	bf 91       	pop	r27
    1c16:	af 91       	pop	r26
    1c18:	9f 91       	pop	r25
    1c1a:	8f 91       	pop	r24
    1c1c:	7f 91       	pop	r23
    1c1e:	6f 91       	pop	r22
    1c20:	5f 91       	pop	r21
    1c22:	4f 91       	pop	r20
    1c24:	3f 91       	pop	r19
    1c26:	2f 91       	pop	r18
    1c28:	0f 90       	pop	r0
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	0f 90       	pop	r0
    1c2e:	1f 90       	pop	r1
    1c30:	18 95       	reti

00001c32 <__vector_14>:

void  __vector_14 (void)	__attribute__((signal));
void  __vector_14 (void)
{
    1c32:	1f 92       	push	r1
    1c34:	0f 92       	push	r0
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	0f 92       	push	r0
    1c3a:	11 24       	eor	r1, r1
    1c3c:	2f 93       	push	r18
    1c3e:	3f 93       	push	r19
    1c40:	4f 93       	push	r20
    1c42:	5f 93       	push	r21
    1c44:	6f 93       	push	r22
    1c46:	7f 93       	push	r23
    1c48:	8f 93       	push	r24
    1c4a:	9f 93       	push	r25
    1c4c:	af 93       	push	r26
    1c4e:	bf 93       	push	r27
    1c50:	ef 93       	push	r30
    1c52:	ff 93       	push	r31
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
	if(Global_UDRECallBack != NULL)
    1c5c:	80 91 b0 05 	lds	r24, 0x05B0
    1c60:	90 91 b1 05 	lds	r25, 0x05B1
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	29 f0       	breq	.+10     	; 0x1c72 <__vector_14+0x40>
	{
		Global_UDRECallBack();
    1c68:	e0 91 b0 05 	lds	r30, 0x05B0
    1c6c:	f0 91 b1 05 	lds	r31, 0x05B1
    1c70:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	ff 91       	pop	r31
    1c78:	ef 91       	pop	r30
    1c7a:	bf 91       	pop	r27
    1c7c:	af 91       	pop	r26
    1c7e:	9f 91       	pop	r25
    1c80:	8f 91       	pop	r24
    1c82:	7f 91       	pop	r23
    1c84:	6f 91       	pop	r22
    1c86:	5f 91       	pop	r21
    1c88:	4f 91       	pop	r20
    1c8a:	3f 91       	pop	r19
    1c8c:	2f 91       	pop	r18
    1c8e:	0f 90       	pop	r0
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	0f 90       	pop	r0
    1c94:	1f 90       	pop	r1
    1c96:	18 95       	reti

00001c98 <__vector_15>:

void  __vector_15 (void)	__attribute__((signal));
void  __vector_15 (void)
{
    1c98:	1f 92       	push	r1
    1c9a:	0f 92       	push	r0
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	0f 92       	push	r0
    1ca0:	11 24       	eor	r1, r1
    1ca2:	2f 93       	push	r18
    1ca4:	3f 93       	push	r19
    1ca6:	4f 93       	push	r20
    1ca8:	5f 93       	push	r21
    1caa:	6f 93       	push	r22
    1cac:	7f 93       	push	r23
    1cae:	8f 93       	push	r24
    1cb0:	9f 93       	push	r25
    1cb2:	af 93       	push	r26
    1cb4:	bf 93       	push	r27
    1cb6:	ef 93       	push	r30
    1cb8:	ff 93       	push	r31
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
	if(Global_TXCCallBack != NULL)
    1cc2:	80 91 b4 05 	lds	r24, 0x05B4
    1cc6:	90 91 b5 05 	lds	r25, 0x05B5
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	29 f0       	breq	.+10     	; 0x1cd8 <__vector_15+0x40>
	{
		Global_TXCCallBack();
    1cce:	e0 91 b4 05 	lds	r30, 0x05B4
    1cd2:	f0 91 b5 05 	lds	r31, 0x05B5
    1cd6:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	ff 91       	pop	r31
    1cde:	ef 91       	pop	r30
    1ce0:	bf 91       	pop	r27
    1ce2:	af 91       	pop	r26
    1ce4:	9f 91       	pop	r25
    1ce6:	8f 91       	pop	r24
    1ce8:	7f 91       	pop	r23
    1cea:	6f 91       	pop	r22
    1cec:	5f 91       	pop	r21
    1cee:	4f 91       	pop	r20
    1cf0:	3f 91       	pop	r19
    1cf2:	2f 91       	pop	r18
    1cf4:	0f 90       	pop	r0
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	0f 90       	pop	r0
    1cfa:	1f 90       	pop	r1
    1cfc:	18 95       	reti

00001cfe <TMR2_voidInit>:

/*Define Pointer to TIMER2 ISR functions*/
static void (*Global_pvTimerOverFlowCallBack)(void)= NULL;
static void (*Global_pvTimerCTCCallBack)(void)= NULL;

void TMR2_voidInit(){
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
#if       TIMER2_Mode == TIMER2_Normal
	/*Choose Normal Mode*/
	CLR_BIT(TCCR2, TCCR2_WGM20);
    1d06:	a5 e4       	ldi	r26, 0x45	; 69
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e5 e4       	ldi	r30, 0x45	; 69
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	8f 7b       	andi	r24, 0xBF	; 191
    1d12:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, TCCR2_WGM21);
    1d14:	a5 e4       	ldi	r26, 0x45	; 69
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e5 e4       	ldi	r30, 0x45	; 69
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	87 7f       	andi	r24, 0xF7	; 247
    1d20:	8c 93       	st	X, r24

	/*Timer Over flow flag Enable*/
	SET_BIT(TIMSK, TIMSK_TOIE2);
    1d22:	a9 e5       	ldi	r26, 0x59	; 89
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e9 e5       	ldi	r30, 0x59	; 89
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	80 64       	ori	r24, 0x40	; 64
    1d2e:	8c 93       	st	X, r24

	/*Set PRESCALAR 64*/
	SET_BIT(TCCR2, TCCR2_CS22);
    1d30:	a5 e4       	ldi	r26, 0x45	; 69
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e5 e4       	ldi	r30, 0x45	; 69
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	84 60       	ori	r24, 0x04	; 4
    1d3c:	8c 93       	st	X, r24
	SET_BIT(TCCR2, TCCR2_CS21);
    1d3e:	a5 e4       	ldi	r26, 0x45	; 69
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e5 e4       	ldi	r30, 0x45	; 69
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	82 60       	ori	r24, 0x02	; 2
    1d4a:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, TCCR2_CS22);
    1d4c:	a5 e4       	ldi	r26, 0x45	; 69
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e5 e4       	ldi	r30, 0x45	; 69
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	8b 7f       	andi	r24, 0xFB	; 251
    1d58:	8c 93       	st	X, r24
	/*Set PRESCALAR 1*/
	SET_BIT(TCCR2, TCCR2_CS22);
	CLR_BIT(TCCR2, TCCR2_CS21);
	CLR_BIT(TCCR2, TCCR2_CS22);
#endif
}
    1d5a:	cf 91       	pop	r28
    1d5c:	df 91       	pop	r29
    1d5e:	08 95       	ret

00001d60 <TMR2_voidSetDuty>:

void TMR2_voidSetDuty(u8 Copy_u8DutyCycle){
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	0f 92       	push	r0
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8DutyCycle;               /*Sets OCR2 value*/
    1d6c:	e3 e4       	ldi	r30, 0x43	; 67
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	80 83       	st	Z, r24
}
    1d74:	0f 90       	pop	r0
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <TMR2_voidTimer2CTCSetCallBack>:

void TMR2_voidTimer2CTCSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <TMR2_voidTimer2CTCSetCallBack+0x6>
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	9a 83       	std	Y+2, r25	; 0x02
    1d88:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerCTCCallBack = Copy_pvCallBackFunc;
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8e:	90 93 b9 05 	sts	0x05B9, r25
    1d92:	80 93 b8 05 	sts	0x05B8, r24
}
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <TMR2_voidTimer2OVSetCallBack>:

void TMR2_voidTimer2OVSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <TMR2_voidTimer2OVSetCallBack+0x6>
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	9a 83       	std	Y+2, r25	; 0x02
    1dac:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerOverFlowCallBack = Copy_pvCallBackFunc;
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	9a 81       	ldd	r25, Y+2	; 0x02
    1db2:	90 93 b7 05 	sts	0x05B7, r25
    1db6:	80 93 b6 05 	sts	0x05B6, r24
}
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	cf 91       	pop	r28
    1dc0:	df 91       	pop	r29
    1dc2:	08 95       	ret

00001dc4 <TMR2_voidSetBusyWait>:

void TMR2_voidSetBusyWait(u16 Copy_u8WaitTime){
    1dc4:	df 93       	push	r29
    1dc6:	cf 93       	push	r28
    1dc8:	00 d0       	rcall	.+0      	; 0x1dca <TMR2_voidSetBusyWait+0x6>
    1dca:	00 d0       	rcall	.+0      	; 0x1dcc <TMR2_voidSetBusyWait+0x8>
    1dcc:	0f 92       	push	r0
    1dce:	cd b7       	in	r28, 0x3d	; 61
    1dd0:	de b7       	in	r29, 0x3e	; 62
    1dd2:	9d 83       	std	Y+5, r25	; 0x05
    1dd4:	8c 83       	std	Y+4, r24	; 0x04
	u16 Local_u8Counter = 2;
    1dd6:	82 e0       	ldi	r24, 0x02	; 2
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9b 83       	std	Y+3, r25	; 0x03
    1ddc:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter = 2;
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	89 83       	std	Y+1, r24	; 0x01
    1de2:	1e c0       	rjmp	.+60     	; 0x1e20 <TMR2_voidSetBusyWait+0x5c>
	while(Local_u8Counter != Copy_u8WaitTime){
		if(GET_BIT(TIFR,TIFR_OCF2)){
    1de4:	e8 e5       	ldi	r30, 0x58	; 88
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	86 95       	lsr	r24
    1dec:	88 2f       	mov	r24, r24
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	81 70       	andi	r24, 0x01	; 1
    1df2:	90 70       	andi	r25, 0x00	; 0
    1df4:	88 23       	and	r24, r24
    1df6:	51 f0       	breq	.+20     	; 0x1e0c <TMR2_voidSetBusyWait+0x48>
			counter++;
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	8f 5f       	subi	r24, 0xFF	; 255
    1dfc:	89 83       	std	Y+1, r24	; 0x01
			SET_BIT(TIFR,TIFR_OCF2);
    1dfe:	a8 e5       	ldi	r26, 0x58	; 88
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e8 e5       	ldi	r30, 0x58	; 88
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	82 60       	ori	r24, 0x02	; 2
    1e0a:	8c 93       	st	X, r24
		}
		if(counter == 4){
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	84 30       	cpi	r24, 0x04	; 4
    1e10:	39 f4       	brne	.+14     	; 0x1e20 <TMR2_voidSetBusyWait+0x5c>
			Local_u8Counter++;
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	9b 81       	ldd	r25, Y+3	; 0x03
    1e16:	01 96       	adiw	r24, 0x01	; 1
    1e18:	9b 83       	std	Y+3, r25	; 0x03
    1e1a:	8a 83       	std	Y+2, r24	; 0x02
			counter = 2;
    1e1c:	82 e0       	ldi	r24, 0x02	; 2
    1e1e:	89 83       	std	Y+1, r24	; 0x01
}

void TMR2_voidSetBusyWait(u16 Copy_u8WaitTime){
	u16 Local_u8Counter = 2;
	u8 counter = 2;
	while(Local_u8Counter != Copy_u8WaitTime){
    1e20:	2a 81       	ldd	r18, Y+2	; 0x02
    1e22:	3b 81       	ldd	r19, Y+3	; 0x03
    1e24:	8c 81       	ldd	r24, Y+4	; 0x04
    1e26:	9d 81       	ldd	r25, Y+5	; 0x05
    1e28:	28 17       	cp	r18, r24
    1e2a:	39 07       	cpc	r19, r25
    1e2c:	d9 f6       	brne	.-74     	; 0x1de4 <TMR2_voidSetBusyWait+0x20>
		if(counter == 4){
			Local_u8Counter++;
			counter = 2;
		}
	}
}
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <TMR2_u8GetTCNT>:

u8 TMR2_u8GetTCNT(){
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
	return TCNT2;
    1e46:	e4 e4       	ldi	r30, 0x44	; 68
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
}
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <TMR2_voidSetTCNT>:

void TMR2_voidSetTCNT(u8 value){
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	0f 92       	push	r0
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = value;
    1e5e:	e4 e4       	ldi	r30, 0x44	; 68
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	80 83       	st	Z, r24
}
    1e66:	0f 90       	pop	r0
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <__vector_5>:

//TIMER OVERFLOW ISR
void  __vector_5 (void)	__attribute__((signal));
void  __vector_5 (void)
{
    1e6e:	1f 92       	push	r1
    1e70:	0f 92       	push	r0
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	0f 92       	push	r0
    1e76:	11 24       	eor	r1, r1
    1e78:	2f 93       	push	r18
    1e7a:	3f 93       	push	r19
    1e7c:	4f 93       	push	r20
    1e7e:	5f 93       	push	r21
    1e80:	6f 93       	push	r22
    1e82:	7f 93       	push	r23
    1e84:	8f 93       	push	r24
    1e86:	9f 93       	push	r25
    1e88:	af 93       	push	r26
    1e8a:	bf 93       	push	r27
    1e8c:	ef 93       	push	r30
    1e8e:	ff 93       	push	r31
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerOverFlowCallBack != NULL)
    1e98:	80 91 b6 05 	lds	r24, 0x05B6
    1e9c:	90 91 b7 05 	lds	r25, 0x05B7
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	29 f0       	breq	.+10     	; 0x1eae <__vector_5+0x40>
	{
		Global_pvTimerOverFlowCallBack();
    1ea4:	e0 91 b6 05 	lds	r30, 0x05B6
    1ea8:	f0 91 b7 05 	lds	r31, 0x05B7
    1eac:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	ff 91       	pop	r31
    1eb4:	ef 91       	pop	r30
    1eb6:	bf 91       	pop	r27
    1eb8:	af 91       	pop	r26
    1eba:	9f 91       	pop	r25
    1ebc:	8f 91       	pop	r24
    1ebe:	7f 91       	pop	r23
    1ec0:	6f 91       	pop	r22
    1ec2:	5f 91       	pop	r21
    1ec4:	4f 91       	pop	r20
    1ec6:	3f 91       	pop	r19
    1ec8:	2f 91       	pop	r18
    1eca:	0f 90       	pop	r0
    1ecc:	0f be       	out	0x3f, r0	; 63
    1ece:	0f 90       	pop	r0
    1ed0:	1f 90       	pop	r1
    1ed2:	18 95       	reti

00001ed4 <__vector_4>:

//ON COMPARE ISR
void  __vector_4 (void)	__attribute__((signal));
void  __vector_4 (void)
{
    1ed4:	1f 92       	push	r1
    1ed6:	0f 92       	push	r0
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	0f 92       	push	r0
    1edc:	11 24       	eor	r1, r1
    1ede:	2f 93       	push	r18
    1ee0:	3f 93       	push	r19
    1ee2:	4f 93       	push	r20
    1ee4:	5f 93       	push	r21
    1ee6:	6f 93       	push	r22
    1ee8:	7f 93       	push	r23
    1eea:	8f 93       	push	r24
    1eec:	9f 93       	push	r25
    1eee:	af 93       	push	r26
    1ef0:	bf 93       	push	r27
    1ef2:	ef 93       	push	r30
    1ef4:	ff 93       	push	r31
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerCTCCallBack != NULL)
    1efe:	80 91 b8 05 	lds	r24, 0x05B8
    1f02:	90 91 b9 05 	lds	r25, 0x05B9
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	29 f0       	breq	.+10     	; 0x1f14 <__vector_4+0x40>
	{
		Global_pvTimerCTCCallBack();
    1f0a:	e0 91 b8 05 	lds	r30, 0x05B8
    1f0e:	f0 91 b9 05 	lds	r31, 0x05B9
    1f12:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	ff 91       	pop	r31
    1f1a:	ef 91       	pop	r30
    1f1c:	bf 91       	pop	r27
    1f1e:	af 91       	pop	r26
    1f20:	9f 91       	pop	r25
    1f22:	8f 91       	pop	r24
    1f24:	7f 91       	pop	r23
    1f26:	6f 91       	pop	r22
    1f28:	5f 91       	pop	r21
    1f2a:	4f 91       	pop	r20
    1f2c:	3f 91       	pop	r19
    1f2e:	2f 91       	pop	r18
    1f30:	0f 90       	pop	r0
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	0f 90       	pop	r0
    1f36:	1f 90       	pop	r1
    1f38:	18 95       	reti

00001f3a <TMR1_voidInit>:
#include"../../../Library/Bit_Math.h"
#include "../Header/TMR1_Interface.h"

static void (*Global_pvTimerICUCallBack)(void)= NULL;

void TMR1_voidInit(){
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
	//Configure TIMER1
	TCCR1A = 0;
    1f42:	ef e4       	ldi	r30, 0x4F	; 79
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	10 82       	st	Z, r1
	TCCR1B = 0;
    1f48:	ee e4       	ldi	r30, 0x4E	; 78
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	10 82       	st	Z, r1
#endif
#endif

#elif TIMER1_Mode == TIMER1_ICU
#if TIMER1_DefaultEdge == TIMER1_RISING
	SET_BIT(TCCR1B,TCCR1B_ICES);
    1f4e:	ae e4       	ldi	r26, 0x4E	; 78
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	ee e4       	ldi	r30, 0x4E	; 78
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	80 64       	ori	r24, 0x40	; 64
    1f5a:	8c 93       	st	X, r24
#endif

#if TIMER1_NoiseOption == TIMER1_ACTIVENOISECANCELLER
	SET_BIT(TCCR1B,TCCR1B_ICNC1);
#elif TIMER1_NoiseOption == TIMER1_NONOISECANCELLER
	CLR_BIT(TCCR1B,TCCR1B_ICNC1);
    1f5c:	ae e4       	ldi	r26, 0x4E	; 78
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	ee e4       	ldi	r30, 0x4E	; 78
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	8f 77       	andi	r24, 0x7F	; 127
    1f68:	8c 93       	st	X, r24
#endif

	TCNT1 = 0; /*init timer1 counter 0*/
    1f6a:	ec e4       	ldi	r30, 0x4C	; 76
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	11 82       	std	Z+1, r1	; 0x01
    1f70:	10 82       	st	Z, r1
	ICR1 = 0;  /*init Input Capture register counter 0*/
    1f72:	e6 e4       	ldi	r30, 0x46	; 70
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	11 82       	std	Z+1, r1	; 0x01
    1f78:	10 82       	st	Z, r1

	/* Enable ICU Interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1f7a:	a9 e5       	ldi	r26, 0x59	; 89
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e9 e5       	ldi	r30, 0x59	; 89
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	80 62       	ori	r24, 0x20	; 32
    1f86:	8c 93       	st	X, r24
#endif
	SET_BIT(TCCR1B,TCCR1B_CS10);
    1f88:	ae e4       	ldi	r26, 0x4E	; 78
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	ee e4       	ldi	r30, 0x4E	; 78
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	81 60       	ori	r24, 0x01	; 1
    1f94:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS11);
    1f96:	ae e4       	ldi	r26, 0x4E	; 78
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	ee e4       	ldi	r30, 0x4E	; 78
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	8d 7f       	andi	r24, 0xFD	; 253
    1fa2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS12);
    1fa4:	ae e4       	ldi	r26, 0x4E	; 78
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	ee e4       	ldi	r30, 0x4E	; 78
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	84 60       	ori	r24, 0x04	; 4
    1fb0:	8c 93       	st	X, r24
}
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <TMR1_voidSetICR>:

void TMR1_voidSetICR(u16 value){
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <TMR1_voidSetICR+0x6>
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	9a 83       	std	Y+2, r25	; 0x02
    1fc4:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = value;
    1fc6:	e6 e4       	ldi	r30, 0x46	; 70
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	80 83       	st	Z, r24
}
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	08 95       	ret

00001fdc <TMR1_voidSetTimerValue>:

void TMR1_voidSetTimerValue(u16 value){
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	00 d0       	rcall	.+0      	; 0x1fe2 <TMR1_voidSetTimerValue+0x6>
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	9a 83       	std	Y+2, r25	; 0x02
    1fe8:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = value;
    1fea:	ec e4       	ldi	r30, 0x4C	; 76
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff2:	91 83       	std	Z+1, r25	; 0x01
    1ff4:	80 83       	st	Z, r24
}
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <TMR1_u16ReadTimerValue>:
u16 TMR1_u16ReadTimerValue(){
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    2008:	ec e4       	ldi	r30, 0x4C	; 76
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	91 81       	ldd	r25, Z+1	; 0x01
}
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <TMR1_voidSetDutyCycle>:

void TMR1_voidSetDutyCycle(u16 duty){
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	00 d0       	rcall	.+0      	; 0x201c <TMR1_voidSetDutyCycle+0x6>
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = duty;
    2024:	ea e4       	ldi	r30, 0x4A	; 74
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	9a 81       	ldd	r25, Y+2	; 0x02
    202c:	91 83       	std	Z+1, r25	; 0x01
    202e:	80 83       	st	Z, r24
}
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <TMR1_ICUsetEdgeDetectionMode>:

void TMR1_ICUsetEdgeDetectionMode(u8 edge)
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	0f 92       	push	r0
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	89 83       	std	Y+1, r24	; 0x01
	if(edge == TIMER1_RISING){
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	81 30       	cpi	r24, 0x01	; 1
    204a:	41 f4       	brne	.+16     	; 0x205c <TMR1_ICUsetEdgeDetectionMode+0x22>
		SET_BIT(TCCR1B,TCCR1B_ICES);
    204c:	ae e4       	ldi	r26, 0x4E	; 78
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	ee e4       	ldi	r30, 0x4E	; 78
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	80 64       	ori	r24, 0x40	; 64
    2058:	8c 93       	st	X, r24
    205a:	0a c0       	rjmp	.+20     	; 0x2070 <TMR1_ICUsetEdgeDetectionMode+0x36>
	}
	else if(edge == TIMER1_FALLING){
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	88 23       	and	r24, r24
    2060:	39 f4       	brne	.+14     	; 0x2070 <TMR1_ICUsetEdgeDetectionMode+0x36>
		CLR_BIT(TCCR1B,TCCR1B_ICES);
    2062:	ae e4       	ldi	r26, 0x4E	; 78
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	ee e4       	ldi	r30, 0x4E	; 78
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	8f 7b       	andi	r24, 0xBF	; 191
    206e:	8c 93       	st	X, r24
	}
}
    2070:	0f 90       	pop	r0
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <TMR1_ICUgetInputCaptureValue>:

u16 TMR1_ICUgetInputCaptureValue()
{
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2080:	e6 e4       	ldi	r30, 0x46	; 70
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	91 81       	ldd	r25, Z+1	; 0x01
}
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <TMR1_ICUclearTimerValue>:

void TMR1_ICUclearTimerValue()
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    2096:	ec e4       	ldi	r30, 0x4C	; 76
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	11 82       	std	Z+1, r1	; 0x01
    209c:	10 82       	st	Z, r1
}
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	08 95       	ret

000020a4 <TMR1_ICUDeInit>:

void TMR1_ICUDeInit()
{
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    20ac:	ef e4       	ldi	r30, 0x4F	; 79
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	10 82       	st	Z, r1
	TCCR1B = 0;
    20b2:	ee e4       	ldi	r30, 0x4E	; 78
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	10 82       	st	Z, r1
	TCNT1  = 0;
    20b8:	ec e4       	ldi	r30, 0x4C	; 76
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	11 82       	std	Z+1, r1	; 0x01
    20be:	10 82       	st	Z, r1
	ICR1   = 0;
    20c0:	e6 e4       	ldi	r30, 0x46	; 70
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	11 82       	std	Z+1, r1	; 0x01
    20c6:	10 82       	st	Z, r1

	/* Disable the interrupt */
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    20c8:	a9 e5       	ldi	r26, 0x59	; 89
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e9 e5       	ldi	r30, 0x59	; 89
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	8f 7d       	andi	r24, 0xDF	; 223
    20d4:	8c 93       	st	X, r24
}
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <TMR1_voidTimer1ICUSetCallBack>:

void TMR1_voidTimer1ICUSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <TMR1_voidTimer1ICUSetCallBack+0x6>
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	9a 83       	std	Y+2, r25	; 0x02
    20e8:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerICUCallBack = Copy_pvCallBackFunc;
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	9a 81       	ldd	r25, Y+2	; 0x02
    20ee:	90 93 bb 05 	sts	0x05BB, r25
    20f2:	80 93 ba 05 	sts	0x05BA, r24
}
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    2100:	1f 92       	push	r1
    2102:	0f 92       	push	r0
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	0f 92       	push	r0
    2108:	11 24       	eor	r1, r1
    210a:	2f 93       	push	r18
    210c:	3f 93       	push	r19
    210e:	4f 93       	push	r20
    2110:	5f 93       	push	r21
    2112:	6f 93       	push	r22
    2114:	7f 93       	push	r23
    2116:	8f 93       	push	r24
    2118:	9f 93       	push	r25
    211a:	af 93       	push	r26
    211c:	bf 93       	push	r27
    211e:	ef 93       	push	r30
    2120:	ff 93       	push	r31
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerICUCallBack != NULL){
    212a:	80 91 ba 05 	lds	r24, 0x05BA
    212e:	90 91 bb 05 	lds	r25, 0x05BB
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	29 f0       	breq	.+10     	; 0x2140 <__vector_6+0x40>
		Global_pvTimerICUCallBack();
    2136:	e0 91 ba 05 	lds	r30, 0x05BA
    213a:	f0 91 bb 05 	lds	r31, 0x05BB
    213e:	09 95       	icall
	}
}
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	ff 91       	pop	r31
    2146:	ef 91       	pop	r30
    2148:	bf 91       	pop	r27
    214a:	af 91       	pop	r26
    214c:	9f 91       	pop	r25
    214e:	8f 91       	pop	r24
    2150:	7f 91       	pop	r23
    2152:	6f 91       	pop	r22
    2154:	5f 91       	pop	r21
    2156:	4f 91       	pop	r20
    2158:	3f 91       	pop	r19
    215a:	2f 91       	pop	r18
    215c:	0f 90       	pop	r0
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	0f 90       	pop	r0
    2162:	1f 90       	pop	r1
    2164:	18 95       	reti

00002166 <TMR0_voidInit>:

/*Define Pointer to TIMER0 ISR functions*/
static void (*Global_pvTimerOverFlowCallBack)(void)= NULL;
static void (*Global_pvTimerCTCCallBack)(void)= NULL;

void TMR0_voidInit(){
    2166:	df 93       	push	r29
    2168:	cf 93       	push	r28
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, TCCR0_CS00);
	CLR_BIT(TCCR0, TCCR0_CS01);
	SET_BIT(TCCR0, TCCR0_CS02);

#elif TIMER0_Mode == TIMER0_DELAY
	CLR_BIT(TCCR0, TCCR0_WGM00);
    216e:	a3 e5       	ldi	r26, 0x53	; 83
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e3 e5       	ldi	r30, 0x53	; 83
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	8f 7b       	andi	r24, 0xBF	; 191
    217a:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_WGM01);
    217c:	a3 e5       	ldi	r26, 0x53	; 83
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e3 e5       	ldi	r30, 0x53	; 83
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	88 60       	ori	r24, 0x08	; 8
    2188:	8c 93       	st	X, r24

	/*OUTPUT COMPARE MATCH INTERRUPT ENABLE*/
	SET_BIT(TIFR,TIFR_OCF0);
    218a:	a8 e5       	ldi	r26, 0x58	; 88
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	e8 e5       	ldi	r30, 0x58	; 88
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	82 60       	ori	r24, 0x02	; 2
    2196:	8c 93       	st	X, r24
	/*Set compare match value to 249*/
	OCR0=249;
    2198:	ec e5       	ldi	r30, 0x5C	; 92
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	89 ef       	ldi	r24, 0xF9	; 249
    219e:	80 83       	st	Z, r24

	/*Set PRESCALAR 64*/
	SET_BIT(TCCR0, TCCR0_CS00);
    21a0:	a3 e5       	ldi	r26, 0x53	; 83
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e3 e5       	ldi	r30, 0x53	; 83
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	81 60       	ori	r24, 0x01	; 1
    21ac:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_CS01);
    21ae:	a3 e5       	ldi	r26, 0x53	; 83
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	e3 e5       	ldi	r30, 0x53	; 83
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	82 60       	ori	r24, 0x02	; 2
    21ba:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, TCCR0_CS02);
    21bc:	a3 e5       	ldi	r26, 0x53	; 83
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	e3 e5       	ldi	r30, 0x53	; 83
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	8b 7f       	andi	r24, 0xFB	; 251
    21c8:	8c 93       	st	X, r24
	/*Set PRESCALAR Falling*/
	CLR_BIT(TCCR0, TCCR0_CS00);
	SET_BIT(TCCR0, TCCR0_CS01);
	SET_BIT(TCCR0, TCCR0_CS02);
#endif
}
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <TMR0_voidSetDuty>:

void TMR0_voidSetDuty(u8 Copy_u8DutyCycle){
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	0f 92       	push	r0
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8DutyCycle;               /*Sets OCR0 value*/
    21dc:	ec e5       	ldi	r30, 0x5C	; 92
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	80 83       	st	Z, r24
}
    21e4:	0f 90       	pop	r0
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <TMR0_voidTimer0CTCSetCallBack>:

void TMR0_voidTimer0CTCSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <TMR0_voidTimer0CTCSetCallBack+0x6>
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	9a 83       	std	Y+2, r25	; 0x02
    21f8:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerCTCCallBack = Copy_pvCallBackFunc;
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	9a 81       	ldd	r25, Y+2	; 0x02
    21fe:	90 93 bf 05 	sts	0x05BF, r25
    2202:	80 93 be 05 	sts	0x05BE, r24
}
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <TMR0_voidTimer0OVSetCallBack>:

void TMR0_voidTimer0OVSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	00 d0       	rcall	.+0      	; 0x2216 <TMR0_voidTimer0OVSetCallBack+0x6>
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	9a 83       	std	Y+2, r25	; 0x02
    221c:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerOverFlowCallBack = Copy_pvCallBackFunc;
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	9a 81       	ldd	r25, Y+2	; 0x02
    2222:	90 93 bd 05 	sts	0x05BD, r25
    2226:	80 93 bc 05 	sts	0x05BC, r24
}
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <TMR0_voidSetBusyWait>:

void TMR0_voidSetBusyWait(u32 Copy_u8WaitTimeinMS){
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	00 d0       	rcall	.+0      	; 0x223a <TMR0_voidSetBusyWait+0x6>
    223a:	00 d0       	rcall	.+0      	; 0x223c <TMR0_voidSetBusyWait+0x8>
    223c:	00 d0       	rcall	.+0      	; 0x223e <TMR0_voidSetBusyWait+0xa>
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	6b 83       	std	Y+3, r22	; 0x03
    2244:	7c 83       	std	Y+4, r23	; 0x04
    2246:	8d 83       	std	Y+5, r24	; 0x05
    2248:	9e 83       	std	Y+6, r25	; 0x06
	u16 counter = 0;
    224a:	1a 82       	std	Y+2, r1	; 0x02
    224c:	19 82       	std	Y+1, r1	; 0x01
    224e:	16 c0       	rjmp	.+44     	; 0x227c <TMR0_voidSetBusyWait+0x48>
	while(counter < Copy_u8WaitTimeinMS){
		if(GET_BIT(TIFR,TIFR_OCF0)){
    2250:	e8 e5       	ldi	r30, 0x58	; 88
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	86 95       	lsr	r24
    2258:	88 2f       	mov	r24, r24
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	81 70       	andi	r24, 0x01	; 1
    225e:	90 70       	andi	r25, 0x00	; 0
    2260:	88 23       	and	r24, r24
    2262:	61 f0       	breq	.+24     	; 0x227c <TMR0_voidSetBusyWait+0x48>
			counter++; //each increment is 1ms
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	9a 81       	ldd	r25, Y+2	; 0x02
    2268:	01 96       	adiw	r24, 0x01	; 1
    226a:	9a 83       	std	Y+2, r25	; 0x02
    226c:	89 83       	std	Y+1, r24	; 0x01
			SET_BIT(TIFR,TIFR_OCF0);
    226e:	a8 e5       	ldi	r26, 0x58	; 88
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	e8 e5       	ldi	r30, 0x58	; 88
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	82 60       	ori	r24, 0x02	; 2
    227a:	8c 93       	st	X, r24
	Global_pvTimerOverFlowCallBack = Copy_pvCallBackFunc;
}

void TMR0_voidSetBusyWait(u32 Copy_u8WaitTimeinMS){
	u16 counter = 0;
	while(counter < Copy_u8WaitTimeinMS){
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	9a 81       	ldd	r25, Y+2	; 0x02
    2280:	9c 01       	movw	r18, r24
    2282:	40 e0       	ldi	r20, 0x00	; 0
    2284:	50 e0       	ldi	r21, 0x00	; 0
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	9c 81       	ldd	r25, Y+4	; 0x04
    228a:	ad 81       	ldd	r26, Y+5	; 0x05
    228c:	be 81       	ldd	r27, Y+6	; 0x06
    228e:	28 17       	cp	r18, r24
    2290:	39 07       	cpc	r19, r25
    2292:	4a 07       	cpc	r20, r26
    2294:	5b 07       	cpc	r21, r27
    2296:	e0 f2       	brcs	.-72     	; 0x2250 <TMR0_voidSetBusyWait+0x1c>
		if(GET_BIT(TIFR,TIFR_OCF0)){
			counter++; //each increment is 1ms
			SET_BIT(TIFR,TIFR_OCF0);
		}
	}
}
    2298:	26 96       	adiw	r28, 0x06	; 6
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <TMR0_u8GetTCNT>:

u8 TMR0_u8GetTCNT(){
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    22b2:	e2 e5       	ldi	r30, 0x52	; 82
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
}
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	08 95       	ret

000022be <TMR0_voidSetTCNT>:

void TMR0_voidSetTCNT(u8 value){
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	0f 92       	push	r0
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = value;
    22ca:	e2 e5       	ldi	r30, 0x52	; 82
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	80 83       	st	Z, r24
}
    22d2:	0f 90       	pop	r0
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <__vector_11>:

//TIMER OVERFLOW ISR
void  __vector_11 (void)	__attribute__((signal));
void  __vector_11 (void)
{
    22da:	1f 92       	push	r1
    22dc:	0f 92       	push	r0
    22de:	0f b6       	in	r0, 0x3f	; 63
    22e0:	0f 92       	push	r0
    22e2:	11 24       	eor	r1, r1
    22e4:	2f 93       	push	r18
    22e6:	3f 93       	push	r19
    22e8:	4f 93       	push	r20
    22ea:	5f 93       	push	r21
    22ec:	6f 93       	push	r22
    22ee:	7f 93       	push	r23
    22f0:	8f 93       	push	r24
    22f2:	9f 93       	push	r25
    22f4:	af 93       	push	r26
    22f6:	bf 93       	push	r27
    22f8:	ef 93       	push	r30
    22fa:	ff 93       	push	r31
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerOverFlowCallBack != NULL)
    2304:	80 91 bc 05 	lds	r24, 0x05BC
    2308:	90 91 bd 05 	lds	r25, 0x05BD
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	29 f0       	breq	.+10     	; 0x231a <__vector_11+0x40>
	{
		Global_pvTimerOverFlowCallBack();
    2310:	e0 91 bc 05 	lds	r30, 0x05BC
    2314:	f0 91 bd 05 	lds	r31, 0x05BD
    2318:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    231a:	cf 91       	pop	r28
    231c:	df 91       	pop	r29
    231e:	ff 91       	pop	r31
    2320:	ef 91       	pop	r30
    2322:	bf 91       	pop	r27
    2324:	af 91       	pop	r26
    2326:	9f 91       	pop	r25
    2328:	8f 91       	pop	r24
    232a:	7f 91       	pop	r23
    232c:	6f 91       	pop	r22
    232e:	5f 91       	pop	r21
    2330:	4f 91       	pop	r20
    2332:	3f 91       	pop	r19
    2334:	2f 91       	pop	r18
    2336:	0f 90       	pop	r0
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	0f 90       	pop	r0
    233c:	1f 90       	pop	r1
    233e:	18 95       	reti

00002340 <__vector_10>:

//ON COMPARE ISR
void  __vector_10 (void)	__attribute__((signal));
void  __vector_10 (void)
{
    2340:	1f 92       	push	r1
    2342:	0f 92       	push	r0
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	0f 92       	push	r0
    2348:	11 24       	eor	r1, r1
    234a:	2f 93       	push	r18
    234c:	3f 93       	push	r19
    234e:	4f 93       	push	r20
    2350:	5f 93       	push	r21
    2352:	6f 93       	push	r22
    2354:	7f 93       	push	r23
    2356:	8f 93       	push	r24
    2358:	9f 93       	push	r25
    235a:	af 93       	push	r26
    235c:	bf 93       	push	r27
    235e:	ef 93       	push	r30
    2360:	ff 93       	push	r31
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerCTCCallBack != NULL)
    236a:	80 91 be 05 	lds	r24, 0x05BE
    236e:	90 91 bf 05 	lds	r25, 0x05BF
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	29 f0       	breq	.+10     	; 0x2380 <__vector_10+0x40>
	{
		Global_pvTimerCTCCallBack();
    2376:	e0 91 be 05 	lds	r30, 0x05BE
    237a:	f0 91 bf 05 	lds	r31, 0x05BF
    237e:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	ff 91       	pop	r31
    2386:	ef 91       	pop	r30
    2388:	bf 91       	pop	r27
    238a:	af 91       	pop	r26
    238c:	9f 91       	pop	r25
    238e:	8f 91       	pop	r24
    2390:	7f 91       	pop	r23
    2392:	6f 91       	pop	r22
    2394:	5f 91       	pop	r21
    2396:	4f 91       	pop	r20
    2398:	3f 91       	pop	r19
    239a:	2f 91       	pop	r18
    239c:	0f 90       	pop	r0
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	0f 90       	pop	r0
    23a2:	1f 90       	pop	r1
    23a4:	18 95       	reti

000023a6 <SPI_voidMasterInit>:
#include "../../../Library/Bit_Math.h"
#include "../Header/SPI_Interface.h"

static void (*Global_pvSPICallBack)(void)= NULL;

void SPI_voidMasterInit(void){
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,SPCR_MSTR);
    23ae:	ad e2       	ldi	r26, 0x2D	; 45
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	ed e2       	ldi	r30, 0x2D	; 45
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	80 61       	ori	r24, 0x10	; 16
    23ba:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_SPE);
    23bc:	ad e2       	ldi	r26, 0x2D	; 45
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	ed e2       	ldi	r30, 0x2D	; 45
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	80 64       	ori	r24, 0x40	; 64
    23c8:	8c 93       	st	X, r24
#if INTERRUPT_MODE == ENABLE_INTERRUPT
	SET_BIT(SPCR,SPCR_SPIE);
    23ca:	ad e2       	ldi	r26, 0x2D	; 45
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	ed e2       	ldi	r30, 0x2D	; 45
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	80 68       	ori	r24, 0x80	; 128
    23d6:	8c 93       	st	X, r24
#endif

#if CLOCK_POLARITY == IDLE_LOW
	CLR_BIT(SPCR,SPCR_CPOL);
    23d8:	ad e2       	ldi	r26, 0x2D	; 45
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	ed e2       	ldi	r30, 0x2D	; 45
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	87 7f       	andi	r24, 0xF7	; 247
    23e4:	8c 93       	st	X, r24
#elif CLOCK_POLARITY == IDLE_HIGH
	SET_BIT(SPCR,SPCR_CPOL);
#endif

#if CLOCK_PHASE == SPI_ZERO
	CLR_BIT(SPCR,SPCR_CPHA);
    23e6:	ad e2       	ldi	r26, 0x2D	; 45
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	ed e2       	ldi	r30, 0x2D	; 45
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	8b 7f       	andi	r24, 0xFB	; 251
    23f2:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_CPHA);
#endif


#if DATA_ORDER == LSB_FIRST
	SET_BIT(SPCR,SPCR_DORD);
    23f4:	ad e2       	ldi	r26, 0x2D	; 45
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	ed e2       	ldi	r30, 0x2D	; 45
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	80 62       	ori	r24, 0x20	; 32
    2400:	8c 93       	st	X, r24
#elif DATA_ORDER == MSB_FIRST
	CLR_BIT(SPCR,SPCR_DORD);
#endif

#if SPI_FREQUENCY == QUARTER_FREQ
	CLR_BIT(SPSR,SPSR_SPI2X);
    2402:	ae e2       	ldi	r26, 0x2E	; 46
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	ee e2       	ldi	r30, 0x2E	; 46
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	8e 7f       	andi	r24, 0xFE	; 254
    240e:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_SPR0);
    2410:	ad e2       	ldi	r26, 0x2D	; 45
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	ed e2       	ldi	r30, 0x2D	; 45
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	8e 7f       	andi	r24, 0xFE	; 254
    241c:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_SPR1);
    241e:	ad e2       	ldi	r26, 0x2D	; 45
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	ed e2       	ldi	r30, 0x2D	; 45
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	8d 7f       	andi	r24, 0xFD	; 253
    242a:	8c 93       	st	X, r24
#elif SPI_FREQUENCY == HALF_FREQ
	SET_BIT(SPSR,SPSR_SPI2X);
	CLR_BIT(SPCR,SPCR_SPR0);
	CLR_BIT(SPCR,SPCR_SPR1);
#endif
}
    242c:	cf 91       	pop	r28
    242e:	df 91       	pop	r29
    2430:	08 95       	ret

00002432 <SPI_voidSlaveInit>:

void SPI_voidSlaveInit(void){
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR,SPCR_MSTR);
    243a:	ad e2       	ldi	r26, 0x2D	; 45
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	ed e2       	ldi	r30, 0x2D	; 45
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	8f 7e       	andi	r24, 0xEF	; 239
    2446:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_SPE);
    2448:	ad e2       	ldi	r26, 0x2D	; 45
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	ed e2       	ldi	r30, 0x2D	; 45
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	80 64       	ori	r24, 0x40	; 64
    2454:	8c 93       	st	X, r24
#if INTERRUPT_MODE == ENABLE_INTERRUPT
	SET_BIT(SPCR,SPCR_SPIE);
    2456:	ad e2       	ldi	r26, 0x2D	; 45
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	ed e2       	ldi	r30, 0x2D	; 45
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	80 68       	ori	r24, 0x80	; 128
    2462:	8c 93       	st	X, r24
#endif

#if DATA_ORDER == LSB_FIRST
	SET_BIT(SPCR,SPCR_DORD);
    2464:	ad e2       	ldi	r26, 0x2D	; 45
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	ed e2       	ldi	r30, 0x2D	; 45
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	80 62       	ori	r24, 0x20	; 32
    2470:	8c 93       	st	X, r24
#elif DATA_ORDER == MSB_FIRST
	CLR_BIT(SPCR,SPCR_DORD);
#endif
}
    2472:	cf 91       	pop	r28
    2474:	df 91       	pop	r29
    2476:	08 95       	ret

00002478 <SPI_u8Transfer>:

u8 SPI_u8Transfer(u8 Copy_Data){
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	0f 92       	push	r0
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPDR = Copy_Data;
    2484:	ef e2       	ldi	r30, 0x2F	; 47
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	80 83       	st	Z, r24
	/* Wait for transmission complete */
	while(!GET_BIT(SPSR,SPSR_SPIF));
    248c:	ee e2       	ldi	r30, 0x2E	; 46
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	88 23       	and	r24, r24
    2494:	dc f7       	brge	.-10     	; 0x248c <SPI_u8Transfer+0x14>

	return SPDR;
    2496:	ef e2       	ldi	r30, 0x2F	; 47
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
}
    249c:	0f 90       	pop	r0
    249e:	cf 91       	pop	r28
    24a0:	df 91       	pop	r29
    24a2:	08 95       	ret

000024a4 <SPI_voidSetCallBack>:

void SPI_voidSetCallBack( void (*PtrToFunc) (void) ){
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	00 d0       	rcall	.+0      	; 0x24aa <SPI_voidSetCallBack+0x6>
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	9a 83       	std	Y+2, r25	; 0x02
    24b0:	89 83       	std	Y+1, r24	; 0x01
	Global_pvSPICallBack = PtrToFunc;
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	9a 81       	ldd	r25, Y+2	; 0x02
    24b6:	90 93 c1 05 	sts	0x05C1, r25
    24ba:	80 93 c0 05 	sts	0x05C0, r24
}
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	cf 91       	pop	r28
    24c4:	df 91       	pop	r29
    24c6:	08 95       	ret

000024c8 <SPI_u8ReadDataISR>:

u8 SPI_u8ReadDataISR(void){
    24c8:	df 93       	push	r29
    24ca:	cf 93       	push	r28
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
	return SPDR;
    24d0:	ef e2       	ldi	r30, 0x2F	; 47
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
}
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	08 95       	ret

000024dc <SPI_voidSendDataISR>:

void SPI_voidSendDataISR(u8 Copy_Data){
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	0f 92       	push	r0
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_Data;
    24e8:	ef e2       	ldi	r30, 0x2F	; 47
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	80 83       	st	Z, r24
}
    24f0:	0f 90       	pop	r0
    24f2:	cf 91       	pop	r28
    24f4:	df 91       	pop	r29
    24f6:	08 95       	ret

000024f8 <__vector_12>:

void  __vector_12 (void)	__attribute__((signal));
void  __vector_12 (void)
{
    24f8:	1f 92       	push	r1
    24fa:	0f 92       	push	r0
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	0f 92       	push	r0
    2500:	11 24       	eor	r1, r1
    2502:	2f 93       	push	r18
    2504:	3f 93       	push	r19
    2506:	4f 93       	push	r20
    2508:	5f 93       	push	r21
    250a:	6f 93       	push	r22
    250c:	7f 93       	push	r23
    250e:	8f 93       	push	r24
    2510:	9f 93       	push	r25
    2512:	af 93       	push	r26
    2514:	bf 93       	push	r27
    2516:	ef 93       	push	r30
    2518:	ff 93       	push	r31
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvSPICallBack != NULL)
    2522:	80 91 c0 05 	lds	r24, 0x05C0
    2526:	90 91 c1 05 	lds	r25, 0x05C1
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	29 f0       	breq	.+10     	; 0x2538 <__vector_12+0x40>
	{
		Global_pvSPICallBack();
    252e:	e0 91 c0 05 	lds	r30, 0x05C0
    2532:	f0 91 c1 05 	lds	r31, 0x05C1
    2536:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	ff 91       	pop	r31
    253e:	ef 91       	pop	r30
    2540:	bf 91       	pop	r27
    2542:	af 91       	pop	r26
    2544:	9f 91       	pop	r25
    2546:	8f 91       	pop	r24
    2548:	7f 91       	pop	r23
    254a:	6f 91       	pop	r22
    254c:	5f 91       	pop	r21
    254e:	4f 91       	pop	r20
    2550:	3f 91       	pop	r19
    2552:	2f 91       	pop	r18
    2554:	0f 90       	pop	r0
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	0f 90       	pop	r0
    255a:	1f 90       	pop	r1
    255c:	18 95       	reti

0000255e <I2C_Master_voidInit>:
#include "../Header/I2C_Interface.h"


static void (*Global_pvI2CCallBack)(void)= NULL;

void I2C_Master_voidInit(void){
    255e:	df 93       	push	r29
    2560:	cf 93       	push	r28
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
#if I2C_PRESCALER == I2C_PRESCALER_1
	/*Set Prescaler Values*/
	CLR_BIT(TWSR, TWSR_TWPS0);
    2566:	a1 e2       	ldi	r26, 0x21	; 33
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e1 e2       	ldi	r30, 0x21	; 33
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	8e 7f       	andi	r24, 0xFE	; 254
    2572:	8c 93       	st	X, r24
	CLR_BIT(TWSR, TWSR_TWPS1);
    2574:	a1 e2       	ldi	r26, 0x21	; 33
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	e1 e2       	ldi	r30, 0x21	; 33
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	8d 7f       	andi	r24, 0xFD	; 253
    2580:	8c 93       	st	X, r24
	SET_BIT(TWSR, TWSR_TWPS0);
	SET_BIT(TWSR, TWSR_TWPS1);
#endif

	/*Set TWBR with the Value =>100KHZ*/
	TWBR = I2C_TWBR_VALUE;
    2582:	e0 e2       	ldi	r30, 0x20	; 32
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	88 e4       	ldi	r24, 0x48	; 72
    2588:	80 83       	st	Z, r24

	/*Enable  I2C*/
	SET_BIT(TWCR,TWCR_TWEN);
    258a:	a6 e5       	ldi	r26, 0x56	; 86
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	e6 e5       	ldi	r30, 0x56	; 86
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	84 60       	ori	r24, 0x04	; 4
    2596:	8c 93       	st	X, r24
}
    2598:	cf 91       	pop	r28
    259a:	df 91       	pop	r29
    259c:	08 95       	ret

0000259e <I2C_Slave_voidInit>:

void I2C_Slave_voidInit(u8 I2C_Address){
    259e:	df 93       	push	r29
    25a0:	cf 93       	push	r28
    25a2:	0f 92       	push	r0
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
    25a8:	89 83       	std	Y+1, r24	; 0x01
	/*Set Slave Address iN TWAR*/
	TWAR = I2C_Address;
    25aa:	e2 e2       	ldi	r30, 0x22	; 34
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	80 83       	st	Z, r24

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	Set_Bit(TWCR,TWCR_TWEA);
    25b2:	a6 e5       	ldi	r26, 0x56	; 86
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e6 e5       	ldi	r30, 0x56	; 86
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	80 64       	ori	r24, 0x40	; 64
    25be:	8c 93       	st	X, r24
#elif I2C_ACK_MODE == ACK_DISABLE
	/*Disable  ACK*/
	Clear_Bit(TWCR,TWCR_TWEA);
#endif
	/*Enable I2C*/
	SET_BIT(TWCR, TWCR_TWEN);
    25c0:	a6 e5       	ldi	r26, 0x56	; 86
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e6 e5       	ldi	r30, 0x56	; 86
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	84 60       	ori	r24, 0x04	; 4
    25cc:	8c 93       	st	X, r24
}
    25ce:	0f 90       	pop	r0
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <I2C_Master_enuSendStartCond>:

I2C_Error_State I2C_Master_enuSendStartCond(void){
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	0f 92       	push	r0
    25dc:	cd b7       	in	r28, 0x3d	; 61
    25de:	de b7       	in	r29, 0x3e	; 62
	I2C_Error_State state = NoError;
    25e0:	19 82       	std	Y+1, r1	; 0x01

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    25e2:	e6 e5       	ldi	r30, 0x56	; 86
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	84 ee       	ldi	r24, 0xE4	; 228
    25e8:	80 83       	st	Z, r24
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    25ea:	e6 e5       	ldi	r30, 0x56	; 86
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	88 23       	and	r24, r24
    25f2:	dc f7       	brge	.-10     	; 0x25ea <I2C_Master_enuSendStartCond+0x14>

	/*Check Status*/
	if((TWSR & 0xF8) != I2C_MTXCheckStart){
    25f4:	e1 e2       	ldi	r30, 0x21	; 33
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	88 2f       	mov	r24, r24
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	88 7f       	andi	r24, 0xF8	; 248
    2600:	90 70       	andi	r25, 0x00	; 0
    2602:	88 30       	cpi	r24, 0x08	; 8
    2604:	91 05       	cpc	r25, r1
    2606:	11 f0       	breq	.+4      	; 0x260c <I2C_Master_enuSendStartCond+0x36>
		state = ErrorStartCondition;
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    260c:	89 81       	ldd	r24, Y+1	; 0x01
}
    260e:	0f 90       	pop	r0
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <I2C_Master_enuSendRepeatedStartCond>:

I2C_Error_State I2C_Master_enuSendRepeatedStartCond(void){
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	0f 92       	push	r0
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
	I2C_Error_State state = NoError;
    2620:	19 82       	std	Y+1, r1	; 0x01

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    2622:	e6 e5       	ldi	r30, 0x56	; 86
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	84 ee       	ldi	r24, 0xE4	; 228
    2628:	80 83       	st	Z, r24
#elif I2C_ACK_MODE == ACK_DISABLE
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif
	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    262a:	e6 e5       	ldi	r30, 0x56	; 86
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	88 23       	and	r24, r24
    2632:	dc f7       	brge	.-10     	; 0x262a <I2C_Master_enuSendRepeatedStartCond+0x14>

	/*Check Status*/
	if((TWSR & 0xF8) != I2C_MTXCheckReStart){
    2634:	e1 e2       	ldi	r30, 0x21	; 33
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	88 2f       	mov	r24, r24
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	88 7f       	andi	r24, 0xF8	; 248
    2640:	90 70       	andi	r25, 0x00	; 0
    2642:	80 31       	cpi	r24, 0x10	; 16
    2644:	91 05       	cpc	r25, r1
    2646:	11 f0       	breq	.+4      	; 0x264c <I2C_Master_enuSendRepeatedStartCond+0x36>
		state = ErrorRestartCondition;
    2648:	82 e0       	ldi	r24, 0x02	; 2
    264a:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    264c:	89 81       	ldd	r24, Y+1	; 0x01
}
    264e:	0f 90       	pop	r0
    2650:	cf 91       	pop	r28
    2652:	df 91       	pop	r29
    2654:	08 95       	ret

00002656 <I2C_Master_enuSendSlaveAddressWithRead>:


I2C_Error_State I2C_Master_enuSendSlaveAddressWithRead(u8 I2C_Address){
    2656:	df 93       	push	r29
    2658:	cf 93       	push	r28
    265a:	00 d0       	rcall	.+0      	; 0x265c <I2C_Master_enuSendSlaveAddressWithRead+0x6>
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Error_State state = NoError;
    2662:	19 82       	std	Y+1, r1	; 0x01

	/*Load the slave address*/
	TWDR = I2C_Address;
    2664:	e3 e2       	ldi	r30, 0x23	; 35
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	80 83       	st	Z, r24
	/*Select the read mode*/
	SET_BIT(TWDR, 0);
    266c:	a3 e2       	ldi	r26, 0x23	; 35
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	e3 e2       	ldi	r30, 0x23	; 35
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	81 60       	ori	r24, 0x01	; 1
    2678:	8c 93       	st	X, r24

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    267a:	e6 e5       	ldi	r30, 0x56	; 86
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	84 ec       	ldi	r24, 0xC4	; 196
    2680:	80 83       	st	Z, r24
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    2682:	e6 e5       	ldi	r30, 0x56	; 86
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	88 23       	and	r24, r24
    268a:	dc f7       	brge	.-10     	; 0x2682 <I2C_Master_enuSendSlaveAddressWithRead+0x2c>

	/*Check Status*/
#if I2C_ACK_MODE == ACK_ENABLE
	if((TWSR & 0xF8) != I2C_MRXCheckSLA_R_WithAck){
    268c:	e1 e2       	ldi	r30, 0x21	; 33
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	88 2f       	mov	r24, r24
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	88 7f       	andi	r24, 0xF8	; 248
    2698:	90 70       	andi	r25, 0x00	; 0
    269a:	80 34       	cpi	r24, 0x40	; 64
    269c:	91 05       	cpc	r25, r1
    269e:	11 f0       	breq	.+4      	; 0x26a4 <I2C_Master_enuSendSlaveAddressWithRead+0x4e>
		state = ErrorSlaveAddressReadWithAck;
    26a0:	85 e0       	ldi	r24, 0x05	; 5
    26a2:	89 83       	std	Y+1, r24	; 0x01
#elif  I2C_ACK_MODE == ACK_DISABLE
	if((TWSR & 0xF8) != I2C_MRXCheckSLA_R_WithOutAck){
		state = ErrorSlaveAddressReadWithoutAck;
	}
#endif
	return state;
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	cf 91       	pop	r28
    26ac:	df 91       	pop	r29
    26ae:	08 95       	ret

000026b0 <I2C_Master_enuSendSlaveAddressWithWrite>:

I2C_Error_State I2C_Master_enuSendSlaveAddressWithWrite(u8 I2C_Address){
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	00 d0       	rcall	.+0      	; 0x26b6 <I2C_Master_enuSendSlaveAddressWithWrite+0x6>
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Error_State state = NoError;
    26bc:	19 82       	std	Y+1, r1	; 0x01
	/*Load the slave address*/
	TWDR = I2C_Address;
    26be:	e3 e2       	ldi	r30, 0x23	; 35
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	8a 81       	ldd	r24, Y+2	; 0x02
    26c4:	80 83       	st	Z, r24

	/*Select the write mode*/
	CLR_BIT(TWDR, 0);
    26c6:	a3 e2       	ldi	r26, 0x23	; 35
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e3 e2       	ldi	r30, 0x23	; 35
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 81       	ld	r24, Z
    26d0:	8e 7f       	andi	r24, 0xFE	; 254
    26d2:	8c 93       	st	X, r24

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    26d4:	e6 e5       	ldi	r30, 0x56	; 86
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	84 ec       	ldi	r24, 0xC4	; 196
    26da:	80 83       	st	Z, r24
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    26dc:	e6 e5       	ldi	r30, 0x56	; 86
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	88 23       	and	r24, r24
    26e4:	dc f7       	brge	.-10     	; 0x26dc <I2C_Master_enuSendSlaveAddressWithWrite+0x2c>

	/*Check Status*/
#if I2C_ACK_MODE == ACK_ENABLE
	if((TWSR & 0xF8) != I2C_MTXCheckSLA_W_WithAck){
    26e6:	e1 e2       	ldi	r30, 0x21	; 33
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	88 2f       	mov	r24, r24
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	88 7f       	andi	r24, 0xF8	; 248
    26f2:	90 70       	andi	r25, 0x00	; 0
    26f4:	88 31       	cpi	r24, 0x18	; 24
    26f6:	91 05       	cpc	r25, r1
    26f8:	11 f0       	breq	.+4      	; 0x26fe <I2C_Master_enuSendSlaveAddressWithWrite+0x4e>
		state = ErrorSlaveAddressWriteWithAck;
    26fa:	83 e0       	ldi	r24, 0x03	; 3
    26fc:	89 83       	std	Y+1, r24	; 0x01
#elif  I2C_ACK_MODE == ACK_DISABLE
	if((TWSR & 0xF8) != I2C_MTXCheckSLA_W_WithOutAck){
		state = ErrorSlaveAddressWriteWithoutAck;
	}
#endif
	return state;
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	cf 91       	pop	r28
    2706:	df 91       	pop	r29
    2708:	08 95       	ret

0000270a <I2C_Master_enuSendu8Data>:


I2C_Error_State I2C_Master_enuSendu8Data(u8 I2C_Data){
    270a:	df 93       	push	r29
    270c:	cf 93       	push	r28
    270e:	00 d0       	rcall	.+0      	; 0x2710 <I2C_Master_enuSendu8Data+0x6>
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
    2714:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Error_State state = NoError;
    2716:	19 82       	std	Y+1, r1	; 0x01

	/*Load the data*/
	TWDR = I2C_Data;
    2718:	e3 e2       	ldi	r30, 0x23	; 35
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	80 83       	st	Z, r24

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    2720:	e6 e5       	ldi	r30, 0x56	; 86
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	84 ec       	ldi	r24, 0xC4	; 196
    2726:	80 83       	st	Z, r24
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    2728:	e6 e5       	ldi	r30, 0x56	; 86
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	88 23       	and	r24, r24
    2730:	dc f7       	brge	.-10     	; 0x2728 <I2C_Master_enuSendu8Data+0x1e>

	/*Check Status*/
#if I2C_ACK_MODE == ACK_ENABLE
	if((TWSR & 0xF8) != I2C_MTXCheckData_WithAck){
    2732:	e1 e2       	ldi	r30, 0x21	; 33
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	88 2f       	mov	r24, r24
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	88 7f       	andi	r24, 0xF8	; 248
    273e:	90 70       	andi	r25, 0x00	; 0
    2740:	88 32       	cpi	r24, 0x28	; 40
    2742:	91 05       	cpc	r25, r1
    2744:	11 f0       	breq	.+4      	; 0x274a <I2C_Master_enuSendu8Data+0x40>
		state = ErrorWriteDataWithAck;
    2746:	87 e0       	ldi	r24, 0x07	; 7
    2748:	89 83       	std	Y+1, r24	; 0x01
#elif  I2C_ACK_MODE == ACK_DISABLE
	if((TWSR & 0xF8) != I2C_MTXCheckData_WithOutAck){
		state = ErrorWriteDataWithoutAck;
	}
#endif
	return state;
    274a:	89 81       	ldd	r24, Y+1	; 0x01
}
    274c:	0f 90       	pop	r0
    274e:	0f 90       	pop	r0
    2750:	cf 91       	pop	r28
    2752:	df 91       	pop	r29
    2754:	08 95       	ret

00002756 <I2C_Master_enuReadu8Data>:

I2C_Error_State I2C_Master_enuReadu8Data(u8* I2C_Data){
    2756:	df 93       	push	r29
    2758:	cf 93       	push	r28
    275a:	00 d0       	rcall	.+0      	; 0x275c <I2C_Master_enuReadu8Data+0x6>
    275c:	00 d0       	rcall	.+0      	; 0x275e <I2C_Master_enuReadu8Data+0x8>
    275e:	cd b7       	in	r28, 0x3d	; 61
    2760:	de b7       	in	r29, 0x3e	; 62
    2762:	9b 83       	std	Y+3, r25	; 0x03
    2764:	8a 83       	std	Y+2, r24	; 0x02
	if(I2C_Data != NULL){
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	9b 81       	ldd	r25, Y+3	; 0x03
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	f9 f0       	breq	.+62     	; 0x27ac <I2C_Master_enuReadu8Data+0x56>
		I2C_Error_State state = NoError;
    276e:	19 82       	std	Y+1, r1	; 0x01

#if I2C_ACK_MODE == ACK_ENABLE
		/*Enable  ACK*/
		TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    2770:	e6 e5       	ldi	r30, 0x56	; 86
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	84 ec       	ldi	r24, 0xC4	; 196
    2776:	80 83       	st	Z, r24
		/*Disable  ACK*/
		TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

		/*Wait for the flag*/
		while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    2778:	e6 e5       	ldi	r30, 0x56	; 86
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	80 81       	ld	r24, Z
    277e:	88 23       	and	r24, r24
    2780:	dc f7       	brge	.-10     	; 0x2778 <I2C_Master_enuReadu8Data+0x22>

		/*Check Status*/
#if I2C_ACK_MODE == ACK_ENABLE
		if((TWSR & 0xF8) != I2C_MRXCheckData_WithAck){
    2782:	e1 e2       	ldi	r30, 0x21	; 33
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	88 2f       	mov	r24, r24
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	88 7f       	andi	r24, 0xF8	; 248
    278e:	90 70       	andi	r25, 0x00	; 0
    2790:	80 35       	cpi	r24, 0x50	; 80
    2792:	91 05       	cpc	r25, r1
    2794:	11 f0       	breq	.+4      	; 0x279a <I2C_Master_enuReadu8Data+0x44>
			state = ErrorReadDataWithAck;
    2796:	89 e0       	ldi	r24, 0x09	; 9
    2798:	89 83       	std	Y+1, r24	; 0x01
#elif  I2C_ACK_MODE == ACK_DISABLE
		if((TWSR & 0xF8) != I2C_MRXCheckData_WithOutAck){
			state = ErrorReadDataWithoutAck;
		}
#endif
		*I2C_Data = TWDR;
    279a:	e3 e2       	ldi	r30, 0x23	; 35
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	80 81       	ld	r24, Z
    27a0:	ea 81       	ldd	r30, Y+2	; 0x02
    27a2:	fb 81       	ldd	r31, Y+3	; 0x03
    27a4:	80 83       	st	Z, r24
		return state;
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	8c 83       	std	Y+4, r24	; 0x04
    27aa:	02 c0       	rjmp	.+4      	; 0x27b0 <I2C_Master_enuReadu8Data+0x5a>
	}

	return -1;
    27ac:	8f ef       	ldi	r24, 0xFF	; 255
    27ae:	8c 83       	std	Y+4, r24	; 0x04
    27b0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	cf 91       	pop	r28
    27bc:	df 91       	pop	r29
    27be:	08 95       	ret

000027c0 <I2C_Master_enuFlush>:

I2C_Error_State I2C_Master_enuFlush(){
    27c0:	df 93       	push	r29
    27c2:	cf 93       	push	r28
    27c4:	0f 92       	push	r0
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
	I2C_Error_State state = NoError;
    27ca:	19 82       	std	Y+1, r1	; 0x01

	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    27cc:	e6 e5       	ldi	r30, 0x56	; 86
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	84 e8       	ldi	r24, 0x84	; 132
    27d2:	80 83       	st	Z, r24

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    27d4:	e6 e5       	ldi	r30, 0x56	; 86
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	88 23       	and	r24, r24
    27dc:	dc f7       	brge	.-10     	; 0x27d4 <I2C_Master_enuFlush+0x14>

	/*Check Status*/
	if((TWSR & 0xF8) != I2C_MRXCheckData_WithOutAck){
    27de:	e1 e2       	ldi	r30, 0x21	; 33
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	88 2f       	mov	r24, r24
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	88 7f       	andi	r24, 0xF8	; 248
    27ea:	90 70       	andi	r25, 0x00	; 0
    27ec:	88 35       	cpi	r24, 0x58	; 88
    27ee:	91 05       	cpc	r25, r1
    27f0:	11 f0       	breq	.+4      	; 0x27f6 <I2C_Master_enuFlush+0x36>
		state = ErrorReadDataWithoutAck;
    27f2:	8a e0       	ldi	r24, 0x0A	; 10
    27f4:	89 83       	std	Y+1, r24	; 0x01
	}

	return state;
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    27f8:	0f 90       	pop	r0
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <I2C_Master_enuSendStopCond>:

void I2C_Master_enuSendStopCond(void){
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWCR_TWSTO)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    2808:	e6 e5       	ldi	r30, 0x56	; 86
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	84 e9       	ldi	r24, 0x94	; 148
    280e:	80 83       	st	Z, r24

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWSTO) == 1);
    2810:	e6 e5       	ldi	r30, 0x56	; 86
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	82 95       	swap	r24
    2818:	8f 70       	andi	r24, 0x0F	; 15
    281a:	88 2f       	mov	r24, r24
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	81 70       	andi	r24, 0x01	; 1
    2820:	90 70       	andi	r25, 0x00	; 0
    2822:	88 23       	and	r24, r24
    2824:	a9 f7       	brne	.-22     	; 0x2810 <I2C_Master_enuSendStopCond+0x10>

}
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <I2C_Slave_enuReadu8Data>:

I2C_Error_State I2C_Slave_enuReadu8Data(u8* I2C_Data){
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	00 d0       	rcall	.+0      	; 0x2832 <I2C_Slave_enuReadu8Data+0x6>
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
    2836:	9a 83       	std	Y+2, r25	; 0x02
    2838:	89 83       	std	Y+1, r24	; 0x01

	return 0;
    283a:	80 e0       	ldi	r24, 0x00	; 0
}
    283c:	0f 90       	pop	r0
    283e:	0f 90       	pop	r0
    2840:	cf 91       	pop	r28
    2842:	df 91       	pop	r29
    2844:	08 95       	ret

00002846 <I2C_Master_INT_voidSendStartCond>:

void I2C_Master_INT_voidSendStartCond(void){
    2846:	df 93       	push	r29
    2848:	cf 93       	push	r28
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT)|(1<<TWCR_TWIE);
    284e:	e6 e5       	ldi	r30, 0x56	; 86
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	85 ee       	ldi	r24, 0xE5	; 229
    2854:	80 83       	st	Z, r24
#elif I2C_ACK_MODE == ACK_DISABLE
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT)|(1<<TWCR_TWIE);
#endif
}
    2856:	cf 91       	pop	r28
    2858:	df 91       	pop	r29
    285a:	08 95       	ret

0000285c <I2C_Master_INT_voidSendSlaveAddressWithWrite>:

void I2C_Master_INT_voidSendSlaveAddressWithWrite(u8 I2C_Address){
    285c:	df 93       	push	r29
    285e:	cf 93       	push	r28
    2860:	0f 92       	push	r0
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
    2866:	89 83       	std	Y+1, r24	; 0x01
	/*Load the slave address*/
	TWDR = I2C_Address;
    2868:	e3 e2       	ldi	r30, 0x23	; 35
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	80 83       	st	Z, r24

	/*Select the write mode*/
	CLR_BIT(TWDR, 0);
    2870:	a3 e2       	ldi	r26, 0x23	; 35
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	e3 e2       	ldi	r30, 0x23	; 35
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	8e 7f       	andi	r24, 0xFE	; 254
    287c:	8c 93       	st	X, r24

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT)|(1<<TWCR_TWIE);
    287e:	e6 e5       	ldi	r30, 0x56	; 86
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	85 ec       	ldi	r24, 0xC5	; 197
    2884:	80 83       	st	Z, r24
#elif I2C_ACK_MODE == ACK_DISABLE
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT)|(1<<TWCR_TWIE);
#endif
}
    2886:	0f 90       	pop	r0
    2888:	cf 91       	pop	r28
    288a:	df 91       	pop	r29
    288c:	08 95       	ret

0000288e <I2C_Master_INT_voidSendu8Data>:


void I2C_Master_INT_voidSendu8Data(u8 I2C_Data){
    288e:	df 93       	push	r29
    2890:	cf 93       	push	r28
    2892:	0f 92       	push	r0
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
    2898:	89 83       	std	Y+1, r24	; 0x01
	/*Load the data*/
	TWDR = I2C_Data;
    289a:	e3 e2       	ldi	r30, 0x23	; 35
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	80 83       	st	Z, r24

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT)|(1<<TWCR_TWIE);
    28a2:	e6 e5       	ldi	r30, 0x56	; 86
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	85 ec       	ldi	r24, 0xC5	; 197
    28a8:	80 83       	st	Z, r24
#elif I2C_ACK_MODE == ACK_DISABLE
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT)|(1<<TWCR_TWIE);
#endif
}
    28aa:	0f 90       	pop	r0
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	08 95       	ret

000028b2 <I2C_Master_INT_voidFlush>:

void I2C_Master_INT_voidFlush(){
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT)|(1<<TWCR_TWIE);
    28ba:	e6 e5       	ldi	r30, 0x56	; 86
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	85 e8       	ldi	r24, 0x85	; 133
    28c0:	80 83       	st	Z, r24
}
    28c2:	cf 91       	pop	r28
    28c4:	df 91       	pop	r29
    28c6:	08 95       	ret

000028c8 <I2C_Master_INT_voidSendStopCond>:

void I2C_Master_INT_voidSendStopCond(void){
    28c8:	df 93       	push	r29
    28ca:	cf 93       	push	r28
    28cc:	cd b7       	in	r28, 0x3d	; 61
    28ce:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWCR_TWSTO)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    28d0:	e6 e5       	ldi	r30, 0x56	; 86
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	84 e9       	ldi	r24, 0x94	; 148
    28d6:	80 83       	st	Z, r24
}
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	08 95       	ret

000028de <I2C_voidSetCallBack>:

void I2C_voidSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    28de:	df 93       	push	r29
    28e0:	cf 93       	push	r28
    28e2:	00 d0       	rcall	.+0      	; 0x28e4 <I2C_voidSetCallBack+0x6>
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62
    28e8:	9a 83       	std	Y+2, r25	; 0x02
    28ea:	89 83       	std	Y+1, r24	; 0x01
	Global_pvI2CCallBack = Copy_pvCallBackFunc;
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	9a 81       	ldd	r25, Y+2	; 0x02
    28f0:	90 93 c3 05 	sts	0x05C3, r25
    28f4:	80 93 c2 05 	sts	0x05C2, r24
}
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	cf 91       	pop	r28
    28fe:	df 91       	pop	r29
    2900:	08 95       	ret

00002902 <__vector_19>:

void  __vector_19 (void)	__attribute__((signal));
void  __vector_19 (void)
{
    2902:	1f 92       	push	r1
    2904:	0f 92       	push	r0
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	0f 92       	push	r0
    290a:	11 24       	eor	r1, r1
    290c:	2f 93       	push	r18
    290e:	3f 93       	push	r19
    2910:	4f 93       	push	r20
    2912:	5f 93       	push	r21
    2914:	6f 93       	push	r22
    2916:	7f 93       	push	r23
    2918:	8f 93       	push	r24
    291a:	9f 93       	push	r25
    291c:	af 93       	push	r26
    291e:	bf 93       	push	r27
    2920:	ef 93       	push	r30
    2922:	ff 93       	push	r31
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvI2CCallBack != NULL)
    292c:	80 91 c2 05 	lds	r24, 0x05C2
    2930:	90 91 c3 05 	lds	r25, 0x05C3
    2934:	00 97       	sbiw	r24, 0x00	; 0
    2936:	29 f0       	breq	.+10     	; 0x2942 <__vector_19+0x40>
	{
		Global_pvI2CCallBack();
    2938:	e0 91 c2 05 	lds	r30, 0x05C2
    293c:	f0 91 c3 05 	lds	r31, 0x05C3
    2940:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	ff 91       	pop	r31
    2948:	ef 91       	pop	r30
    294a:	bf 91       	pop	r27
    294c:	af 91       	pop	r26
    294e:	9f 91       	pop	r25
    2950:	8f 91       	pop	r24
    2952:	7f 91       	pop	r23
    2954:	6f 91       	pop	r22
    2956:	5f 91       	pop	r21
    2958:	4f 91       	pop	r20
    295a:	3f 91       	pop	r19
    295c:	2f 91       	pop	r18
    295e:	0f 90       	pop	r0
    2960:	0f be       	out	0x3f, r0	; 63
    2962:	0f 90       	pop	r0
    2964:	1f 90       	pop	r1
    2966:	18 95       	reti

00002968 <GIE_voidEnable>:

#include "../../../Library/STD_types.h"
#include "../../../Library/Bit_Math.h"
#include "../Header/GIE_Interface.h"

void GIE_voidEnable(){
    2968:	df 93       	push	r29
    296a:	cf 93       	push	r28
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
    2970:	af e5       	ldi	r26, 0x5F	; 95
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	ef e5       	ldi	r30, 0x5F	; 95
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	80 68       	ori	r24, 0x80	; 128
    297c:	8c 93       	st	X, r24
}
    297e:	cf 91       	pop	r28
    2980:	df 91       	pop	r29
    2982:	08 95       	ret

00002984 <GIE_voidDisable>:

void GIE_voidDisable(){
    2984:	df 93       	push	r29
    2986:	cf 93       	push	r28
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
    298c:	af e5       	ldi	r26, 0x5F	; 95
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	ef e5       	ldi	r30, 0x5F	; 95
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	80 81       	ld	r24, Z
    2996:	8f 77       	andi	r24, 0x7F	; 127
    2998:	8c 93       	st	X, r24
}
    299a:	cf 91       	pop	r28
    299c:	df 91       	pop	r29
    299e:	08 95       	ret

000029a0 <EXTI0_voidInit>:
void (*Global_EXTI0_CallBack)(void)= NULL;
void (*Global_EXTI1_CallBack)(void)= NULL;
void (*Global_EXTI2_CallBack)(void)= NULL;

//init the INT with sensing mood in preprocessing stage
void EXTI0_voidInit(void){
    29a0:	df 93       	push	r29
    29a2:	cf 93       	push	r28
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);

#elif 	INT0_SENSE == EXTI_RISING

	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
    29a8:	a5 e5       	ldi	r26, 0x55	; 85
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	e5 e5       	ldi	r30, 0x55	; 85
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	81 60       	ori	r24, 0x01	; 1
    29b4:	8c 93       	st	X, r24
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
    29b6:	a5 e5       	ldi	r26, 0x55	; 85
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	e5 e5       	ldi	r30, 0x55	; 85
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	82 60       	ori	r24, 0x02	; 2
    29c2:	8c 93       	st	X, r24

#else
#error "WRONG SENSE CONTROL CONFIGURATION FOR INT0"
#endif
}
    29c4:	cf 91       	pop	r28
    29c6:	df 91       	pop	r29
    29c8:	08 95       	ret

000029ca <EXTI1_voidInit>:
void EXTI1_voidInit(void){
    29ca:	df 93       	push	r29
    29cc:	cf 93       	push	r28
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);

#elif 	INT1_SENSE == EXTI_RISING

	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    29d2:	a5 e5       	ldi	r26, 0x55	; 85
    29d4:	b0 e0       	ldi	r27, 0x00	; 0
    29d6:	e5 e5       	ldi	r30, 0x55	; 85
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	84 60       	ori	r24, 0x04	; 4
    29de:	8c 93       	st	X, r24
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    29e0:	a5 e5       	ldi	r26, 0x55	; 85
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	e5 e5       	ldi	r30, 0x55	; 85
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
    29ea:	88 60       	ori	r24, 0x08	; 8
    29ec:	8c 93       	st	X, r24

#else
#error "WRONG SENSE CONTROL CONFIGURATION FOR INT0"
#endif
}
    29ee:	cf 91       	pop	r28
    29f0:	df 91       	pop	r29
    29f2:	08 95       	ret

000029f4 <EXTI2_voidInit>:
void EXTI2_voidInit(void){
    29f4:	df 93       	push	r29
    29f6:	cf 93       	push	r28
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
	/*Check sense control of Pin INT0*/
#if 	INT2_SENSE == EXTI_FALLING
	CLR_BIT(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);

#elif 	INT2_SENSE == EXTI_RISING
	SET_BIT(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);
    29fc:	a4 e5       	ldi	r26, 0x54	; 84
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	e4 e5       	ldi	r30, 0x54	; 84
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	80 64       	ori	r24, 0x40	; 64
    2a08:	8c 93       	st	X, r24

#else
#error "WRONG SENSE CONTROL CONFIGURATION FOR INT0"
#endif
}
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	08 95       	ret

00002a10 <EXTI0_voidEnable>:

//enable EXTI
void EXTI0_voidEnable(void){
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_GICR,EXTI_GICR_INT0);
    2a18:	ab e5       	ldi	r26, 0x5B	; 91
    2a1a:	b0 e0       	ldi	r27, 0x00	; 0
    2a1c:	eb e5       	ldi	r30, 0x5B	; 91
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	80 64       	ori	r24, 0x40	; 64
    2a24:	8c 93       	st	X, r24
}
    2a26:	cf 91       	pop	r28
    2a28:	df 91       	pop	r29
    2a2a:	08 95       	ret

00002a2c <EXTI1_voidEnable>:
void EXTI1_voidEnable(void){
    2a2c:	df 93       	push	r29
    2a2e:	cf 93       	push	r28
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_GICR,EXTI_GICR_INT1);
    2a34:	ab e5       	ldi	r26, 0x5B	; 91
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	eb e5       	ldi	r30, 0x5B	; 91
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	80 68       	ori	r24, 0x80	; 128
    2a40:	8c 93       	st	X, r24
}
    2a42:	cf 91       	pop	r28
    2a44:	df 91       	pop	r29
    2a46:	08 95       	ret

00002a48 <EXTI2_voidEnable>:
void EXTI2_voidEnable(void){
    2a48:	df 93       	push	r29
    2a4a:	cf 93       	push	r28
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_GICR,EXTI_GICR_INT2);
    2a50:	ab e5       	ldi	r26, 0x5B	; 91
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
    2a54:	eb e5       	ldi	r30, 0x5B	; 91
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	80 62       	ori	r24, 0x20	; 32
    2a5c:	8c 93       	st	X, r24
}
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	08 95       	ret

00002a64 <EXTI0_voidDisable>:

//disable EXTI
void EXTI0_voidDisable(void){
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_GICR,EXTI_GICR_INT0);
    2a6c:	ab e5       	ldi	r26, 0x5B	; 91
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	eb e5       	ldi	r30, 0x5B	; 91
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	80 81       	ld	r24, Z
    2a76:	8f 7b       	andi	r24, 0xBF	; 191
    2a78:	8c 93       	st	X, r24
}
    2a7a:	cf 91       	pop	r28
    2a7c:	df 91       	pop	r29
    2a7e:	08 95       	ret

00002a80 <EXTI1_voidDisable>:
void EXTI1_voidDisable(void){
    2a80:	df 93       	push	r29
    2a82:	cf 93       	push	r28
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_GICR,EXTI_GICR_INT1);
    2a88:	ab e5       	ldi	r26, 0x5B	; 91
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	eb e5       	ldi	r30, 0x5B	; 91
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	8f 77       	andi	r24, 0x7F	; 127
    2a94:	8c 93       	st	X, r24
}
    2a96:	cf 91       	pop	r28
    2a98:	df 91       	pop	r29
    2a9a:	08 95       	ret

00002a9c <EXTI2_voidDisable>:
void EXTI2_voidDisable(void){
    2a9c:	df 93       	push	r29
    2a9e:	cf 93       	push	r28
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_GICR,EXTI_GICR_INT2);
    2aa4:	ab e5       	ldi	r26, 0x5B	; 91
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	eb e5       	ldi	r30, 0x5B	; 91
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	8f 7d       	andi	r24, 0xDF	; 223
    2ab0:	8c 93       	st	X, r24
}
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	08 95       	ret

00002ab8 <EXTI0_voidSetSignalch>:

//change the INT with sensing mood in runtime
void EXTI0_voidSetSignalch(u8 SenseCpy){
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	00 d0       	rcall	.+0      	; 0x2abe <EXTI0_voidSetSignalch+0x6>
    2abe:	0f 92       	push	r0
    2ac0:	cd b7       	in	r28, 0x3d	; 61
    2ac2:	de b7       	in	r29, 0x3e	; 62
    2ac4:	89 83       	std	Y+1, r24	; 0x01
	switch(SenseCpy){
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	28 2f       	mov	r18, r24
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	3b 83       	std	Y+3, r19	; 0x03
    2ace:	2a 83       	std	Y+2, r18	; 0x02
    2ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad4:	81 30       	cpi	r24, 0x01	; 1
    2ad6:	91 05       	cpc	r25, r1
    2ad8:	99 f1       	breq	.+102    	; 0x2b40 <EXTI0_voidSetSignalch+0x88>
    2ada:	2a 81       	ldd	r18, Y+2	; 0x02
    2adc:	3b 81       	ldd	r19, Y+3	; 0x03
    2ade:	22 30       	cpi	r18, 0x02	; 2
    2ae0:	31 05       	cpc	r19, r1
    2ae2:	2c f4       	brge	.+10     	; 0x2aee <EXTI0_voidSetSignalch+0x36>
    2ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ae8:	00 97       	sbiw	r24, 0x00	; 0
    2aea:	c9 f1       	breq	.+114    	; 0x2b5e <EXTI0_voidSetSignalch+0xa6>
    2aec:	46 c0       	rjmp	.+140    	; 0x2b7a <EXTI0_voidSetSignalch+0xc2>
    2aee:	2a 81       	ldd	r18, Y+2	; 0x02
    2af0:	3b 81       	ldd	r19, Y+3	; 0x03
    2af2:	22 30       	cpi	r18, 0x02	; 2
    2af4:	31 05       	cpc	r19, r1
    2af6:	31 f0       	breq	.+12     	; 0x2b04 <EXTI0_voidSetSignalch+0x4c>
    2af8:	8a 81       	ldd	r24, Y+2	; 0x02
    2afa:	9b 81       	ldd	r25, Y+3	; 0x03
    2afc:	83 30       	cpi	r24, 0x03	; 3
    2afe:	91 05       	cpc	r25, r1
    2b00:	81 f0       	breq	.+32     	; 0x2b22 <EXTI0_voidSetSignalch+0x6a>
    2b02:	3b c0       	rjmp	.+118    	; 0x2b7a <EXTI0_voidSetSignalch+0xc2>
	case EXTI_FALLING:
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
    2b04:	a5 e5       	ldi	r26, 0x55	; 85
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	e5 e5       	ldi	r30, 0x55	; 85
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	8e 7f       	andi	r24, 0xFE	; 254
    2b10:	8c 93       	st	X, r24
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
    2b12:	a5 e5       	ldi	r26, 0x55	; 85
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	e5 e5       	ldi	r30, 0x55	; 85
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	80 81       	ld	r24, Z
    2b1c:	82 60       	ori	r24, 0x02	; 2
    2b1e:	8c 93       	st	X, r24
    2b20:	2c c0       	rjmp	.+88     	; 0x2b7a <EXTI0_voidSetSignalch+0xc2>
		break;
	case EXTI_RISING:
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
    2b22:	a5 e5       	ldi	r26, 0x55	; 85
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	e5 e5       	ldi	r30, 0x55	; 85
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	81 60       	ori	r24, 0x01	; 1
    2b2e:	8c 93       	st	X, r24
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
    2b30:	a5 e5       	ldi	r26, 0x55	; 85
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	e5 e5       	ldi	r30, 0x55	; 85
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	82 60       	ori	r24, 0x02	; 2
    2b3c:	8c 93       	st	X, r24
    2b3e:	1d c0       	rjmp	.+58     	; 0x2b7a <EXTI0_voidSetSignalch+0xc2>
		break;
	case EXTI_IOC:
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
    2b40:	a5 e5       	ldi	r26, 0x55	; 85
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	e5 e5       	ldi	r30, 0x55	; 85
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	81 60       	ori	r24, 0x01	; 1
    2b4c:	8c 93       	st	X, r24
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
    2b4e:	a5 e5       	ldi	r26, 0x55	; 85
    2b50:	b0 e0       	ldi	r27, 0x00	; 0
    2b52:	e5 e5       	ldi	r30, 0x55	; 85
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	80 81       	ld	r24, Z
    2b58:	8d 7f       	andi	r24, 0xFD	; 253
    2b5a:	8c 93       	st	X, r24
    2b5c:	0e c0       	rjmp	.+28     	; 0x2b7a <EXTI0_voidSetSignalch+0xc2>
		break;
	case EXTI_LOW:
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
    2b5e:	a5 e5       	ldi	r26, 0x55	; 85
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	e5 e5       	ldi	r30, 0x55	; 85
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	8e 7f       	andi	r24, 0xFE	; 254
    2b6a:	8c 93       	st	X, r24
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
    2b6c:	a5 e5       	ldi	r26, 0x55	; 85
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	e5 e5       	ldi	r30, 0x55	; 85
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	8d 7f       	andi	r24, 0xFD	; 253
    2b78:	8c 93       	st	X, r24
		break;
	}
}
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	cf 91       	pop	r28
    2b82:	df 91       	pop	r29
    2b84:	08 95       	ret

00002b86 <EXTI1_voidSetSignalch>:
void EXTI1_voidSetSignalch(u8 SenseCpy){
    2b86:	df 93       	push	r29
    2b88:	cf 93       	push	r28
    2b8a:	00 d0       	rcall	.+0      	; 0x2b8c <EXTI1_voidSetSignalch+0x6>
    2b8c:	0f 92       	push	r0
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    2b92:	89 83       	std	Y+1, r24	; 0x01
	switch(SenseCpy){
    2b94:	89 81       	ldd	r24, Y+1	; 0x01
    2b96:	28 2f       	mov	r18, r24
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	3b 83       	std	Y+3, r19	; 0x03
    2b9c:	2a 83       	std	Y+2, r18	; 0x02
    2b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba2:	81 30       	cpi	r24, 0x01	; 1
    2ba4:	91 05       	cpc	r25, r1
    2ba6:	99 f1       	breq	.+102    	; 0x2c0e <EXTI1_voidSetSignalch+0x88>
    2ba8:	2a 81       	ldd	r18, Y+2	; 0x02
    2baa:	3b 81       	ldd	r19, Y+3	; 0x03
    2bac:	22 30       	cpi	r18, 0x02	; 2
    2bae:	31 05       	cpc	r19, r1
    2bb0:	2c f4       	brge	.+10     	; 0x2bbc <EXTI1_voidSetSignalch+0x36>
    2bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb6:	00 97       	sbiw	r24, 0x00	; 0
    2bb8:	c9 f1       	breq	.+114    	; 0x2c2c <EXTI1_voidSetSignalch+0xa6>
    2bba:	46 c0       	rjmp	.+140    	; 0x2c48 <EXTI1_voidSetSignalch+0xc2>
    2bbc:	2a 81       	ldd	r18, Y+2	; 0x02
    2bbe:	3b 81       	ldd	r19, Y+3	; 0x03
    2bc0:	22 30       	cpi	r18, 0x02	; 2
    2bc2:	31 05       	cpc	r19, r1
    2bc4:	31 f0       	breq	.+12     	; 0x2bd2 <EXTI1_voidSetSignalch+0x4c>
    2bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bca:	83 30       	cpi	r24, 0x03	; 3
    2bcc:	91 05       	cpc	r25, r1
    2bce:	81 f0       	breq	.+32     	; 0x2bf0 <EXTI1_voidSetSignalch+0x6a>
    2bd0:	3b c0       	rjmp	.+118    	; 0x2c48 <EXTI1_voidSetSignalch+0xc2>
	case EXTI_FALLING:
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    2bd2:	a5 e5       	ldi	r26, 0x55	; 85
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	e5 e5       	ldi	r30, 0x55	; 85
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	8b 7f       	andi	r24, 0xFB	; 251
    2bde:	8c 93       	st	X, r24
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    2be0:	a5 e5       	ldi	r26, 0x55	; 85
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	e5 e5       	ldi	r30, 0x55	; 85
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	88 60       	ori	r24, 0x08	; 8
    2bec:	8c 93       	st	X, r24
    2bee:	2c c0       	rjmp	.+88     	; 0x2c48 <EXTI1_voidSetSignalch+0xc2>
		break;
	case EXTI_RISING:
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    2bf0:	a5 e5       	ldi	r26, 0x55	; 85
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	e5 e5       	ldi	r30, 0x55	; 85
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	84 60       	ori	r24, 0x04	; 4
    2bfc:	8c 93       	st	X, r24
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    2bfe:	a5 e5       	ldi	r26, 0x55	; 85
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	e5 e5       	ldi	r30, 0x55	; 85
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	88 60       	ori	r24, 0x08	; 8
    2c0a:	8c 93       	st	X, r24
    2c0c:	1d c0       	rjmp	.+58     	; 0x2c48 <EXTI1_voidSetSignalch+0xc2>
		break;
	case EXTI_IOC:
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    2c0e:	a5 e5       	ldi	r26, 0x55	; 85
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	e5 e5       	ldi	r30, 0x55	; 85
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	84 60       	ori	r24, 0x04	; 4
    2c1a:	8c 93       	st	X, r24
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    2c1c:	a5 e5       	ldi	r26, 0x55	; 85
    2c1e:	b0 e0       	ldi	r27, 0x00	; 0
    2c20:	e5 e5       	ldi	r30, 0x55	; 85
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	87 7f       	andi	r24, 0xF7	; 247
    2c28:	8c 93       	st	X, r24
    2c2a:	0e c0       	rjmp	.+28     	; 0x2c48 <EXTI1_voidSetSignalch+0xc2>
		break;
	case EXTI_LOW:
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    2c2c:	a5 e5       	ldi	r26, 0x55	; 85
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	e5 e5       	ldi	r30, 0x55	; 85
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	80 81       	ld	r24, Z
    2c36:	8b 7f       	andi	r24, 0xFB	; 251
    2c38:	8c 93       	st	X, r24
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    2c3a:	a5 e5       	ldi	r26, 0x55	; 85
    2c3c:	b0 e0       	ldi	r27, 0x00	; 0
    2c3e:	e5 e5       	ldi	r30, 0x55	; 85
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	80 81       	ld	r24, Z
    2c44:	87 7f       	andi	r24, 0xF7	; 247
    2c46:	8c 93       	st	X, r24
		break;
	}
}
    2c48:	0f 90       	pop	r0
    2c4a:	0f 90       	pop	r0
    2c4c:	0f 90       	pop	r0
    2c4e:	cf 91       	pop	r28
    2c50:	df 91       	pop	r29
    2c52:	08 95       	ret

00002c54 <EXTI2_voidSetSignalch>:
void EXTI2_voidSetSignalch(u8 SenseCpy){
    2c54:	df 93       	push	r29
    2c56:	cf 93       	push	r28
    2c58:	00 d0       	rcall	.+0      	; 0x2c5a <EXTI2_voidSetSignalch+0x6>
    2c5a:	0f 92       	push	r0
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62
    2c60:	89 83       	std	Y+1, r24	; 0x01
	switch(SenseCpy){
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	28 2f       	mov	r18, r24
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	3b 83       	std	Y+3, r19	; 0x03
    2c6a:	2a 83       	std	Y+2, r18	; 0x02
    2c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c70:	82 30       	cpi	r24, 0x02	; 2
    2c72:	91 05       	cpc	r25, r1
    2c74:	31 f0       	breq	.+12     	; 0x2c82 <EXTI2_voidSetSignalch+0x2e>
    2c76:	2a 81       	ldd	r18, Y+2	; 0x02
    2c78:	3b 81       	ldd	r19, Y+3	; 0x03
    2c7a:	23 30       	cpi	r18, 0x03	; 3
    2c7c:	31 05       	cpc	r19, r1
    2c7e:	49 f0       	breq	.+18     	; 0x2c92 <EXTI2_voidSetSignalch+0x3e>
    2c80:	0f c0       	rjmp	.+30     	; 0x2ca0 <EXTI2_voidSetSignalch+0x4c>
	case EXTI_FALLING:
		CLR_BIT(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);
    2c82:	a4 e5       	ldi	r26, 0x54	; 84
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	e4 e5       	ldi	r30, 0x54	; 84
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	8f 7b       	andi	r24, 0xBF	; 191
    2c8e:	8c 93       	st	X, r24
    2c90:	07 c0       	rjmp	.+14     	; 0x2ca0 <EXTI2_voidSetSignalch+0x4c>
		break;
	case EXTI_RISING:
		SET_BIT(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);
    2c92:	a4 e5       	ldi	r26, 0x54	; 84
    2c94:	b0 e0       	ldi	r27, 0x00	; 0
    2c96:	e4 e5       	ldi	r30, 0x54	; 84
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	80 81       	ld	r24, Z
    2c9c:	80 64       	ori	r24, 0x40	; 64
    2c9e:	8c 93       	st	X, r24
		break;
	}
}
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	cf 91       	pop	r28
    2ca8:	df 91       	pop	r29
    2caa:	08 95       	ret

00002cac <EXTI0_VID_SET_CALL_BACK>:

//callback function
void EXTI0_VID_SET_CALL_BACK(void (*PTR)(void)){
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	00 d0       	rcall	.+0      	; 0x2cb2 <EXTI0_VID_SET_CALL_BACK+0x6>
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
    2cb6:	9a 83       	std	Y+2, r25	; 0x02
    2cb8:	89 83       	std	Y+1, r24	; 0x01
	Global_EXTI0_CallBack = PTR;
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
    2cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cbe:	90 93 c5 05 	sts	0x05C5, r25
    2cc2:	80 93 c4 05 	sts	0x05C4, r24
}
    2cc6:	0f 90       	pop	r0
    2cc8:	0f 90       	pop	r0
    2cca:	cf 91       	pop	r28
    2ccc:	df 91       	pop	r29
    2cce:	08 95       	ret

00002cd0 <EXTI1_VID_SET_CALL_BACK>:
void EXTI1_VID_SET_CALL_BACK(void (*PTR)(void)){
    2cd0:	df 93       	push	r29
    2cd2:	cf 93       	push	r28
    2cd4:	00 d0       	rcall	.+0      	; 0x2cd6 <EXTI1_VID_SET_CALL_BACK+0x6>
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
    2cda:	9a 83       	std	Y+2, r25	; 0x02
    2cdc:	89 83       	std	Y+1, r24	; 0x01
	Global_EXTI1_CallBack = PTR;
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
    2ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce2:	90 93 c7 05 	sts	0x05C7, r25
    2ce6:	80 93 c6 05 	sts	0x05C6, r24
}
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	cf 91       	pop	r28
    2cf0:	df 91       	pop	r29
    2cf2:	08 95       	ret

00002cf4 <EXTI2_VID_SET_CALL_BACK>:
void EXTI2_VID_SET_CALL_BACK(void (*PTR)(void)){
    2cf4:	df 93       	push	r29
    2cf6:	cf 93       	push	r28
    2cf8:	00 d0       	rcall	.+0      	; 0x2cfa <EXTI2_VID_SET_CALL_BACK+0x6>
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
    2cfe:	9a 83       	std	Y+2, r25	; 0x02
    2d00:	89 83       	std	Y+1, r24	; 0x01
	Global_EXTI2_CallBack = PTR;
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	9a 81       	ldd	r25, Y+2	; 0x02
    2d06:	90 93 c9 05 	sts	0x05C9, r25
    2d0a:	80 93 c8 05 	sts	0x05C8, r24
}
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	cf 91       	pop	r28
    2d14:	df 91       	pop	r29
    2d16:	08 95       	ret

00002d18 <__vector_1>:

void __vector_1 (void){
    2d18:	1f 92       	push	r1
    2d1a:	0f 92       	push	r0
    2d1c:	0f b6       	in	r0, 0x3f	; 63
    2d1e:	0f 92       	push	r0
    2d20:	11 24       	eor	r1, r1
    2d22:	2f 93       	push	r18
    2d24:	3f 93       	push	r19
    2d26:	4f 93       	push	r20
    2d28:	5f 93       	push	r21
    2d2a:	6f 93       	push	r22
    2d2c:	7f 93       	push	r23
    2d2e:	8f 93       	push	r24
    2d30:	9f 93       	push	r25
    2d32:	af 93       	push	r26
    2d34:	bf 93       	push	r27
    2d36:	ef 93       	push	r30
    2d38:	ff 93       	push	r31
    2d3a:	df 93       	push	r29
    2d3c:	cf 93       	push	r28
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI0_CallBack != NULL){
    2d42:	80 91 c4 05 	lds	r24, 0x05C4
    2d46:	90 91 c5 05 	lds	r25, 0x05C5
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	29 f0       	breq	.+10     	; 0x2d58 <__vector_1+0x40>
		Global_EXTI0_CallBack();
    2d4e:	e0 91 c4 05 	lds	r30, 0x05C4
    2d52:	f0 91 c5 05 	lds	r31, 0x05C5
    2d56:	09 95       	icall
	}
}
    2d58:	cf 91       	pop	r28
    2d5a:	df 91       	pop	r29
    2d5c:	ff 91       	pop	r31
    2d5e:	ef 91       	pop	r30
    2d60:	bf 91       	pop	r27
    2d62:	af 91       	pop	r26
    2d64:	9f 91       	pop	r25
    2d66:	8f 91       	pop	r24
    2d68:	7f 91       	pop	r23
    2d6a:	6f 91       	pop	r22
    2d6c:	5f 91       	pop	r21
    2d6e:	4f 91       	pop	r20
    2d70:	3f 91       	pop	r19
    2d72:	2f 91       	pop	r18
    2d74:	0f 90       	pop	r0
    2d76:	0f be       	out	0x3f, r0	; 63
    2d78:	0f 90       	pop	r0
    2d7a:	1f 90       	pop	r1
    2d7c:	18 95       	reti

00002d7e <__vector_2>:
void __vector_2 (void){
    2d7e:	1f 92       	push	r1
    2d80:	0f 92       	push	r0
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	0f 92       	push	r0
    2d86:	11 24       	eor	r1, r1
    2d88:	2f 93       	push	r18
    2d8a:	3f 93       	push	r19
    2d8c:	4f 93       	push	r20
    2d8e:	5f 93       	push	r21
    2d90:	6f 93       	push	r22
    2d92:	7f 93       	push	r23
    2d94:	8f 93       	push	r24
    2d96:	9f 93       	push	r25
    2d98:	af 93       	push	r26
    2d9a:	bf 93       	push	r27
    2d9c:	ef 93       	push	r30
    2d9e:	ff 93       	push	r31
    2da0:	df 93       	push	r29
    2da2:	cf 93       	push	r28
    2da4:	cd b7       	in	r28, 0x3d	; 61
    2da6:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI1_CallBack != NULL){
    2da8:	80 91 c6 05 	lds	r24, 0x05C6
    2dac:	90 91 c7 05 	lds	r25, 0x05C7
    2db0:	00 97       	sbiw	r24, 0x00	; 0
    2db2:	29 f0       	breq	.+10     	; 0x2dbe <__vector_2+0x40>
		Global_EXTI1_CallBack();
    2db4:	e0 91 c6 05 	lds	r30, 0x05C6
    2db8:	f0 91 c7 05 	lds	r31, 0x05C7
    2dbc:	09 95       	icall
	}
}
    2dbe:	cf 91       	pop	r28
    2dc0:	df 91       	pop	r29
    2dc2:	ff 91       	pop	r31
    2dc4:	ef 91       	pop	r30
    2dc6:	bf 91       	pop	r27
    2dc8:	af 91       	pop	r26
    2dca:	9f 91       	pop	r25
    2dcc:	8f 91       	pop	r24
    2dce:	7f 91       	pop	r23
    2dd0:	6f 91       	pop	r22
    2dd2:	5f 91       	pop	r21
    2dd4:	4f 91       	pop	r20
    2dd6:	3f 91       	pop	r19
    2dd8:	2f 91       	pop	r18
    2dda:	0f 90       	pop	r0
    2ddc:	0f be       	out	0x3f, r0	; 63
    2dde:	0f 90       	pop	r0
    2de0:	1f 90       	pop	r1
    2de2:	18 95       	reti

00002de4 <__vector_3>:
void __vector_3 (void){
    2de4:	1f 92       	push	r1
    2de6:	0f 92       	push	r0
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	0f 92       	push	r0
    2dec:	11 24       	eor	r1, r1
    2dee:	2f 93       	push	r18
    2df0:	3f 93       	push	r19
    2df2:	4f 93       	push	r20
    2df4:	5f 93       	push	r21
    2df6:	6f 93       	push	r22
    2df8:	7f 93       	push	r23
    2dfa:	8f 93       	push	r24
    2dfc:	9f 93       	push	r25
    2dfe:	af 93       	push	r26
    2e00:	bf 93       	push	r27
    2e02:	ef 93       	push	r30
    2e04:	ff 93       	push	r31
    2e06:	df 93       	push	r29
    2e08:	cf 93       	push	r28
    2e0a:	cd b7       	in	r28, 0x3d	; 61
    2e0c:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI2_CallBack != NULL){
    2e0e:	80 91 c8 05 	lds	r24, 0x05C8
    2e12:	90 91 c9 05 	lds	r25, 0x05C9
    2e16:	00 97       	sbiw	r24, 0x00	; 0
    2e18:	29 f0       	breq	.+10     	; 0x2e24 <__vector_3+0x40>
		Global_EXTI2_CallBack();
    2e1a:	e0 91 c8 05 	lds	r30, 0x05C8
    2e1e:	f0 91 c9 05 	lds	r31, 0x05C9
    2e22:	09 95       	icall
	}
}
    2e24:	cf 91       	pop	r28
    2e26:	df 91       	pop	r29
    2e28:	ff 91       	pop	r31
    2e2a:	ef 91       	pop	r30
    2e2c:	bf 91       	pop	r27
    2e2e:	af 91       	pop	r26
    2e30:	9f 91       	pop	r25
    2e32:	8f 91       	pop	r24
    2e34:	7f 91       	pop	r23
    2e36:	6f 91       	pop	r22
    2e38:	5f 91       	pop	r21
    2e3a:	4f 91       	pop	r20
    2e3c:	3f 91       	pop	r19
    2e3e:	2f 91       	pop	r18
    2e40:	0f 90       	pop	r0
    2e42:	0f be       	out	0x3f, r0	; 63
    2e44:	0f 90       	pop	r0
    2e46:	1f 90       	pop	r1
    2e48:	18 95       	reti

00002e4a <DIO_voidInit>:
#include "../../../Library/STD_types.h"
#include "../../../Library/Bit_Math.h"
#include "../Header/DIO_Interface.h"
#include "../Header/DIO_Register.h"

void DIO_voidInit(){
    2e4a:	df 93       	push	r29
    2e4c:	cf 93       	push	r28
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(DIO_PortA,concate(DIO_PINA7, DIO_PINA6, DIO_PINA5, DIO_PINA4, DIO_PINA3, DIO_PINA2, DIO_PINA1, DIO_PINA0));
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	6c ea       	ldi	r22, 0xAC	; 172
    2e56:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortB,concate(DIO_PINB7, DIO_PINB6, DIO_PINB5, DIO_PINB4, DIO_PINB3, DIO_PINB2, DIO_PINB1, DIO_PINB0));
    2e5a:	82 e0       	ldi	r24, 0x02	; 2
    2e5c:	6f ea       	ldi	r22, 0xAF	; 175
    2e5e:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortC,concate(DIO_PINC7, DIO_PINC6, DIO_PINC5, DIO_PINC4, DIO_PINC3, DIO_PINC2, DIO_PINC1, DIO_PINC0));
    2e62:	83 e0       	ldi	r24, 0x03	; 3
    2e64:	60 e0       	ldi	r22, 0x00	; 0
    2e66:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortD,concate(DIO_PIND7, DIO_PIND6, DIO_PIND5, DIO_PIND4, DIO_PIND3, DIO_PIND2, DIO_PIND1, DIO_PIND0));
    2e6a:	84 e0       	ldi	r24, 0x04	; 4
    2e6c:	6e ef       	ldi	r22, 0xFE	; 254
    2e6e:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <DIO_voidSetPortDir>
}
    2e72:	cf 91       	pop	r28
    2e74:	df 91       	pop	r29
    2e76:	08 95       	ret

00002e78 <DIO_voidSetPinDir>:

void DIO_voidSetPinDir(u8 Local_PortName,u8 Local_PinNumber,u8 Local_PinDir){
    2e78:	df 93       	push	r29
    2e7a:	cf 93       	push	r28
    2e7c:	cd b7       	in	r28, 0x3d	; 61
    2e7e:	de b7       	in	r29, 0x3e	; 62
    2e80:	27 97       	sbiw	r28, 0x07	; 7
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	f8 94       	cli
    2e86:	de bf       	out	0x3e, r29	; 62
    2e88:	0f be       	out	0x3f, r0	; 63
    2e8a:	cd bf       	out	0x3d, r28	; 61
    2e8c:	89 83       	std	Y+1, r24	; 0x01
    2e8e:	6a 83       	std	Y+2, r22	; 0x02
    2e90:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	85 30       	cpi	r24, 0x05	; 5
    2e96:	08 f0       	brcs	.+2      	; 0x2e9a <DIO_voidSetPinDir+0x22>
    2e98:	f4 c0       	rjmp	.+488    	; 0x3082 <DIO_voidSetPinDir+0x20a>
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
    2e9c:	88 23       	and	r24, r24
    2e9e:	09 f4       	brne	.+2      	; 0x2ea2 <DIO_voidSetPinDir+0x2a>
    2ea0:	f0 c0       	rjmp	.+480    	; 0x3082 <DIO_voidSetPinDir+0x20a>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    2ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea4:	88 30       	cpi	r24, 0x08	; 8
    2ea6:	08 f0       	brcs	.+2      	; 0x2eaa <DIO_voidSetPinDir+0x32>
    2ea8:	ec c0       	rjmp	.+472    	; 0x3082 <DIO_voidSetPinDir+0x20a>
			if(Local_PinDir == Output){
    2eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2eac:	81 30       	cpi	r24, 0x01	; 1
    2eae:	09 f0       	breq	.+2      	; 0x2eb2 <DIO_voidSetPinDir+0x3a>
    2eb0:	70 c0       	rjmp	.+224    	; 0x2f92 <DIO_voidSetPinDir+0x11a>
				switch(Local_PortName){
    2eb2:	89 81       	ldd	r24, Y+1	; 0x01
    2eb4:	28 2f       	mov	r18, r24
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	3f 83       	std	Y+7, r19	; 0x07
    2eba:	2e 83       	std	Y+6, r18	; 0x06
    2ebc:	8e 81       	ldd	r24, Y+6	; 0x06
    2ebe:	9f 81       	ldd	r25, Y+7	; 0x07
    2ec0:	82 30       	cpi	r24, 0x02	; 2
    2ec2:	91 05       	cpc	r25, r1
    2ec4:	51 f1       	breq	.+84     	; 0x2f1a <DIO_voidSetPinDir+0xa2>
    2ec6:	2e 81       	ldd	r18, Y+6	; 0x06
    2ec8:	3f 81       	ldd	r19, Y+7	; 0x07
    2eca:	23 30       	cpi	r18, 0x03	; 3
    2ecc:	31 05       	cpc	r19, r1
    2ece:	34 f4       	brge	.+12     	; 0x2edc <DIO_voidSetPinDir+0x64>
    2ed0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ed2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ed4:	81 30       	cpi	r24, 0x01	; 1
    2ed6:	91 05       	cpc	r25, r1
    2ed8:	61 f0       	breq	.+24     	; 0x2ef2 <DIO_voidSetPinDir+0x7a>
    2eda:	d3 c0       	rjmp	.+422    	; 0x3082 <DIO_voidSetPinDir+0x20a>
    2edc:	2e 81       	ldd	r18, Y+6	; 0x06
    2ede:	3f 81       	ldd	r19, Y+7	; 0x07
    2ee0:	23 30       	cpi	r18, 0x03	; 3
    2ee2:	31 05       	cpc	r19, r1
    2ee4:	71 f1       	breq	.+92     	; 0x2f42 <DIO_voidSetPinDir+0xca>
    2ee6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ee8:	9f 81       	ldd	r25, Y+7	; 0x07
    2eea:	84 30       	cpi	r24, 0x04	; 4
    2eec:	91 05       	cpc	r25, r1
    2eee:	e9 f1       	breq	.+122    	; 0x2f6a <DIO_voidSetPinDir+0xf2>
    2ef0:	c8 c0       	rjmp	.+400    	; 0x3082 <DIO_voidSetPinDir+0x20a>
				case DIO_PortA:
					Set_Bit(DIO_DDRA,Local_PinNumber);
    2ef2:	aa e3       	ldi	r26, 0x3A	; 58
    2ef4:	b0 e0       	ldi	r27, 0x00	; 0
    2ef6:	ea e3       	ldi	r30, 0x3A	; 58
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	80 81       	ld	r24, Z
    2efc:	48 2f       	mov	r20, r24
    2efe:	8a 81       	ldd	r24, Y+2	; 0x02
    2f00:	28 2f       	mov	r18, r24
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	02 2e       	mov	r0, r18
    2f0a:	02 c0       	rjmp	.+4      	; 0x2f10 <DIO_voidSetPinDir+0x98>
    2f0c:	88 0f       	add	r24, r24
    2f0e:	99 1f       	adc	r25, r25
    2f10:	0a 94       	dec	r0
    2f12:	e2 f7       	brpl	.-8      	; 0x2f0c <DIO_voidSetPinDir+0x94>
    2f14:	84 2b       	or	r24, r20
    2f16:	8c 93       	st	X, r24
    2f18:	b4 c0       	rjmp	.+360    	; 0x3082 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortB:
					Set_Bit(DIO_DDRB,Local_PinNumber);
    2f1a:	a7 e3       	ldi	r26, 0x37	; 55
    2f1c:	b0 e0       	ldi	r27, 0x00	; 0
    2f1e:	e7 e3       	ldi	r30, 0x37	; 55
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	80 81       	ld	r24, Z
    2f24:	48 2f       	mov	r20, r24
    2f26:	8a 81       	ldd	r24, Y+2	; 0x02
    2f28:	28 2f       	mov	r18, r24
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	02 2e       	mov	r0, r18
    2f32:	02 c0       	rjmp	.+4      	; 0x2f38 <DIO_voidSetPinDir+0xc0>
    2f34:	88 0f       	add	r24, r24
    2f36:	99 1f       	adc	r25, r25
    2f38:	0a 94       	dec	r0
    2f3a:	e2 f7       	brpl	.-8      	; 0x2f34 <DIO_voidSetPinDir+0xbc>
    2f3c:	84 2b       	or	r24, r20
    2f3e:	8c 93       	st	X, r24
    2f40:	a0 c0       	rjmp	.+320    	; 0x3082 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortC:
					Set_Bit(DIO_DDRC,Local_PinNumber);
    2f42:	a4 e3       	ldi	r26, 0x34	; 52
    2f44:	b0 e0       	ldi	r27, 0x00	; 0
    2f46:	e4 e3       	ldi	r30, 0x34	; 52
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	80 81       	ld	r24, Z
    2f4c:	48 2f       	mov	r20, r24
    2f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f50:	28 2f       	mov	r18, r24
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	02 2e       	mov	r0, r18
    2f5a:	02 c0       	rjmp	.+4      	; 0x2f60 <DIO_voidSetPinDir+0xe8>
    2f5c:	88 0f       	add	r24, r24
    2f5e:	99 1f       	adc	r25, r25
    2f60:	0a 94       	dec	r0
    2f62:	e2 f7       	brpl	.-8      	; 0x2f5c <DIO_voidSetPinDir+0xe4>
    2f64:	84 2b       	or	r24, r20
    2f66:	8c 93       	st	X, r24
    2f68:	8c c0       	rjmp	.+280    	; 0x3082 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortD:
					Set_Bit(DIO_DDRD,Local_PinNumber);
    2f6a:	a1 e3       	ldi	r26, 0x31	; 49
    2f6c:	b0 e0       	ldi	r27, 0x00	; 0
    2f6e:	e1 e3       	ldi	r30, 0x31	; 49
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	80 81       	ld	r24, Z
    2f74:	48 2f       	mov	r20, r24
    2f76:	8a 81       	ldd	r24, Y+2	; 0x02
    2f78:	28 2f       	mov	r18, r24
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	02 2e       	mov	r0, r18
    2f82:	02 c0       	rjmp	.+4      	; 0x2f88 <DIO_voidSetPinDir+0x110>
    2f84:	88 0f       	add	r24, r24
    2f86:	99 1f       	adc	r25, r25
    2f88:	0a 94       	dec	r0
    2f8a:	e2 f7       	brpl	.-8      	; 0x2f84 <DIO_voidSetPinDir+0x10c>
    2f8c:	84 2b       	or	r24, r20
    2f8e:	8c 93       	st	X, r24
    2f90:	78 c0       	rjmp	.+240    	; 0x3082 <DIO_voidSetPinDir+0x20a>
					break;
				}
			}
			else if(Local_PinDir == Input){
    2f92:	8b 81       	ldd	r24, Y+3	; 0x03
    2f94:	88 23       	and	r24, r24
    2f96:	09 f0       	breq	.+2      	; 0x2f9a <DIO_voidSetPinDir+0x122>
    2f98:	74 c0       	rjmp	.+232    	; 0x3082 <DIO_voidSetPinDir+0x20a>
				switch(Local_PortName){
    2f9a:	89 81       	ldd	r24, Y+1	; 0x01
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	3d 83       	std	Y+5, r19	; 0x05
    2fa2:	2c 83       	std	Y+4, r18	; 0x04
    2fa4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa6:	9d 81       	ldd	r25, Y+5	; 0x05
    2fa8:	82 30       	cpi	r24, 0x02	; 2
    2faa:	91 05       	cpc	r25, r1
    2fac:	61 f1       	breq	.+88     	; 0x3006 <DIO_voidSetPinDir+0x18e>
    2fae:	2c 81       	ldd	r18, Y+4	; 0x04
    2fb0:	3d 81       	ldd	r19, Y+5	; 0x05
    2fb2:	23 30       	cpi	r18, 0x03	; 3
    2fb4:	31 05       	cpc	r19, r1
    2fb6:	34 f4       	brge	.+12     	; 0x2fc4 <DIO_voidSetPinDir+0x14c>
    2fb8:	8c 81       	ldd	r24, Y+4	; 0x04
    2fba:	9d 81       	ldd	r25, Y+5	; 0x05
    2fbc:	81 30       	cpi	r24, 0x01	; 1
    2fbe:	91 05       	cpc	r25, r1
    2fc0:	69 f0       	breq	.+26     	; 0x2fdc <DIO_voidSetPinDir+0x164>
    2fc2:	5f c0       	rjmp	.+190    	; 0x3082 <DIO_voidSetPinDir+0x20a>
    2fc4:	2c 81       	ldd	r18, Y+4	; 0x04
    2fc6:	3d 81       	ldd	r19, Y+5	; 0x05
    2fc8:	23 30       	cpi	r18, 0x03	; 3
    2fca:	31 05       	cpc	r19, r1
    2fcc:	89 f1       	breq	.+98     	; 0x3030 <DIO_voidSetPinDir+0x1b8>
    2fce:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd0:	9d 81       	ldd	r25, Y+5	; 0x05
    2fd2:	84 30       	cpi	r24, 0x04	; 4
    2fd4:	91 05       	cpc	r25, r1
    2fd6:	09 f4       	brne	.+2      	; 0x2fda <DIO_voidSetPinDir+0x162>
    2fd8:	40 c0       	rjmp	.+128    	; 0x305a <DIO_voidSetPinDir+0x1e2>
    2fda:	53 c0       	rjmp	.+166    	; 0x3082 <DIO_voidSetPinDir+0x20a>
				case DIO_PortA:
					Clear_Bit(DIO_DDRA,Local_PinNumber);
    2fdc:	aa e3       	ldi	r26, 0x3A	; 58
    2fde:	b0 e0       	ldi	r27, 0x00	; 0
    2fe0:	ea e3       	ldi	r30, 0x3A	; 58
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	80 81       	ld	r24, Z
    2fe6:	48 2f       	mov	r20, r24
    2fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fea:	28 2f       	mov	r18, r24
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	02 2e       	mov	r0, r18
    2ff4:	02 c0       	rjmp	.+4      	; 0x2ffa <DIO_voidSetPinDir+0x182>
    2ff6:	88 0f       	add	r24, r24
    2ff8:	99 1f       	adc	r25, r25
    2ffa:	0a 94       	dec	r0
    2ffc:	e2 f7       	brpl	.-8      	; 0x2ff6 <DIO_voidSetPinDir+0x17e>
    2ffe:	80 95       	com	r24
    3000:	84 23       	and	r24, r20
    3002:	8c 93       	st	X, r24
    3004:	3e c0       	rjmp	.+124    	; 0x3082 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortB:
					Clear_Bit(DIO_DDRB,Local_PinNumber);
    3006:	a7 e3       	ldi	r26, 0x37	; 55
    3008:	b0 e0       	ldi	r27, 0x00	; 0
    300a:	e7 e3       	ldi	r30, 0x37	; 55
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	80 81       	ld	r24, Z
    3010:	48 2f       	mov	r20, r24
    3012:	8a 81       	ldd	r24, Y+2	; 0x02
    3014:	28 2f       	mov	r18, r24
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	02 2e       	mov	r0, r18
    301e:	02 c0       	rjmp	.+4      	; 0x3024 <DIO_voidSetPinDir+0x1ac>
    3020:	88 0f       	add	r24, r24
    3022:	99 1f       	adc	r25, r25
    3024:	0a 94       	dec	r0
    3026:	e2 f7       	brpl	.-8      	; 0x3020 <DIO_voidSetPinDir+0x1a8>
    3028:	80 95       	com	r24
    302a:	84 23       	and	r24, r20
    302c:	8c 93       	st	X, r24
    302e:	29 c0       	rjmp	.+82     	; 0x3082 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortC:
					Clear_Bit(DIO_DDRC,Local_PinNumber);
    3030:	a4 e3       	ldi	r26, 0x34	; 52
    3032:	b0 e0       	ldi	r27, 0x00	; 0
    3034:	e4 e3       	ldi	r30, 0x34	; 52
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	80 81       	ld	r24, Z
    303a:	48 2f       	mov	r20, r24
    303c:	8a 81       	ldd	r24, Y+2	; 0x02
    303e:	28 2f       	mov	r18, r24
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	02 2e       	mov	r0, r18
    3048:	02 c0       	rjmp	.+4      	; 0x304e <DIO_voidSetPinDir+0x1d6>
    304a:	88 0f       	add	r24, r24
    304c:	99 1f       	adc	r25, r25
    304e:	0a 94       	dec	r0
    3050:	e2 f7       	brpl	.-8      	; 0x304a <DIO_voidSetPinDir+0x1d2>
    3052:	80 95       	com	r24
    3054:	84 23       	and	r24, r20
    3056:	8c 93       	st	X, r24
    3058:	14 c0       	rjmp	.+40     	; 0x3082 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortD:
					Clear_Bit(DIO_DDRD,Local_PinNumber);
    305a:	a1 e3       	ldi	r26, 0x31	; 49
    305c:	b0 e0       	ldi	r27, 0x00	; 0
    305e:	e1 e3       	ldi	r30, 0x31	; 49
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	80 81       	ld	r24, Z
    3064:	48 2f       	mov	r20, r24
    3066:	8a 81       	ldd	r24, Y+2	; 0x02
    3068:	28 2f       	mov	r18, r24
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	02 2e       	mov	r0, r18
    3072:	02 c0       	rjmp	.+4      	; 0x3078 <DIO_voidSetPinDir+0x200>
    3074:	88 0f       	add	r24, r24
    3076:	99 1f       	adc	r25, r25
    3078:	0a 94       	dec	r0
    307a:	e2 f7       	brpl	.-8      	; 0x3074 <DIO_voidSetPinDir+0x1fc>
    307c:	80 95       	com	r24
    307e:	84 23       	and	r24, r20
    3080:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
    3082:	27 96       	adiw	r28, 0x07	; 7
    3084:	0f b6       	in	r0, 0x3f	; 63
    3086:	f8 94       	cli
    3088:	de bf       	out	0x3e, r29	; 62
    308a:	0f be       	out	0x3f, r0	; 63
    308c:	cd bf       	out	0x3d, r28	; 61
    308e:	cf 91       	pop	r28
    3090:	df 91       	pop	r29
    3092:	08 95       	ret

00003094 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Local_PortName,u8 Local_PinNumber,u8 Local_PinValue){
    3094:	df 93       	push	r29
    3096:	cf 93       	push	r28
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
    309c:	27 97       	sbiw	r28, 0x07	; 7
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	cd bf       	out	0x3d, r28	; 61
    30a8:	89 83       	std	Y+1, r24	; 0x01
    30aa:	6a 83       	std	Y+2, r22	; 0x02
    30ac:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	85 30       	cpi	r24, 0x05	; 5
    30b2:	08 f0       	brcs	.+2      	; 0x30b6 <DIO_voidSetPinValue+0x22>
    30b4:	f4 c0       	rjmp	.+488    	; 0x329e <DIO_voidSetPinValue+0x20a>
    30b6:	89 81       	ldd	r24, Y+1	; 0x01
    30b8:	88 23       	and	r24, r24
    30ba:	09 f4       	brne	.+2      	; 0x30be <DIO_voidSetPinValue+0x2a>
    30bc:	f0 c0       	rjmp	.+480    	; 0x329e <DIO_voidSetPinValue+0x20a>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    30be:	8a 81       	ldd	r24, Y+2	; 0x02
    30c0:	88 30       	cpi	r24, 0x08	; 8
    30c2:	08 f0       	brcs	.+2      	; 0x30c6 <DIO_voidSetPinValue+0x32>
    30c4:	ec c0       	rjmp	.+472    	; 0x329e <DIO_voidSetPinValue+0x20a>
			if(Local_PinValue == High){
    30c6:	8b 81       	ldd	r24, Y+3	; 0x03
    30c8:	81 30       	cpi	r24, 0x01	; 1
    30ca:	09 f0       	breq	.+2      	; 0x30ce <DIO_voidSetPinValue+0x3a>
    30cc:	70 c0       	rjmp	.+224    	; 0x31ae <DIO_voidSetPinValue+0x11a>
				switch(Local_PortName){
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	28 2f       	mov	r18, r24
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	3f 83       	std	Y+7, r19	; 0x07
    30d6:	2e 83       	std	Y+6, r18	; 0x06
    30d8:	8e 81       	ldd	r24, Y+6	; 0x06
    30da:	9f 81       	ldd	r25, Y+7	; 0x07
    30dc:	82 30       	cpi	r24, 0x02	; 2
    30de:	91 05       	cpc	r25, r1
    30e0:	51 f1       	breq	.+84     	; 0x3136 <DIO_voidSetPinValue+0xa2>
    30e2:	2e 81       	ldd	r18, Y+6	; 0x06
    30e4:	3f 81       	ldd	r19, Y+7	; 0x07
    30e6:	23 30       	cpi	r18, 0x03	; 3
    30e8:	31 05       	cpc	r19, r1
    30ea:	34 f4       	brge	.+12     	; 0x30f8 <DIO_voidSetPinValue+0x64>
    30ec:	8e 81       	ldd	r24, Y+6	; 0x06
    30ee:	9f 81       	ldd	r25, Y+7	; 0x07
    30f0:	81 30       	cpi	r24, 0x01	; 1
    30f2:	91 05       	cpc	r25, r1
    30f4:	61 f0       	breq	.+24     	; 0x310e <DIO_voidSetPinValue+0x7a>
    30f6:	d3 c0       	rjmp	.+422    	; 0x329e <DIO_voidSetPinValue+0x20a>
    30f8:	2e 81       	ldd	r18, Y+6	; 0x06
    30fa:	3f 81       	ldd	r19, Y+7	; 0x07
    30fc:	23 30       	cpi	r18, 0x03	; 3
    30fe:	31 05       	cpc	r19, r1
    3100:	71 f1       	breq	.+92     	; 0x315e <DIO_voidSetPinValue+0xca>
    3102:	8e 81       	ldd	r24, Y+6	; 0x06
    3104:	9f 81       	ldd	r25, Y+7	; 0x07
    3106:	84 30       	cpi	r24, 0x04	; 4
    3108:	91 05       	cpc	r25, r1
    310a:	e9 f1       	breq	.+122    	; 0x3186 <DIO_voidSetPinValue+0xf2>
    310c:	c8 c0       	rjmp	.+400    	; 0x329e <DIO_voidSetPinValue+0x20a>
				case DIO_PortA:
					Set_Bit(DIO_PORTA,Local_PinNumber);
    310e:	ab e3       	ldi	r26, 0x3B	; 59
    3110:	b0 e0       	ldi	r27, 0x00	; 0
    3112:	eb e3       	ldi	r30, 0x3B	; 59
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	80 81       	ld	r24, Z
    3118:	48 2f       	mov	r20, r24
    311a:	8a 81       	ldd	r24, Y+2	; 0x02
    311c:	28 2f       	mov	r18, r24
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	02 2e       	mov	r0, r18
    3126:	02 c0       	rjmp	.+4      	; 0x312c <DIO_voidSetPinValue+0x98>
    3128:	88 0f       	add	r24, r24
    312a:	99 1f       	adc	r25, r25
    312c:	0a 94       	dec	r0
    312e:	e2 f7       	brpl	.-8      	; 0x3128 <DIO_voidSetPinValue+0x94>
    3130:	84 2b       	or	r24, r20
    3132:	8c 93       	st	X, r24
    3134:	b4 c0       	rjmp	.+360    	; 0x329e <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortB:
					Set_Bit(DIO_PORTB,Local_PinNumber);
    3136:	a8 e3       	ldi	r26, 0x38	; 56
    3138:	b0 e0       	ldi	r27, 0x00	; 0
    313a:	e8 e3       	ldi	r30, 0x38	; 56
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	80 81       	ld	r24, Z
    3140:	48 2f       	mov	r20, r24
    3142:	8a 81       	ldd	r24, Y+2	; 0x02
    3144:	28 2f       	mov	r18, r24
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	02 2e       	mov	r0, r18
    314e:	02 c0       	rjmp	.+4      	; 0x3154 <DIO_voidSetPinValue+0xc0>
    3150:	88 0f       	add	r24, r24
    3152:	99 1f       	adc	r25, r25
    3154:	0a 94       	dec	r0
    3156:	e2 f7       	brpl	.-8      	; 0x3150 <DIO_voidSetPinValue+0xbc>
    3158:	84 2b       	or	r24, r20
    315a:	8c 93       	st	X, r24
    315c:	a0 c0       	rjmp	.+320    	; 0x329e <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortC:
					Set_Bit(DIO_PORTC,Local_PinNumber);
    315e:	a5 e3       	ldi	r26, 0x35	; 53
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	e5 e3       	ldi	r30, 0x35	; 53
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
    3168:	48 2f       	mov	r20, r24
    316a:	8a 81       	ldd	r24, Y+2	; 0x02
    316c:	28 2f       	mov	r18, r24
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	02 2e       	mov	r0, r18
    3176:	02 c0       	rjmp	.+4      	; 0x317c <DIO_voidSetPinValue+0xe8>
    3178:	88 0f       	add	r24, r24
    317a:	99 1f       	adc	r25, r25
    317c:	0a 94       	dec	r0
    317e:	e2 f7       	brpl	.-8      	; 0x3178 <DIO_voidSetPinValue+0xe4>
    3180:	84 2b       	or	r24, r20
    3182:	8c 93       	st	X, r24
    3184:	8c c0       	rjmp	.+280    	; 0x329e <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortD:
					Set_Bit(DIO_PORTD,Local_PinNumber);
    3186:	a2 e3       	ldi	r26, 0x32	; 50
    3188:	b0 e0       	ldi	r27, 0x00	; 0
    318a:	e2 e3       	ldi	r30, 0x32	; 50
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	80 81       	ld	r24, Z
    3190:	48 2f       	mov	r20, r24
    3192:	8a 81       	ldd	r24, Y+2	; 0x02
    3194:	28 2f       	mov	r18, r24
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	02 2e       	mov	r0, r18
    319e:	02 c0       	rjmp	.+4      	; 0x31a4 <DIO_voidSetPinValue+0x110>
    31a0:	88 0f       	add	r24, r24
    31a2:	99 1f       	adc	r25, r25
    31a4:	0a 94       	dec	r0
    31a6:	e2 f7       	brpl	.-8      	; 0x31a0 <DIO_voidSetPinValue+0x10c>
    31a8:	84 2b       	or	r24, r20
    31aa:	8c 93       	st	X, r24
    31ac:	78 c0       	rjmp	.+240    	; 0x329e <DIO_voidSetPinValue+0x20a>
					break;
				}
			}
			else if(Local_PinValue == Low){
    31ae:	8b 81       	ldd	r24, Y+3	; 0x03
    31b0:	88 23       	and	r24, r24
    31b2:	09 f0       	breq	.+2      	; 0x31b6 <DIO_voidSetPinValue+0x122>
    31b4:	74 c0       	rjmp	.+232    	; 0x329e <DIO_voidSetPinValue+0x20a>
				switch(Local_PortName){
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    31b8:	28 2f       	mov	r18, r24
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	3d 83       	std	Y+5, r19	; 0x05
    31be:	2c 83       	std	Y+4, r18	; 0x04
    31c0:	8c 81       	ldd	r24, Y+4	; 0x04
    31c2:	9d 81       	ldd	r25, Y+5	; 0x05
    31c4:	82 30       	cpi	r24, 0x02	; 2
    31c6:	91 05       	cpc	r25, r1
    31c8:	61 f1       	breq	.+88     	; 0x3222 <DIO_voidSetPinValue+0x18e>
    31ca:	2c 81       	ldd	r18, Y+4	; 0x04
    31cc:	3d 81       	ldd	r19, Y+5	; 0x05
    31ce:	23 30       	cpi	r18, 0x03	; 3
    31d0:	31 05       	cpc	r19, r1
    31d2:	34 f4       	brge	.+12     	; 0x31e0 <DIO_voidSetPinValue+0x14c>
    31d4:	8c 81       	ldd	r24, Y+4	; 0x04
    31d6:	9d 81       	ldd	r25, Y+5	; 0x05
    31d8:	81 30       	cpi	r24, 0x01	; 1
    31da:	91 05       	cpc	r25, r1
    31dc:	69 f0       	breq	.+26     	; 0x31f8 <DIO_voidSetPinValue+0x164>
    31de:	5f c0       	rjmp	.+190    	; 0x329e <DIO_voidSetPinValue+0x20a>
    31e0:	2c 81       	ldd	r18, Y+4	; 0x04
    31e2:	3d 81       	ldd	r19, Y+5	; 0x05
    31e4:	23 30       	cpi	r18, 0x03	; 3
    31e6:	31 05       	cpc	r19, r1
    31e8:	89 f1       	breq	.+98     	; 0x324c <DIO_voidSetPinValue+0x1b8>
    31ea:	8c 81       	ldd	r24, Y+4	; 0x04
    31ec:	9d 81       	ldd	r25, Y+5	; 0x05
    31ee:	84 30       	cpi	r24, 0x04	; 4
    31f0:	91 05       	cpc	r25, r1
    31f2:	09 f4       	brne	.+2      	; 0x31f6 <DIO_voidSetPinValue+0x162>
    31f4:	40 c0       	rjmp	.+128    	; 0x3276 <DIO_voidSetPinValue+0x1e2>
    31f6:	53 c0       	rjmp	.+166    	; 0x329e <DIO_voidSetPinValue+0x20a>
				case DIO_PortA:
					Clear_Bit(DIO_PORTA,Local_PinNumber);
    31f8:	ab e3       	ldi	r26, 0x3B	; 59
    31fa:	b0 e0       	ldi	r27, 0x00	; 0
    31fc:	eb e3       	ldi	r30, 0x3B	; 59
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	80 81       	ld	r24, Z
    3202:	48 2f       	mov	r20, r24
    3204:	8a 81       	ldd	r24, Y+2	; 0x02
    3206:	28 2f       	mov	r18, r24
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	02 2e       	mov	r0, r18
    3210:	02 c0       	rjmp	.+4      	; 0x3216 <DIO_voidSetPinValue+0x182>
    3212:	88 0f       	add	r24, r24
    3214:	99 1f       	adc	r25, r25
    3216:	0a 94       	dec	r0
    3218:	e2 f7       	brpl	.-8      	; 0x3212 <DIO_voidSetPinValue+0x17e>
    321a:	80 95       	com	r24
    321c:	84 23       	and	r24, r20
    321e:	8c 93       	st	X, r24
    3220:	3e c0       	rjmp	.+124    	; 0x329e <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortB:
					Clear_Bit(DIO_PORTB,Local_PinNumber);
    3222:	a8 e3       	ldi	r26, 0x38	; 56
    3224:	b0 e0       	ldi	r27, 0x00	; 0
    3226:	e8 e3       	ldi	r30, 0x38	; 56
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	80 81       	ld	r24, Z
    322c:	48 2f       	mov	r20, r24
    322e:	8a 81       	ldd	r24, Y+2	; 0x02
    3230:	28 2f       	mov	r18, r24
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	02 2e       	mov	r0, r18
    323a:	02 c0       	rjmp	.+4      	; 0x3240 <DIO_voidSetPinValue+0x1ac>
    323c:	88 0f       	add	r24, r24
    323e:	99 1f       	adc	r25, r25
    3240:	0a 94       	dec	r0
    3242:	e2 f7       	brpl	.-8      	; 0x323c <DIO_voidSetPinValue+0x1a8>
    3244:	80 95       	com	r24
    3246:	84 23       	and	r24, r20
    3248:	8c 93       	st	X, r24
    324a:	29 c0       	rjmp	.+82     	; 0x329e <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortC:
					Clear_Bit(DIO_PORTC,Local_PinNumber);
    324c:	a5 e3       	ldi	r26, 0x35	; 53
    324e:	b0 e0       	ldi	r27, 0x00	; 0
    3250:	e5 e3       	ldi	r30, 0x35	; 53
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	80 81       	ld	r24, Z
    3256:	48 2f       	mov	r20, r24
    3258:	8a 81       	ldd	r24, Y+2	; 0x02
    325a:	28 2f       	mov	r18, r24
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	02 2e       	mov	r0, r18
    3264:	02 c0       	rjmp	.+4      	; 0x326a <DIO_voidSetPinValue+0x1d6>
    3266:	88 0f       	add	r24, r24
    3268:	99 1f       	adc	r25, r25
    326a:	0a 94       	dec	r0
    326c:	e2 f7       	brpl	.-8      	; 0x3266 <DIO_voidSetPinValue+0x1d2>
    326e:	80 95       	com	r24
    3270:	84 23       	and	r24, r20
    3272:	8c 93       	st	X, r24
    3274:	14 c0       	rjmp	.+40     	; 0x329e <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortD:
					Clear_Bit(DIO_PORTD,Local_PinNumber);
    3276:	a2 e3       	ldi	r26, 0x32	; 50
    3278:	b0 e0       	ldi	r27, 0x00	; 0
    327a:	e2 e3       	ldi	r30, 0x32	; 50
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	80 81       	ld	r24, Z
    3280:	48 2f       	mov	r20, r24
    3282:	8a 81       	ldd	r24, Y+2	; 0x02
    3284:	28 2f       	mov	r18, r24
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	02 2e       	mov	r0, r18
    328e:	02 c0       	rjmp	.+4      	; 0x3294 <DIO_voidSetPinValue+0x200>
    3290:	88 0f       	add	r24, r24
    3292:	99 1f       	adc	r25, r25
    3294:	0a 94       	dec	r0
    3296:	e2 f7       	brpl	.-8      	; 0x3290 <DIO_voidSetPinValue+0x1fc>
    3298:	80 95       	com	r24
    329a:	84 23       	and	r24, r20
    329c:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
    329e:	27 96       	adiw	r28, 0x07	; 7
    32a0:	0f b6       	in	r0, 0x3f	; 63
    32a2:	f8 94       	cli
    32a4:	de bf       	out	0x3e, r29	; 62
    32a6:	0f be       	out	0x3f, r0	; 63
    32a8:	cd bf       	out	0x3d, r28	; 61
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	08 95       	ret

000032b0 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Local_PortName,u8 Local_PinNumber){
    32b0:	df 93       	push	r29
    32b2:	cf 93       	push	r28
    32b4:	00 d0       	rcall	.+0      	; 0x32b6 <DIO_u8GetPinValue+0x6>
    32b6:	00 d0       	rcall	.+0      	; 0x32b8 <DIO_u8GetPinValue+0x8>
    32b8:	0f 92       	push	r0
    32ba:	cd b7       	in	r28, 0x3d	; 61
    32bc:	de b7       	in	r29, 0x3e	; 62
    32be:	89 83       	std	Y+1, r24	; 0x01
    32c0:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    32c2:	89 81       	ldd	r24, Y+1	; 0x01
    32c4:	85 30       	cpi	r24, 0x05	; 5
    32c6:	08 f0       	brcs	.+2      	; 0x32ca <DIO_u8GetPinValue+0x1a>
    32c8:	74 c0       	rjmp	.+232    	; 0x33b2 <DIO_u8GetPinValue+0x102>
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	88 23       	and	r24, r24
    32ce:	09 f4       	brne	.+2      	; 0x32d2 <DIO_u8GetPinValue+0x22>
    32d0:	70 c0       	rjmp	.+224    	; 0x33b2 <DIO_u8GetPinValue+0x102>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    32d2:	8a 81       	ldd	r24, Y+2	; 0x02
    32d4:	88 30       	cpi	r24, 0x08	; 8
    32d6:	08 f0       	brcs	.+2      	; 0x32da <DIO_u8GetPinValue+0x2a>
    32d8:	6c c0       	rjmp	.+216    	; 0x33b2 <DIO_u8GetPinValue+0x102>
			switch(Local_PortName){
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	28 2f       	mov	r18, r24
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	3d 83       	std	Y+5, r19	; 0x05
    32e2:	2c 83       	std	Y+4, r18	; 0x04
    32e4:	4c 81       	ldd	r20, Y+4	; 0x04
    32e6:	5d 81       	ldd	r21, Y+5	; 0x05
    32e8:	42 30       	cpi	r20, 0x02	; 2
    32ea:	51 05       	cpc	r21, r1
    32ec:	49 f1       	breq	.+82     	; 0x3340 <DIO_u8GetPinValue+0x90>
    32ee:	8c 81       	ldd	r24, Y+4	; 0x04
    32f0:	9d 81       	ldd	r25, Y+5	; 0x05
    32f2:	83 30       	cpi	r24, 0x03	; 3
    32f4:	91 05       	cpc	r25, r1
    32f6:	34 f4       	brge	.+12     	; 0x3304 <DIO_u8GetPinValue+0x54>
    32f8:	2c 81       	ldd	r18, Y+4	; 0x04
    32fa:	3d 81       	ldd	r19, Y+5	; 0x05
    32fc:	21 30       	cpi	r18, 0x01	; 1
    32fe:	31 05       	cpc	r19, r1
    3300:	61 f0       	breq	.+24     	; 0x331a <DIO_u8GetPinValue+0x6a>
    3302:	57 c0       	rjmp	.+174    	; 0x33b2 <DIO_u8GetPinValue+0x102>
    3304:	4c 81       	ldd	r20, Y+4	; 0x04
    3306:	5d 81       	ldd	r21, Y+5	; 0x05
    3308:	43 30       	cpi	r20, 0x03	; 3
    330a:	51 05       	cpc	r21, r1
    330c:	61 f1       	breq	.+88     	; 0x3366 <DIO_u8GetPinValue+0xb6>
    330e:	8c 81       	ldd	r24, Y+4	; 0x04
    3310:	9d 81       	ldd	r25, Y+5	; 0x05
    3312:	84 30       	cpi	r24, 0x04	; 4
    3314:	91 05       	cpc	r25, r1
    3316:	d1 f1       	breq	.+116    	; 0x338c <DIO_u8GetPinValue+0xdc>
    3318:	4c c0       	rjmp	.+152    	; 0x33b2 <DIO_u8GetPinValue+0x102>
			case DIO_PortA:
				return Get_Bit(DIO_PINA,Local_PinNumber);
    331a:	e9 e3       	ldi	r30, 0x39	; 57
    331c:	f0 e0       	ldi	r31, 0x00	; 0
    331e:	80 81       	ld	r24, Z
    3320:	28 2f       	mov	r18, r24
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	8a 81       	ldd	r24, Y+2	; 0x02
    3326:	88 2f       	mov	r24, r24
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	a9 01       	movw	r20, r18
    332c:	02 c0       	rjmp	.+4      	; 0x3332 <DIO_u8GetPinValue+0x82>
    332e:	55 95       	asr	r21
    3330:	47 95       	ror	r20
    3332:	8a 95       	dec	r24
    3334:	e2 f7       	brpl	.-8      	; 0x332e <DIO_u8GetPinValue+0x7e>
    3336:	ca 01       	movw	r24, r20
    3338:	58 2f       	mov	r21, r24
    333a:	51 70       	andi	r21, 0x01	; 1
    333c:	5b 83       	std	Y+3, r21	; 0x03
    333e:	3b c0       	rjmp	.+118    	; 0x33b6 <DIO_u8GetPinValue+0x106>
			case DIO_PortB:
				return Get_Bit(DIO_PINB,Local_PinNumber);
    3340:	e6 e3       	ldi	r30, 0x36	; 54
    3342:	f0 e0       	ldi	r31, 0x00	; 0
    3344:	80 81       	ld	r24, Z
    3346:	28 2f       	mov	r18, r24
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	8a 81       	ldd	r24, Y+2	; 0x02
    334c:	88 2f       	mov	r24, r24
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	a9 01       	movw	r20, r18
    3352:	02 c0       	rjmp	.+4      	; 0x3358 <DIO_u8GetPinValue+0xa8>
    3354:	55 95       	asr	r21
    3356:	47 95       	ror	r20
    3358:	8a 95       	dec	r24
    335a:	e2 f7       	brpl	.-8      	; 0x3354 <DIO_u8GetPinValue+0xa4>
    335c:	ca 01       	movw	r24, r20
    335e:	58 2f       	mov	r21, r24
    3360:	51 70       	andi	r21, 0x01	; 1
    3362:	5b 83       	std	Y+3, r21	; 0x03
    3364:	28 c0       	rjmp	.+80     	; 0x33b6 <DIO_u8GetPinValue+0x106>
			case DIO_PortC:
				return Get_Bit(DIO_PINC,Local_PinNumber);
    3366:	e3 e3       	ldi	r30, 0x33	; 51
    3368:	f0 e0       	ldi	r31, 0x00	; 0
    336a:	80 81       	ld	r24, Z
    336c:	28 2f       	mov	r18, r24
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	8a 81       	ldd	r24, Y+2	; 0x02
    3372:	88 2f       	mov	r24, r24
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	a9 01       	movw	r20, r18
    3378:	02 c0       	rjmp	.+4      	; 0x337e <DIO_u8GetPinValue+0xce>
    337a:	55 95       	asr	r21
    337c:	47 95       	ror	r20
    337e:	8a 95       	dec	r24
    3380:	e2 f7       	brpl	.-8      	; 0x337a <DIO_u8GetPinValue+0xca>
    3382:	ca 01       	movw	r24, r20
    3384:	58 2f       	mov	r21, r24
    3386:	51 70       	andi	r21, 0x01	; 1
    3388:	5b 83       	std	Y+3, r21	; 0x03
    338a:	15 c0       	rjmp	.+42     	; 0x33b6 <DIO_u8GetPinValue+0x106>
			case DIO_PortD:
				return Get_Bit(DIO_PIND,Local_PinNumber);
    338c:	e0 e3       	ldi	r30, 0x30	; 48
    338e:	f0 e0       	ldi	r31, 0x00	; 0
    3390:	80 81       	ld	r24, Z
    3392:	28 2f       	mov	r18, r24
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	8a 81       	ldd	r24, Y+2	; 0x02
    3398:	88 2f       	mov	r24, r24
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	a9 01       	movw	r20, r18
    339e:	02 c0       	rjmp	.+4      	; 0x33a4 <DIO_u8GetPinValue+0xf4>
    33a0:	55 95       	asr	r21
    33a2:	47 95       	ror	r20
    33a4:	8a 95       	dec	r24
    33a6:	e2 f7       	brpl	.-8      	; 0x33a0 <DIO_u8GetPinValue+0xf0>
    33a8:	ca 01       	movw	r24, r20
    33aa:	58 2f       	mov	r21, r24
    33ac:	51 70       	andi	r21, 0x01	; 1
    33ae:	5b 83       	std	Y+3, r21	; 0x03
    33b0:	02 c0       	rjmp	.+4      	; 0x33b6 <DIO_u8GetPinValue+0x106>
			}
		}
	}
	return -1;
    33b2:	8f ef       	ldi	r24, 0xFF	; 255
    33b4:	8b 83       	std	Y+3, r24	; 0x03
    33b6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    33b8:	0f 90       	pop	r0
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	cf 91       	pop	r28
    33c4:	df 91       	pop	r29
    33c6:	08 95       	ret

000033c8 <DIO_voidTogglePin>:

void DIO_voidTogglePin(u8 Local_PortName,u8 Local_PinNumber){
    33c8:	df 93       	push	r29
    33ca:	cf 93       	push	r28
    33cc:	00 d0       	rcall	.+0      	; 0x33ce <DIO_voidTogglePin+0x6>
    33ce:	00 d0       	rcall	.+0      	; 0x33d0 <DIO_voidTogglePin+0x8>
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
    33d4:	89 83       	std	Y+1, r24	; 0x01
    33d6:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
    33da:	85 30       	cpi	r24, 0x05	; 5
    33dc:	08 f0       	brcs	.+2      	; 0x33e0 <DIO_voidTogglePin+0x18>
    33de:	77 c0       	rjmp	.+238    	; 0x34ce <DIO_voidTogglePin+0x106>
    33e0:	89 81       	ldd	r24, Y+1	; 0x01
    33e2:	88 23       	and	r24, r24
    33e4:	09 f4       	brne	.+2      	; 0x33e8 <DIO_voidTogglePin+0x20>
    33e6:	73 c0       	rjmp	.+230    	; 0x34ce <DIO_voidTogglePin+0x106>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    33e8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ea:	88 30       	cpi	r24, 0x08	; 8
    33ec:	08 f0       	brcs	.+2      	; 0x33f0 <DIO_voidTogglePin+0x28>
    33ee:	6f c0       	rjmp	.+222    	; 0x34ce <DIO_voidTogglePin+0x106>
			switch(Local_PortName){
    33f0:	89 81       	ldd	r24, Y+1	; 0x01
    33f2:	28 2f       	mov	r18, r24
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	3c 83       	std	Y+4, r19	; 0x04
    33f8:	2b 83       	std	Y+3, r18	; 0x03
    33fa:	8b 81       	ldd	r24, Y+3	; 0x03
    33fc:	9c 81       	ldd	r25, Y+4	; 0x04
    33fe:	82 30       	cpi	r24, 0x02	; 2
    3400:	91 05       	cpc	r25, r1
    3402:	51 f1       	breq	.+84     	; 0x3458 <DIO_voidTogglePin+0x90>
    3404:	2b 81       	ldd	r18, Y+3	; 0x03
    3406:	3c 81       	ldd	r19, Y+4	; 0x04
    3408:	23 30       	cpi	r18, 0x03	; 3
    340a:	31 05       	cpc	r19, r1
    340c:	34 f4       	brge	.+12     	; 0x341a <DIO_voidTogglePin+0x52>
    340e:	8b 81       	ldd	r24, Y+3	; 0x03
    3410:	9c 81       	ldd	r25, Y+4	; 0x04
    3412:	81 30       	cpi	r24, 0x01	; 1
    3414:	91 05       	cpc	r25, r1
    3416:	61 f0       	breq	.+24     	; 0x3430 <DIO_voidTogglePin+0x68>
    3418:	5a c0       	rjmp	.+180    	; 0x34ce <DIO_voidTogglePin+0x106>
    341a:	2b 81       	ldd	r18, Y+3	; 0x03
    341c:	3c 81       	ldd	r19, Y+4	; 0x04
    341e:	23 30       	cpi	r18, 0x03	; 3
    3420:	31 05       	cpc	r19, r1
    3422:	71 f1       	breq	.+92     	; 0x3480 <DIO_voidTogglePin+0xb8>
    3424:	8b 81       	ldd	r24, Y+3	; 0x03
    3426:	9c 81       	ldd	r25, Y+4	; 0x04
    3428:	84 30       	cpi	r24, 0x04	; 4
    342a:	91 05       	cpc	r25, r1
    342c:	e9 f1       	breq	.+122    	; 0x34a8 <DIO_voidTogglePin+0xe0>
    342e:	4f c0       	rjmp	.+158    	; 0x34ce <DIO_voidTogglePin+0x106>
			case DIO_PortA:
				Toggle_Bit(DIO_PORTA,Local_PinNumber);
    3430:	ab e3       	ldi	r26, 0x3B	; 59
    3432:	b0 e0       	ldi	r27, 0x00	; 0
    3434:	eb e3       	ldi	r30, 0x3B	; 59
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	80 81       	ld	r24, Z
    343a:	48 2f       	mov	r20, r24
    343c:	8a 81       	ldd	r24, Y+2	; 0x02
    343e:	28 2f       	mov	r18, r24
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	02 2e       	mov	r0, r18
    3448:	02 c0       	rjmp	.+4      	; 0x344e <DIO_voidTogglePin+0x86>
    344a:	88 0f       	add	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	0a 94       	dec	r0
    3450:	e2 f7       	brpl	.-8      	; 0x344a <DIO_voidTogglePin+0x82>
    3452:	84 27       	eor	r24, r20
    3454:	8c 93       	st	X, r24
    3456:	3b c0       	rjmp	.+118    	; 0x34ce <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortB:
				Toggle_Bit(DIO_PORTB,Local_PinNumber);
    3458:	a8 e3       	ldi	r26, 0x38	; 56
    345a:	b0 e0       	ldi	r27, 0x00	; 0
    345c:	e8 e3       	ldi	r30, 0x38	; 56
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	80 81       	ld	r24, Z
    3462:	48 2f       	mov	r20, r24
    3464:	8a 81       	ldd	r24, Y+2	; 0x02
    3466:	28 2f       	mov	r18, r24
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	02 2e       	mov	r0, r18
    3470:	02 c0       	rjmp	.+4      	; 0x3476 <DIO_voidTogglePin+0xae>
    3472:	88 0f       	add	r24, r24
    3474:	99 1f       	adc	r25, r25
    3476:	0a 94       	dec	r0
    3478:	e2 f7       	brpl	.-8      	; 0x3472 <DIO_voidTogglePin+0xaa>
    347a:	84 27       	eor	r24, r20
    347c:	8c 93       	st	X, r24
    347e:	27 c0       	rjmp	.+78     	; 0x34ce <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortC:
				Toggle_Bit(DIO_PORTC,Local_PinNumber);
    3480:	a5 e3       	ldi	r26, 0x35	; 53
    3482:	b0 e0       	ldi	r27, 0x00	; 0
    3484:	e5 e3       	ldi	r30, 0x35	; 53
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	80 81       	ld	r24, Z
    348a:	48 2f       	mov	r20, r24
    348c:	8a 81       	ldd	r24, Y+2	; 0x02
    348e:	28 2f       	mov	r18, r24
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	02 2e       	mov	r0, r18
    3498:	02 c0       	rjmp	.+4      	; 0x349e <DIO_voidTogglePin+0xd6>
    349a:	88 0f       	add	r24, r24
    349c:	99 1f       	adc	r25, r25
    349e:	0a 94       	dec	r0
    34a0:	e2 f7       	brpl	.-8      	; 0x349a <DIO_voidTogglePin+0xd2>
    34a2:	84 27       	eor	r24, r20
    34a4:	8c 93       	st	X, r24
    34a6:	13 c0       	rjmp	.+38     	; 0x34ce <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortD:
				Toggle_Bit(DIO_PORTD,Local_PinNumber);
    34a8:	a2 e3       	ldi	r26, 0x32	; 50
    34aa:	b0 e0       	ldi	r27, 0x00	; 0
    34ac:	e2 e3       	ldi	r30, 0x32	; 50
    34ae:	f0 e0       	ldi	r31, 0x00	; 0
    34b0:	80 81       	ld	r24, Z
    34b2:	48 2f       	mov	r20, r24
    34b4:	8a 81       	ldd	r24, Y+2	; 0x02
    34b6:	28 2f       	mov	r18, r24
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	02 2e       	mov	r0, r18
    34c0:	02 c0       	rjmp	.+4      	; 0x34c6 <DIO_voidTogglePin+0xfe>
    34c2:	88 0f       	add	r24, r24
    34c4:	99 1f       	adc	r25, r25
    34c6:	0a 94       	dec	r0
    34c8:	e2 f7       	brpl	.-8      	; 0x34c2 <DIO_voidTogglePin+0xfa>
    34ca:	84 27       	eor	r24, r20
    34cc:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    34ce:	0f 90       	pop	r0
    34d0:	0f 90       	pop	r0
    34d2:	0f 90       	pop	r0
    34d4:	0f 90       	pop	r0
    34d6:	cf 91       	pop	r28
    34d8:	df 91       	pop	r29
    34da:	08 95       	ret

000034dc <DIO_voidSetPortDir>:

void DIO_voidSetPortDir(u8 Local_PortName,u8 Local_PortDir){
    34dc:	df 93       	push	r29
    34de:	cf 93       	push	r28
    34e0:	00 d0       	rcall	.+0      	; 0x34e2 <DIO_voidSetPortDir+0x6>
    34e2:	00 d0       	rcall	.+0      	; 0x34e4 <DIO_voidSetPortDir+0x8>
    34e4:	cd b7       	in	r28, 0x3d	; 61
    34e6:	de b7       	in	r29, 0x3e	; 62
    34e8:	89 83       	std	Y+1, r24	; 0x01
    34ea:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    34ec:	89 81       	ldd	r24, Y+1	; 0x01
    34ee:	85 30       	cpi	r24, 0x05	; 5
    34f0:	b0 f5       	brcc	.+108    	; 0x355e <DIO_voidSetPortDir+0x82>
    34f2:	89 81       	ldd	r24, Y+1	; 0x01
    34f4:	88 23       	and	r24, r24
    34f6:	99 f1       	breq	.+102    	; 0x355e <DIO_voidSetPortDir+0x82>
		switch(Local_PortName){
    34f8:	89 81       	ldd	r24, Y+1	; 0x01
    34fa:	28 2f       	mov	r18, r24
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	3c 83       	std	Y+4, r19	; 0x04
    3500:	2b 83       	std	Y+3, r18	; 0x03
    3502:	8b 81       	ldd	r24, Y+3	; 0x03
    3504:	9c 81       	ldd	r25, Y+4	; 0x04
    3506:	82 30       	cpi	r24, 0x02	; 2
    3508:	91 05       	cpc	r25, r1
    350a:	d9 f0       	breq	.+54     	; 0x3542 <DIO_voidSetPortDir+0x66>
    350c:	2b 81       	ldd	r18, Y+3	; 0x03
    350e:	3c 81       	ldd	r19, Y+4	; 0x04
    3510:	23 30       	cpi	r18, 0x03	; 3
    3512:	31 05       	cpc	r19, r1
    3514:	34 f4       	brge	.+12     	; 0x3522 <DIO_voidSetPortDir+0x46>
    3516:	8b 81       	ldd	r24, Y+3	; 0x03
    3518:	9c 81       	ldd	r25, Y+4	; 0x04
    351a:	81 30       	cpi	r24, 0x01	; 1
    351c:	91 05       	cpc	r25, r1
    351e:	61 f0       	breq	.+24     	; 0x3538 <DIO_voidSetPortDir+0x5c>
    3520:	1e c0       	rjmp	.+60     	; 0x355e <DIO_voidSetPortDir+0x82>
    3522:	2b 81       	ldd	r18, Y+3	; 0x03
    3524:	3c 81       	ldd	r19, Y+4	; 0x04
    3526:	23 30       	cpi	r18, 0x03	; 3
    3528:	31 05       	cpc	r19, r1
    352a:	81 f0       	breq	.+32     	; 0x354c <DIO_voidSetPortDir+0x70>
    352c:	8b 81       	ldd	r24, Y+3	; 0x03
    352e:	9c 81       	ldd	r25, Y+4	; 0x04
    3530:	84 30       	cpi	r24, 0x04	; 4
    3532:	91 05       	cpc	r25, r1
    3534:	81 f0       	breq	.+32     	; 0x3556 <DIO_voidSetPortDir+0x7a>
    3536:	13 c0       	rjmp	.+38     	; 0x355e <DIO_voidSetPortDir+0x82>
		case DIO_PortA:
			DIO_DDRA = Local_PortDir;
    3538:	ea e3       	ldi	r30, 0x3A	; 58
    353a:	f0 e0       	ldi	r31, 0x00	; 0
    353c:	8a 81       	ldd	r24, Y+2	; 0x02
    353e:	80 83       	st	Z, r24
    3540:	0e c0       	rjmp	.+28     	; 0x355e <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortB:
			DIO_DDRB = Local_PortDir;
    3542:	e7 e3       	ldi	r30, 0x37	; 55
    3544:	f0 e0       	ldi	r31, 0x00	; 0
    3546:	8a 81       	ldd	r24, Y+2	; 0x02
    3548:	80 83       	st	Z, r24
    354a:	09 c0       	rjmp	.+18     	; 0x355e <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortC:
			DIO_DDRC = Local_PortDir;
    354c:	e4 e3       	ldi	r30, 0x34	; 52
    354e:	f0 e0       	ldi	r31, 0x00	; 0
    3550:	8a 81       	ldd	r24, Y+2	; 0x02
    3552:	80 83       	st	Z, r24
    3554:	04 c0       	rjmp	.+8      	; 0x355e <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortD:
			DIO_DDRD = Local_PortDir;
    3556:	e1 e3       	ldi	r30, 0x31	; 49
    3558:	f0 e0       	ldi	r31, 0x00	; 0
    355a:	8a 81       	ldd	r24, Y+2	; 0x02
    355c:	80 83       	st	Z, r24
			break;
		}
	}
}
    355e:	0f 90       	pop	r0
    3560:	0f 90       	pop	r0
    3562:	0f 90       	pop	r0
    3564:	0f 90       	pop	r0
    3566:	cf 91       	pop	r28
    3568:	df 91       	pop	r29
    356a:	08 95       	ret

0000356c <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Local_PortName,u8 Local_PortValue){
    356c:	df 93       	push	r29
    356e:	cf 93       	push	r28
    3570:	00 d0       	rcall	.+0      	; 0x3572 <DIO_voidSetPortValue+0x6>
    3572:	00 d0       	rcall	.+0      	; 0x3574 <DIO_voidSetPortValue+0x8>
    3574:	cd b7       	in	r28, 0x3d	; 61
    3576:	de b7       	in	r29, 0x3e	; 62
    3578:	89 83       	std	Y+1, r24	; 0x01
    357a:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    357c:	89 81       	ldd	r24, Y+1	; 0x01
    357e:	85 30       	cpi	r24, 0x05	; 5
    3580:	b0 f5       	brcc	.+108    	; 0x35ee <DIO_voidSetPortValue+0x82>
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	88 23       	and	r24, r24
    3586:	99 f1       	breq	.+102    	; 0x35ee <DIO_voidSetPortValue+0x82>
		switch(Local_PortName){
    3588:	89 81       	ldd	r24, Y+1	; 0x01
    358a:	28 2f       	mov	r18, r24
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	3c 83       	std	Y+4, r19	; 0x04
    3590:	2b 83       	std	Y+3, r18	; 0x03
    3592:	8b 81       	ldd	r24, Y+3	; 0x03
    3594:	9c 81       	ldd	r25, Y+4	; 0x04
    3596:	82 30       	cpi	r24, 0x02	; 2
    3598:	91 05       	cpc	r25, r1
    359a:	d9 f0       	breq	.+54     	; 0x35d2 <DIO_voidSetPortValue+0x66>
    359c:	2b 81       	ldd	r18, Y+3	; 0x03
    359e:	3c 81       	ldd	r19, Y+4	; 0x04
    35a0:	23 30       	cpi	r18, 0x03	; 3
    35a2:	31 05       	cpc	r19, r1
    35a4:	34 f4       	brge	.+12     	; 0x35b2 <DIO_voidSetPortValue+0x46>
    35a6:	8b 81       	ldd	r24, Y+3	; 0x03
    35a8:	9c 81       	ldd	r25, Y+4	; 0x04
    35aa:	81 30       	cpi	r24, 0x01	; 1
    35ac:	91 05       	cpc	r25, r1
    35ae:	61 f0       	breq	.+24     	; 0x35c8 <DIO_voidSetPortValue+0x5c>
    35b0:	1e c0       	rjmp	.+60     	; 0x35ee <DIO_voidSetPortValue+0x82>
    35b2:	2b 81       	ldd	r18, Y+3	; 0x03
    35b4:	3c 81       	ldd	r19, Y+4	; 0x04
    35b6:	23 30       	cpi	r18, 0x03	; 3
    35b8:	31 05       	cpc	r19, r1
    35ba:	81 f0       	breq	.+32     	; 0x35dc <DIO_voidSetPortValue+0x70>
    35bc:	8b 81       	ldd	r24, Y+3	; 0x03
    35be:	9c 81       	ldd	r25, Y+4	; 0x04
    35c0:	84 30       	cpi	r24, 0x04	; 4
    35c2:	91 05       	cpc	r25, r1
    35c4:	81 f0       	breq	.+32     	; 0x35e6 <DIO_voidSetPortValue+0x7a>
    35c6:	13 c0       	rjmp	.+38     	; 0x35ee <DIO_voidSetPortValue+0x82>
		case DIO_PortA:
			DIO_PORTA = Local_PortValue;
    35c8:	eb e3       	ldi	r30, 0x3B	; 59
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	8a 81       	ldd	r24, Y+2	; 0x02
    35ce:	80 83       	st	Z, r24
    35d0:	0e c0       	rjmp	.+28     	; 0x35ee <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortB:
			DIO_PORTB = Local_PortValue;
    35d2:	e8 e3       	ldi	r30, 0x38	; 56
    35d4:	f0 e0       	ldi	r31, 0x00	; 0
    35d6:	8a 81       	ldd	r24, Y+2	; 0x02
    35d8:	80 83       	st	Z, r24
    35da:	09 c0       	rjmp	.+18     	; 0x35ee <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortC:
			DIO_PORTC = Local_PortValue;
    35dc:	e5 e3       	ldi	r30, 0x35	; 53
    35de:	f0 e0       	ldi	r31, 0x00	; 0
    35e0:	8a 81       	ldd	r24, Y+2	; 0x02
    35e2:	80 83       	st	Z, r24
    35e4:	04 c0       	rjmp	.+8      	; 0x35ee <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortD:
			DIO_PORTD = Local_PortValue;
    35e6:	e2 e3       	ldi	r30, 0x32	; 50
    35e8:	f0 e0       	ldi	r31, 0x00	; 0
    35ea:	8a 81       	ldd	r24, Y+2	; 0x02
    35ec:	80 83       	st	Z, r24
			break;
		}
	}
}
    35ee:	0f 90       	pop	r0
    35f0:	0f 90       	pop	r0
    35f2:	0f 90       	pop	r0
    35f4:	0f 90       	pop	r0
    35f6:	cf 91       	pop	r28
    35f8:	df 91       	pop	r29
    35fa:	08 95       	ret

000035fc <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Local_PortName){
    35fc:	df 93       	push	r29
    35fe:	cf 93       	push	r28
    3600:	00 d0       	rcall	.+0      	; 0x3602 <DIO_u8GetPortValue+0x6>
    3602:	00 d0       	rcall	.+0      	; 0x3604 <DIO_u8GetPortValue+0x8>
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62
    3608:	89 83       	std	Y+1, r24	; 0x01
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    360a:	89 81       	ldd	r24, Y+1	; 0x01
    360c:	85 30       	cpi	r24, 0x05	; 5
    360e:	b8 f5       	brcc	.+110    	; 0x367e <DIO_u8GetPortValue+0x82>
    3610:	89 81       	ldd	r24, Y+1	; 0x01
    3612:	88 23       	and	r24, r24
    3614:	a1 f1       	breq	.+104    	; 0x367e <DIO_u8GetPortValue+0x82>
		switch(Local_PortName){
    3616:	89 81       	ldd	r24, Y+1	; 0x01
    3618:	28 2f       	mov	r18, r24
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	3c 83       	std	Y+4, r19	; 0x04
    361e:	2b 83       	std	Y+3, r18	; 0x03
    3620:	8b 81       	ldd	r24, Y+3	; 0x03
    3622:	9c 81       	ldd	r25, Y+4	; 0x04
    3624:	82 30       	cpi	r24, 0x02	; 2
    3626:	91 05       	cpc	r25, r1
    3628:	d9 f0       	breq	.+54     	; 0x3660 <DIO_u8GetPortValue+0x64>
    362a:	2b 81       	ldd	r18, Y+3	; 0x03
    362c:	3c 81       	ldd	r19, Y+4	; 0x04
    362e:	23 30       	cpi	r18, 0x03	; 3
    3630:	31 05       	cpc	r19, r1
    3632:	34 f4       	brge	.+12     	; 0x3640 <DIO_u8GetPortValue+0x44>
    3634:	8b 81       	ldd	r24, Y+3	; 0x03
    3636:	9c 81       	ldd	r25, Y+4	; 0x04
    3638:	81 30       	cpi	r24, 0x01	; 1
    363a:	91 05       	cpc	r25, r1
    363c:	61 f0       	breq	.+24     	; 0x3656 <DIO_u8GetPortValue+0x5a>
    363e:	1f c0       	rjmp	.+62     	; 0x367e <DIO_u8GetPortValue+0x82>
    3640:	2b 81       	ldd	r18, Y+3	; 0x03
    3642:	3c 81       	ldd	r19, Y+4	; 0x04
    3644:	23 30       	cpi	r18, 0x03	; 3
    3646:	31 05       	cpc	r19, r1
    3648:	81 f0       	breq	.+32     	; 0x366a <DIO_u8GetPortValue+0x6e>
    364a:	8b 81       	ldd	r24, Y+3	; 0x03
    364c:	9c 81       	ldd	r25, Y+4	; 0x04
    364e:	84 30       	cpi	r24, 0x04	; 4
    3650:	91 05       	cpc	r25, r1
    3652:	81 f0       	breq	.+32     	; 0x3674 <DIO_u8GetPortValue+0x78>
    3654:	14 c0       	rjmp	.+40     	; 0x367e <DIO_u8GetPortValue+0x82>
		case DIO_PortA:
			return DIO_PORTA;
    3656:	eb e3       	ldi	r30, 0x3B	; 59
    3658:	f0 e0       	ldi	r31, 0x00	; 0
    365a:	90 81       	ld	r25, Z
    365c:	9a 83       	std	Y+2, r25	; 0x02
    365e:	11 c0       	rjmp	.+34     	; 0x3682 <DIO_u8GetPortValue+0x86>
		case DIO_PortB:
			return DIO_PORTB;
    3660:	e8 e3       	ldi	r30, 0x38	; 56
    3662:	f0 e0       	ldi	r31, 0x00	; 0
    3664:	20 81       	ld	r18, Z
    3666:	2a 83       	std	Y+2, r18	; 0x02
    3668:	0c c0       	rjmp	.+24     	; 0x3682 <DIO_u8GetPortValue+0x86>
		case DIO_PortC:
			return DIO_PORTC;
    366a:	e5 e3       	ldi	r30, 0x35	; 53
    366c:	f0 e0       	ldi	r31, 0x00	; 0
    366e:	30 81       	ld	r19, Z
    3670:	3a 83       	std	Y+2, r19	; 0x02
    3672:	07 c0       	rjmp	.+14     	; 0x3682 <DIO_u8GetPortValue+0x86>
		case DIO_PortD:
			return DIO_PORTD;
    3674:	e2 e3       	ldi	r30, 0x32	; 50
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	80 81       	ld	r24, Z
    367a:	8a 83       	std	Y+2, r24	; 0x02
    367c:	02 c0       	rjmp	.+4      	; 0x3682 <DIO_u8GetPortValue+0x86>
		}
	}
	return -1;
    367e:	9f ef       	ldi	r25, 0xFF	; 255
    3680:	9a 83       	std	Y+2, r25	; 0x02
    3682:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3684:	0f 90       	pop	r0
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	0f 90       	pop	r0
    368c:	cf 91       	pop	r28
    368e:	df 91       	pop	r29
    3690:	08 95       	ret

00003692 <DIO_voidTogglePort>:

void DIO_voidTogglePort(u8 Local_PortName){
    3692:	df 93       	push	r29
    3694:	cf 93       	push	r28
    3696:	00 d0       	rcall	.+0      	; 0x3698 <DIO_voidTogglePort+0x6>
    3698:	0f 92       	push	r0
    369a:	cd b7       	in	r28, 0x3d	; 61
    369c:	de b7       	in	r29, 0x3e	; 62
    369e:	89 83       	std	Y+1, r24	; 0x01
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    36a0:	89 81       	ldd	r24, Y+1	; 0x01
    36a2:	85 30       	cpi	r24, 0x05	; 5
    36a4:	08 f0       	brcs	.+2      	; 0x36a8 <DIO_voidTogglePort+0x16>
    36a6:	43 c0       	rjmp	.+134    	; 0x372e <DIO_voidTogglePort+0x9c>
    36a8:	89 81       	ldd	r24, Y+1	; 0x01
    36aa:	88 23       	and	r24, r24
    36ac:	09 f4       	brne	.+2      	; 0x36b0 <DIO_voidTogglePort+0x1e>
    36ae:	3f c0       	rjmp	.+126    	; 0x372e <DIO_voidTogglePort+0x9c>
			switch(Local_PortName){
    36b0:	89 81       	ldd	r24, Y+1	; 0x01
    36b2:	28 2f       	mov	r18, r24
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	3b 83       	std	Y+3, r19	; 0x03
    36b8:	2a 83       	std	Y+2, r18	; 0x02
    36ba:	8a 81       	ldd	r24, Y+2	; 0x02
    36bc:	9b 81       	ldd	r25, Y+3	; 0x03
    36be:	82 30       	cpi	r24, 0x02	; 2
    36c0:	91 05       	cpc	r25, r1
    36c2:	f1 f0       	breq	.+60     	; 0x3700 <DIO_voidTogglePort+0x6e>
    36c4:	2a 81       	ldd	r18, Y+2	; 0x02
    36c6:	3b 81       	ldd	r19, Y+3	; 0x03
    36c8:	23 30       	cpi	r18, 0x03	; 3
    36ca:	31 05       	cpc	r19, r1
    36cc:	34 f4       	brge	.+12     	; 0x36da <DIO_voidTogglePort+0x48>
    36ce:	8a 81       	ldd	r24, Y+2	; 0x02
    36d0:	9b 81       	ldd	r25, Y+3	; 0x03
    36d2:	81 30       	cpi	r24, 0x01	; 1
    36d4:	91 05       	cpc	r25, r1
    36d6:	61 f0       	breq	.+24     	; 0x36f0 <DIO_voidTogglePort+0x5e>
    36d8:	2a c0       	rjmp	.+84     	; 0x372e <DIO_voidTogglePort+0x9c>
    36da:	2a 81       	ldd	r18, Y+2	; 0x02
    36dc:	3b 81       	ldd	r19, Y+3	; 0x03
    36de:	23 30       	cpi	r18, 0x03	; 3
    36e0:	31 05       	cpc	r19, r1
    36e2:	b1 f0       	breq	.+44     	; 0x3710 <DIO_voidTogglePort+0x7e>
    36e4:	8a 81       	ldd	r24, Y+2	; 0x02
    36e6:	9b 81       	ldd	r25, Y+3	; 0x03
    36e8:	84 30       	cpi	r24, 0x04	; 4
    36ea:	91 05       	cpc	r25, r1
    36ec:	c9 f0       	breq	.+50     	; 0x3720 <DIO_voidTogglePort+0x8e>
    36ee:	1f c0       	rjmp	.+62     	; 0x372e <DIO_voidTogglePort+0x9c>
			case DIO_PortA:
				DIO_PORTA ^= 0xFF;
    36f0:	ab e3       	ldi	r26, 0x3B	; 59
    36f2:	b0 e0       	ldi	r27, 0x00	; 0
    36f4:	eb e3       	ldi	r30, 0x3B	; 59
    36f6:	f0 e0       	ldi	r31, 0x00	; 0
    36f8:	80 81       	ld	r24, Z
    36fa:	80 95       	com	r24
    36fc:	8c 93       	st	X, r24
    36fe:	17 c0       	rjmp	.+46     	; 0x372e <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortB:
				DIO_PORTB ^= 0xFF;
    3700:	a8 e3       	ldi	r26, 0x38	; 56
    3702:	b0 e0       	ldi	r27, 0x00	; 0
    3704:	e8 e3       	ldi	r30, 0x38	; 56
    3706:	f0 e0       	ldi	r31, 0x00	; 0
    3708:	80 81       	ld	r24, Z
    370a:	80 95       	com	r24
    370c:	8c 93       	st	X, r24
    370e:	0f c0       	rjmp	.+30     	; 0x372e <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortC:
				DIO_PORTC ^= 0xFF;
    3710:	a5 e3       	ldi	r26, 0x35	; 53
    3712:	b0 e0       	ldi	r27, 0x00	; 0
    3714:	e5 e3       	ldi	r30, 0x35	; 53
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	80 81       	ld	r24, Z
    371a:	80 95       	com	r24
    371c:	8c 93       	st	X, r24
    371e:	07 c0       	rjmp	.+14     	; 0x372e <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortD:
				DIO_PORTD ^= 0xFF;
    3720:	a2 e3       	ldi	r26, 0x32	; 50
    3722:	b0 e0       	ldi	r27, 0x00	; 0
    3724:	e2 e3       	ldi	r30, 0x32	; 50
    3726:	f0 e0       	ldi	r31, 0x00	; 0
    3728:	80 81       	ld	r24, Z
    372a:	80 95       	com	r24
    372c:	8c 93       	st	X, r24
				break;
			}
		}
}
    372e:	0f 90       	pop	r0
    3730:	0f 90       	pop	r0
    3732:	0f 90       	pop	r0
    3734:	cf 91       	pop	r28
    3736:	df 91       	pop	r29
    3738:	08 95       	ret

0000373a <ADC_voidInit>:

f32 Vref = 5;
void (*Global_ADC_CallBack)(void)= NULL;


void ADC_voidInit(){
    373a:	df 93       	push	r29
    373c:	cf 93       	push	r28
    373e:	cd b7       	in	r28, 0x3d	; 61
    3740:	de b7       	in	r29, 0x3e	; 62
#if VOLTAGE_REFERENCE == ADC_AVCC
	SET_BIT(ADMUX, ADMUX_REFS0);
    3742:	a7 e2       	ldi	r26, 0x27	; 39
    3744:	b0 e0       	ldi	r27, 0x00	; 0
    3746:	e7 e2       	ldi	r30, 0x27	; 39
    3748:	f0 e0       	ldi	r31, 0x00	; 0
    374a:	80 81       	ld	r24, Z
    374c:	80 64       	ori	r24, 0x40	; 64
    374e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, ADMUX_REFS1);
    3750:	a7 e2       	ldi	r26, 0x27	; 39
    3752:	b0 e0       	ldi	r27, 0x00	; 0
    3754:	e7 e2       	ldi	r30, 0x27	; 39
    3756:	f0 e0       	ldi	r31, 0x00	; 0
    3758:	80 81       	ld	r24, Z
    375a:	8f 77       	andi	r24, 0x7F	; 127
    375c:	8c 93       	st	X, r24
	Vref = 5;
    375e:	80 e0       	ldi	r24, 0x00	; 0
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	a0 ea       	ldi	r26, 0xA0	; 160
    3764:	b0 e4       	ldi	r27, 0x40	; 64
    3766:	80 93 6d 01 	sts	0x016D, r24
    376a:	90 93 6e 01 	sts	0x016E, r25
    376e:	a0 93 6f 01 	sts	0x016F, r26
    3772:	b0 93 70 01 	sts	0x0170, r27
#endif

#if ADJUSTMENT == LEFT_ADJUSTMENT
	SET_BIT(ADMUX, ADMUX_ADLAR);
#elif ADJUSTMENT == RIGHT_ADJUSTMENT
	CLR_BIT(ADMUX, ADMUX_ADLAR);
    3776:	a7 e2       	ldi	r26, 0x27	; 39
    3778:	b0 e0       	ldi	r27, 0x00	; 0
    377a:	e7 e2       	ldi	r30, 0x27	; 39
    377c:	f0 e0       	ldi	r31, 0x00	; 0
    377e:	80 81       	ld	r24, Z
    3780:	8f 7d       	andi	r24, 0xDF	; 223
    3782:	8c 93       	st	X, r24
#endif

#if ADC_PRESCALLER == DIVISION_BY_128
	SET_BIT(ADCSRA, ADCSRA_ADPS0);
    3784:	a6 e2       	ldi	r26, 0x26	; 38
    3786:	b0 e0       	ldi	r27, 0x00	; 0
    3788:	e6 e2       	ldi	r30, 0x26	; 38
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	80 81       	ld	r24, Z
    378e:	81 60       	ori	r24, 0x01	; 1
    3790:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADCSRA_ADPS1);
    3792:	a6 e2       	ldi	r26, 0x26	; 38
    3794:	b0 e0       	ldi	r27, 0x00	; 0
    3796:	e6 e2       	ldi	r30, 0x26	; 38
    3798:	f0 e0       	ldi	r31, 0x00	; 0
    379a:	80 81       	ld	r24, Z
    379c:	82 60       	ori	r24, 0x02	; 2
    379e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADCSRA_ADPS2);
    37a0:	a6 e2       	ldi	r26, 0x26	; 38
    37a2:	b0 e0       	ldi	r27, 0x00	; 0
    37a4:	e6 e2       	ldi	r30, 0x26	; 38
    37a6:	f0 e0       	ldi	r31, 0x00	; 0
    37a8:	80 81       	ld	r24, Z
    37aa:	84 60       	ori	r24, 0x04	; 4
    37ac:	8c 93       	st	X, r24
#endif

#if ADC_AUTO_TRIGGER_SOURCE == FREE_RUNNING_MODE
	SET_BIT(ADCSRA, ADCSRA_ADATE);
#endif
}
    37ae:	cf 91       	pop	r28
    37b0:	df 91       	pop	r29
    37b2:	08 95       	ret

000037b4 <ADC_voidEnable>:

void ADC_voidEnable(){
    37b4:	df 93       	push	r29
    37b6:	cf 93       	push	r28
    37b8:	cd b7       	in	r28, 0x3d	; 61
    37ba:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    37bc:	a6 e2       	ldi	r26, 0x26	; 38
    37be:	b0 e0       	ldi	r27, 0x00	; 0
    37c0:	e6 e2       	ldi	r30, 0x26	; 38
    37c2:	f0 e0       	ldi	r31, 0x00	; 0
    37c4:	80 81       	ld	r24, Z
    37c6:	80 68       	ori	r24, 0x80	; 128
    37c8:	8c 93       	st	X, r24
}
    37ca:	cf 91       	pop	r28
    37cc:	df 91       	pop	r29
    37ce:	08 95       	ret

000037d0 <ADC_voidInterrputEnable>:

void ADC_voidInterrputEnable(){
    37d0:	df 93       	push	r29
    37d2:	cf 93       	push	r28
    37d4:	cd b7       	in	r28, 0x3d	; 61
    37d6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADIE);
    37d8:	a6 e2       	ldi	r26, 0x26	; 38
    37da:	b0 e0       	ldi	r27, 0x00	; 0
    37dc:	e6 e2       	ldi	r30, 0x26	; 38
    37de:	f0 e0       	ldi	r31, 0x00	; 0
    37e0:	80 81       	ld	r24, Z
    37e2:	88 60       	ori	r24, 0x08	; 8
    37e4:	8c 93       	st	X, r24
}
    37e6:	cf 91       	pop	r28
    37e8:	df 91       	pop	r29
    37ea:	08 95       	ret

000037ec <ADC_voidInterrputDisable>:

void ADC_voidInterrputDisable(){
    37ec:	df 93       	push	r29
    37ee:	cf 93       	push	r28
    37f0:	cd b7       	in	r28, 0x3d	; 61
    37f2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
    37f4:	a6 e2       	ldi	r26, 0x26	; 38
    37f6:	b0 e0       	ldi	r27, 0x00	; 0
    37f8:	e6 e2       	ldi	r30, 0x26	; 38
    37fa:	f0 e0       	ldi	r31, 0x00	; 0
    37fc:	80 81       	ld	r24, Z
    37fe:	87 7f       	andi	r24, 0xF7	; 247
    3800:	8c 93       	st	X, r24
}
    3802:	cf 91       	pop	r28
    3804:	df 91       	pop	r29
    3806:	08 95       	ret

00003808 <ADC_voidDisable>:

void ADC_voidDisable(){
    3808:	df 93       	push	r29
    380a:	cf 93       	push	r28
    380c:	cd b7       	in	r28, 0x3d	; 61
    380e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADEN);
    3810:	a6 e2       	ldi	r26, 0x26	; 38
    3812:	b0 e0       	ldi	r27, 0x00	; 0
    3814:	e6 e2       	ldi	r30, 0x26	; 38
    3816:	f0 e0       	ldi	r31, 0x00	; 0
    3818:	80 81       	ld	r24, Z
    381a:	8f 77       	andi	r24, 0x7F	; 127
    381c:	8c 93       	st	X, r24
}
    381e:	cf 91       	pop	r28
    3820:	df 91       	pop	r29
    3822:	08 95       	ret

00003824 <ADC_u16ReadADC>:

u16 ADC_u16ReadADC(){
    3824:	df 93       	push	r29
    3826:	cf 93       	push	r28
    3828:	00 d0       	rcall	.+0      	; 0x382a <ADC_u16ReadADC+0x6>
    382a:	cd b7       	in	r28, 0x3d	; 61
    382c:	de b7       	in	r29, 0x3e	; 62
	u16 result = 0;
    382e:	1a 82       	std	Y+2, r1	; 0x02
    3830:	19 82       	std	Y+1, r1	; 0x01
	result = (ADC * Vref)/1024;
    3832:	e4 e2       	ldi	r30, 0x24	; 36
    3834:	f0 e0       	ldi	r31, 0x00	; 0
    3836:	80 81       	ld	r24, Z
    3838:	91 81       	ldd	r25, Z+1	; 0x01
    383a:	cc 01       	movw	r24, r24
    383c:	a0 e0       	ldi	r26, 0x00	; 0
    383e:	b0 e0       	ldi	r27, 0x00	; 0
    3840:	bc 01       	movw	r22, r24
    3842:	cd 01       	movw	r24, r26
    3844:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3848:	dc 01       	movw	r26, r24
    384a:	cb 01       	movw	r24, r22
    384c:	20 91 6d 01 	lds	r18, 0x016D
    3850:	30 91 6e 01 	lds	r19, 0x016E
    3854:	40 91 6f 01 	lds	r20, 0x016F
    3858:	50 91 70 01 	lds	r21, 0x0170
    385c:	bc 01       	movw	r22, r24
    385e:	cd 01       	movw	r24, r26
    3860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	bc 01       	movw	r22, r24
    386a:	cd 01       	movw	r24, r26
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	40 e8       	ldi	r20, 0x80	; 128
    3872:	54 e4       	ldi	r21, 0x44	; 68
    3874:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	bc 01       	movw	r22, r24
    387e:	cd 01       	movw	r24, r26
    3880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3884:	dc 01       	movw	r26, r24
    3886:	cb 01       	movw	r24, r22
    3888:	9a 83       	std	Y+2, r25	; 0x02
    388a:	89 83       	std	Y+1, r24	; 0x01
	return result;
    388c:	89 81       	ldd	r24, Y+1	; 0x01
    388e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
    3894:	cf 91       	pop	r28
    3896:	df 91       	pop	r29
    3898:	08 95       	ret

0000389a <ADC_voidStartConversion>:

void ADC_voidStartConversion(u8 addresscpy){
    389a:	df 93       	push	r29
    389c:	cf 93       	push	r28
    389e:	0f 92       	push	r0
    38a0:	cd b7       	in	r28, 0x3d	; 61
    38a2:	de b7       	in	r29, 0x3e	; 62
    38a4:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    38a6:	a7 e2       	ldi	r26, 0x27	; 39
    38a8:	b0 e0       	ldi	r27, 0x00	; 0
    38aa:	e7 e2       	ldi	r30, 0x27	; 39
    38ac:	f0 e0       	ldi	r31, 0x00	; 0
    38ae:	80 81       	ld	r24, Z
    38b0:	80 7e       	andi	r24, 0xE0	; 224
    38b2:	8c 93       	st	X, r24

	/*set required channel*/
	ADMUX |= addresscpy;
    38b4:	a7 e2       	ldi	r26, 0x27	; 39
    38b6:	b0 e0       	ldi	r27, 0x00	; 0
    38b8:	e7 e2       	ldi	r30, 0x27	; 39
    38ba:	f0 e0       	ldi	r31, 0x00	; 0
    38bc:	90 81       	ld	r25, Z
    38be:	89 81       	ldd	r24, Y+1	; 0x01
    38c0:	89 2b       	or	r24, r25
    38c2:	8c 93       	st	X, r24
	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    38c4:	a6 e2       	ldi	r26, 0x26	; 38
    38c6:	b0 e0       	ldi	r27, 0x00	; 0
    38c8:	e6 e2       	ldi	r30, 0x26	; 38
    38ca:	f0 e0       	ldi	r31, 0x00	; 0
    38cc:	80 81       	ld	r24, Z
    38ce:	80 64       	ori	r24, 0x40	; 64
    38d0:	8c 93       	st	X, r24
	/*Busy waiting (polling) until the conversion is complete*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF))==0);
    38d2:	e6 e2       	ldi	r30, 0x26	; 38
    38d4:	f0 e0       	ldi	r31, 0x00	; 0
    38d6:	80 81       	ld	r24, Z
    38d8:	82 95       	swap	r24
    38da:	8f 70       	andi	r24, 0x0F	; 15
    38dc:	88 2f       	mov	r24, r24
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	81 70       	andi	r24, 0x01	; 1
    38e2:	90 70       	andi	r25, 0x00	; 0
    38e4:	00 97       	sbiw	r24, 0x00	; 0
    38e6:	a9 f3       	breq	.-22     	; 0x38d2 <ADC_voidStartConversion+0x38>

	/*clear the interrupt flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    38e8:	a6 e2       	ldi	r26, 0x26	; 38
    38ea:	b0 e0       	ldi	r27, 0x00	; 0
    38ec:	e6 e2       	ldi	r30, 0x26	; 38
    38ee:	f0 e0       	ldi	r31, 0x00	; 0
    38f0:	80 81       	ld	r24, Z
    38f2:	80 61       	ori	r24, 0x10	; 16
    38f4:	8c 93       	st	X, r24
}
    38f6:	0f 90       	pop	r0
    38f8:	cf 91       	pop	r28
    38fa:	df 91       	pop	r29
    38fc:	08 95       	ret

000038fe <ADC_voidStartInterruptConversion>:

void ADC_voidStartInterruptConversion(u8 addresscpy){
    38fe:	df 93       	push	r29
    3900:	cf 93       	push	r28
    3902:	0f 92       	push	r0
    3904:	cd b7       	in	r28, 0x3d	; 61
    3906:	de b7       	in	r29, 0x3e	; 62
    3908:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    390a:	a7 e2       	ldi	r26, 0x27	; 39
    390c:	b0 e0       	ldi	r27, 0x00	; 0
    390e:	e7 e2       	ldi	r30, 0x27	; 39
    3910:	f0 e0       	ldi	r31, 0x00	; 0
    3912:	80 81       	ld	r24, Z
    3914:	80 7e       	andi	r24, 0xE0	; 224
    3916:	8c 93       	st	X, r24
	/*set required channel*/
	ADMUX |= addresscpy;
    3918:	a7 e2       	ldi	r26, 0x27	; 39
    391a:	b0 e0       	ldi	r27, 0x00	; 0
    391c:	e7 e2       	ldi	r30, 0x27	; 39
    391e:	f0 e0       	ldi	r31, 0x00	; 0
    3920:	90 81       	ld	r25, Z
    3922:	89 81       	ldd	r24, Y+1	; 0x01
    3924:	89 2b       	or	r24, r25
    3926:	8c 93       	st	X, r24
	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    3928:	a6 e2       	ldi	r26, 0x26	; 38
    392a:	b0 e0       	ldi	r27, 0x00	; 0
    392c:	e6 e2       	ldi	r30, 0x26	; 38
    392e:	f0 e0       	ldi	r31, 0x00	; 0
    3930:	80 81       	ld	r24, Z
    3932:	80 64       	ori	r24, 0x40	; 64
    3934:	8c 93       	st	X, r24
}
    3936:	0f 90       	pop	r0
    3938:	cf 91       	pop	r28
    393a:	df 91       	pop	r29
    393c:	08 95       	ret

0000393e <ADC_voidChaining>:

void ADC_voidChaining(u8 addresscpy){
    393e:	df 93       	push	r29
    3940:	cf 93       	push	r28
    3942:	0f 92       	push	r0
    3944:	cd b7       	in	r28, 0x3d	; 61
    3946:	de b7       	in	r29, 0x3e	; 62
    3948:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    394a:	a7 e2       	ldi	r26, 0x27	; 39
    394c:	b0 e0       	ldi	r27, 0x00	; 0
    394e:	e7 e2       	ldi	r30, 0x27	; 39
    3950:	f0 e0       	ldi	r31, 0x00	; 0
    3952:	80 81       	ld	r24, Z
    3954:	80 7e       	andi	r24, 0xE0	; 224
    3956:	8c 93       	st	X, r24
	/*set required channel*/
	ADMUX |= addresscpy;
    3958:	a7 e2       	ldi	r26, 0x27	; 39
    395a:	b0 e0       	ldi	r27, 0x00	; 0
    395c:	e7 e2       	ldi	r30, 0x27	; 39
    395e:	f0 e0       	ldi	r31, 0x00	; 0
    3960:	90 81       	ld	r25, Z
    3962:	89 81       	ldd	r24, Y+1	; 0x01
    3964:	89 2b       	or	r24, r25
    3966:	8c 93       	st	X, r24
}
    3968:	0f 90       	pop	r0
    396a:	cf 91       	pop	r28
    396c:	df 91       	pop	r29
    396e:	08 95       	ret

00003970 <ADC_u16ReadADCInMV>:

u16 ADC_u16ReadADCInMV(){
    3970:	df 93       	push	r29
    3972:	cf 93       	push	r28
    3974:	00 d0       	rcall	.+0      	; 0x3976 <ADC_u16ReadADCInMV+0x6>
    3976:	cd b7       	in	r28, 0x3d	; 61
    3978:	de b7       	in	r29, 0x3e	; 62
	u16 result = 0;
    397a:	1a 82       	std	Y+2, r1	; 0x02
    397c:	19 82       	std	Y+1, r1	; 0x01
	result = (ADC * 1000UL * Vref)/1024;
    397e:	e4 e2       	ldi	r30, 0x24	; 36
    3980:	f0 e0       	ldi	r31, 0x00	; 0
    3982:	80 81       	ld	r24, Z
    3984:	91 81       	ldd	r25, Z+1	; 0x01
    3986:	cc 01       	movw	r24, r24
    3988:	a0 e0       	ldi	r26, 0x00	; 0
    398a:	b0 e0       	ldi	r27, 0x00	; 0
    398c:	28 ee       	ldi	r18, 0xE8	; 232
    398e:	33 e0       	ldi	r19, 0x03	; 3
    3990:	40 e0       	ldi	r20, 0x00	; 0
    3992:	50 e0       	ldi	r21, 0x00	; 0
    3994:	bc 01       	movw	r22, r24
    3996:	cd 01       	movw	r24, r26
    3998:	0e 94 35 35 	call	0x6a6a	; 0x6a6a <__mulsi3>
    399c:	dc 01       	movw	r26, r24
    399e:	cb 01       	movw	r24, r22
    39a0:	bc 01       	movw	r22, r24
    39a2:	cd 01       	movw	r24, r26
    39a4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    39a8:	dc 01       	movw	r26, r24
    39aa:	cb 01       	movw	r24, r22
    39ac:	20 91 6d 01 	lds	r18, 0x016D
    39b0:	30 91 6e 01 	lds	r19, 0x016E
    39b4:	40 91 6f 01 	lds	r20, 0x016F
    39b8:	50 91 70 01 	lds	r21, 0x0170
    39bc:	bc 01       	movw	r22, r24
    39be:	cd 01       	movw	r24, r26
    39c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	bc 01       	movw	r22, r24
    39ca:	cd 01       	movw	r24, r26
    39cc:	20 e0       	ldi	r18, 0x00	; 0
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	40 e8       	ldi	r20, 0x80	; 128
    39d2:	54 e4       	ldi	r21, 0x44	; 68
    39d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39d8:	dc 01       	movw	r26, r24
    39da:	cb 01       	movw	r24, r22
    39dc:	bc 01       	movw	r22, r24
    39de:	cd 01       	movw	r24, r26
    39e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39e4:	dc 01       	movw	r26, r24
    39e6:	cb 01       	movw	r24, r22
    39e8:	9a 83       	std	Y+2, r25	; 0x02
    39ea:	89 83       	std	Y+1, r24	; 0x01
	return result;
    39ec:	89 81       	ldd	r24, Y+1	; 0x01
    39ee:	9a 81       	ldd	r25, Y+2	; 0x02
}
    39f0:	0f 90       	pop	r0
    39f2:	0f 90       	pop	r0
    39f4:	cf 91       	pop	r28
    39f6:	df 91       	pop	r29
    39f8:	08 95       	ret

000039fa <ADC_voidSetCallback>:


void ADC_voidSetCallback( void (*ptr) (void) ){
    39fa:	df 93       	push	r29
    39fc:	cf 93       	push	r28
    39fe:	00 d0       	rcall	.+0      	; 0x3a00 <ADC_voidSetCallback+0x6>
    3a00:	cd b7       	in	r28, 0x3d	; 61
    3a02:	de b7       	in	r29, 0x3e	; 62
    3a04:	9a 83       	std	Y+2, r25	; 0x02
    3a06:	89 83       	std	Y+1, r24	; 0x01
	Global_ADC_CallBack = ptr;
    3a08:	89 81       	ldd	r24, Y+1	; 0x01
    3a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a0c:	90 93 cb 05 	sts	0x05CB, r25
    3a10:	80 93 ca 05 	sts	0x05CA, r24
}
    3a14:	0f 90       	pop	r0
    3a16:	0f 90       	pop	r0
    3a18:	cf 91       	pop	r28
    3a1a:	df 91       	pop	r29
    3a1c:	08 95       	ret

00003a1e <__vector_16>:

void __vector_16 (void){
    3a1e:	1f 92       	push	r1
    3a20:	0f 92       	push	r0
    3a22:	0f b6       	in	r0, 0x3f	; 63
    3a24:	0f 92       	push	r0
    3a26:	11 24       	eor	r1, r1
    3a28:	2f 93       	push	r18
    3a2a:	3f 93       	push	r19
    3a2c:	4f 93       	push	r20
    3a2e:	5f 93       	push	r21
    3a30:	6f 93       	push	r22
    3a32:	7f 93       	push	r23
    3a34:	8f 93       	push	r24
    3a36:	9f 93       	push	r25
    3a38:	af 93       	push	r26
    3a3a:	bf 93       	push	r27
    3a3c:	ef 93       	push	r30
    3a3e:	ff 93       	push	r31
    3a40:	df 93       	push	r29
    3a42:	cf 93       	push	r28
    3a44:	cd b7       	in	r28, 0x3d	; 61
    3a46:	de b7       	in	r29, 0x3e	; 62

	if(Global_ADC_CallBack != NULL){
    3a48:	80 91 ca 05 	lds	r24, 0x05CA
    3a4c:	90 91 cb 05 	lds	r25, 0x05CB
    3a50:	00 97       	sbiw	r24, 0x00	; 0
    3a52:	29 f0       	breq	.+10     	; 0x3a5e <__vector_16+0x40>
		Global_ADC_CallBack();
    3a54:	e0 91 ca 05 	lds	r30, 0x05CA
    3a58:	f0 91 cb 05 	lds	r31, 0x05CB
    3a5c:	09 95       	icall
	}
}
    3a5e:	cf 91       	pop	r28
    3a60:	df 91       	pop	r29
    3a62:	ff 91       	pop	r31
    3a64:	ef 91       	pop	r30
    3a66:	bf 91       	pop	r27
    3a68:	af 91       	pop	r26
    3a6a:	9f 91       	pop	r25
    3a6c:	8f 91       	pop	r24
    3a6e:	7f 91       	pop	r23
    3a70:	6f 91       	pop	r22
    3a72:	5f 91       	pop	r21
    3a74:	4f 91       	pop	r20
    3a76:	3f 91       	pop	r19
    3a78:	2f 91       	pop	r18
    3a7a:	0f 90       	pop	r0
    3a7c:	0f be       	out	0x3f, r0	; 63
    3a7e:	0f 90       	pop	r0
    3a80:	1f 90       	pop	r1
    3a82:	18 95       	reti

00003a84 <SevSeg_voidSingleInit>:
		0b00111, // 7
		0b10000, // 8
		0b10001  // 9
};

void SevSeg_voidSingleInit(){
    3a84:	df 93       	push	r29
    3a86:	cf 93       	push	r28
    3a88:	cd b7       	in	r28, 0x3d	; 61
    3a8a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(Sev_PORT,0x7F);
    3a8c:	82 e0       	ldi	r24, 0x02	; 2
    3a8e:	6f e7       	ldi	r22, 0x7F	; 127
    3a90:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <DIO_voidSetPortDir>
}
    3a94:	cf 91       	pop	r28
    3a96:	df 91       	pop	r29
    3a98:	08 95       	ret

00003a9a <SevSeg_voidDoubleInit>:

void SevSeg_voidDoubleInit(){
    3a9a:	df 93       	push	r29
    3a9c:	cf 93       	push	r28
    3a9e:	cd b7       	in	r28, 0x3d	; 61
    3aa0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(Sev_PORT,0x7F);
    3aa2:	82 e0       	ldi	r24, 0x02	; 2
    3aa4:	6f e7       	ldi	r22, 0x7F	; 127
    3aa6:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <DIO_voidSetPortDir>
	DIO_voidSetPortDir(Sev_PORT2,0x7F);
    3aaa:	84 e0       	ldi	r24, 0x04	; 4
    3aac:	6f e7       	ldi	r22, 0x7F	; 127
    3aae:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <DIO_voidSetPortDir>
}
    3ab2:	cf 91       	pop	r28
    3ab4:	df 91       	pop	r29
    3ab6:	08 95       	ret

00003ab8 <SevSeg_voidDisplayNumber>:

void SevSeg_voidDisplayNumber(u8 number){
    3ab8:	df 93       	push	r29
    3aba:	cf 93       	push	r28
    3abc:	cd b7       	in	r28, 0x3d	; 61
    3abe:	de b7       	in	r29, 0x3e	; 62
    3ac0:	60 97       	sbiw	r28, 0x10	; 16
    3ac2:	0f b6       	in	r0, 0x3f	; 63
    3ac4:	f8 94       	cli
    3ac6:	de bf       	out	0x3e, r29	; 62
    3ac8:	0f be       	out	0x3f, r0	; 63
    3aca:	cd bf       	out	0x3d, r28	; 61
    3acc:	8b 87       	std	Y+11, r24	; 0x0b
	s8 Sev_numbers[] = Sev_Array;
    3ace:	ce 01       	movw	r24, r28
    3ad0:	01 96       	adiw	r24, 0x01	; 1
    3ad2:	9d 87       	std	Y+13, r25	; 0x0d
    3ad4:	8c 87       	std	Y+12, r24	; 0x0c
    3ad6:	e7 e8       	ldi	r30, 0x87	; 135
    3ad8:	f1 e0       	ldi	r31, 0x01	; 1
    3ada:	ff 87       	std	Y+15, r31	; 0x0f
    3adc:	ee 87       	std	Y+14, r30	; 0x0e
    3ade:	fa e0       	ldi	r31, 0x0A	; 10
    3ae0:	f8 8b       	std	Y+16, r31	; 0x10
    3ae2:	ee 85       	ldd	r30, Y+14	; 0x0e
    3ae4:	ff 85       	ldd	r31, Y+15	; 0x0f
    3ae6:	00 80       	ld	r0, Z
    3ae8:	8e 85       	ldd	r24, Y+14	; 0x0e
    3aea:	9f 85       	ldd	r25, Y+15	; 0x0f
    3aec:	01 96       	adiw	r24, 0x01	; 1
    3aee:	9f 87       	std	Y+15, r25	; 0x0f
    3af0:	8e 87       	std	Y+14, r24	; 0x0e
    3af2:	ec 85       	ldd	r30, Y+12	; 0x0c
    3af4:	fd 85       	ldd	r31, Y+13	; 0x0d
    3af6:	00 82       	st	Z, r0
    3af8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3afa:	9d 85       	ldd	r25, Y+13	; 0x0d
    3afc:	01 96       	adiw	r24, 0x01	; 1
    3afe:	9d 87       	std	Y+13, r25	; 0x0d
    3b00:	8c 87       	std	Y+12, r24	; 0x0c
    3b02:	98 89       	ldd	r25, Y+16	; 0x10
    3b04:	91 50       	subi	r25, 0x01	; 1
    3b06:	98 8b       	std	Y+16, r25	; 0x10
    3b08:	e8 89       	ldd	r30, Y+16	; 0x10
    3b0a:	ee 23       	and	r30, r30
    3b0c:	51 f7       	brne	.-44     	; 0x3ae2 <SevSeg_voidDisplayNumber+0x2a>
	if(number < 10 && number >= 0){
    3b0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b10:	8a 30       	cpi	r24, 0x0A	; 10
    3b12:	70 f4       	brcc	.+28     	; 0x3b30 <SevSeg_voidDisplayNumber+0x78>
		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[number]);
    3b14:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b16:	28 2f       	mov	r18, r24
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	ce 01       	movw	r24, r28
    3b1c:	01 96       	adiw	r24, 0x01	; 1
    3b1e:	fc 01       	movw	r30, r24
    3b20:	e2 0f       	add	r30, r18
    3b22:	f3 1f       	adc	r31, r19
    3b24:	80 81       	ld	r24, Z
    3b26:	98 2f       	mov	r25, r24
    3b28:	82 e0       	ldi	r24, 0x02	; 2
    3b2a:	69 2f       	mov	r22, r25
    3b2c:	0e 94 b6 1a 	call	0x356c	; 0x356c <DIO_voidSetPortValue>
	}
}
    3b30:	60 96       	adiw	r28, 0x10	; 16
    3b32:	0f b6       	in	r0, 0x3f	; 63
    3b34:	f8 94       	cli
    3b36:	de bf       	out	0x3e, r29	; 62
    3b38:	0f be       	out	0x3f, r0	; 63
    3b3a:	cd bf       	out	0x3d, r28	; 61
    3b3c:	cf 91       	pop	r28
    3b3e:	df 91       	pop	r29
    3b40:	08 95       	ret

00003b42 <SevSeg_voidSingleAutoCounter>:

void SevSeg_voidSingleAutoCounter(){
    3b42:	df 93       	push	r29
    3b44:	cf 93       	push	r28
    3b46:	cd b7       	in	r28, 0x3d	; 61
    3b48:	de b7       	in	r29, 0x3e	; 62
    3b4a:	a1 97       	sbiw	r28, 0x21	; 33
    3b4c:	0f b6       	in	r0, 0x3f	; 63
    3b4e:	f8 94       	cli
    3b50:	de bf       	out	0x3e, r29	; 62
    3b52:	0f be       	out	0x3f, r0	; 63
    3b54:	cd bf       	out	0x3d, r28	; 61

	s8 Sev_numbers[] = Sev_Array;
    3b56:	ce 01       	movw	r24, r28
    3b58:	43 96       	adiw	r24, 0x13	; 19
    3b5a:	9e 8f       	std	Y+30, r25	; 0x1e
    3b5c:	8d 8f       	std	Y+29, r24	; 0x1d
    3b5e:	e1 e9       	ldi	r30, 0x91	; 145
    3b60:	f1 e0       	ldi	r31, 0x01	; 1
    3b62:	f8 a3       	std	Y+32, r31	; 0x20
    3b64:	ef 8f       	std	Y+31, r30	; 0x1f
    3b66:	fa e0       	ldi	r31, 0x0A	; 10
    3b68:	f9 a3       	std	Y+33, r31	; 0x21
    3b6a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3b6c:	f8 a1       	ldd	r31, Y+32	; 0x20
    3b6e:	00 80       	ld	r0, Z
    3b70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b72:	98 a1       	ldd	r25, Y+32	; 0x20
    3b74:	01 96       	adiw	r24, 0x01	; 1
    3b76:	98 a3       	std	Y+32, r25	; 0x20
    3b78:	8f 8f       	std	Y+31, r24	; 0x1f
    3b7a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3b7c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3b7e:	00 82       	st	Z, r0
    3b80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b84:	01 96       	adiw	r24, 0x01	; 1
    3b86:	9e 8f       	std	Y+30, r25	; 0x1e
    3b88:	8d 8f       	std	Y+29, r24	; 0x1d
    3b8a:	99 a1       	ldd	r25, Y+33	; 0x21
    3b8c:	91 50       	subi	r25, 0x01	; 1
    3b8e:	99 a3       	std	Y+33, r25	; 0x21
    3b90:	e9 a1       	ldd	r30, Y+33	; 0x21
    3b92:	ee 23       	and	r30, r30
    3b94:	51 f7       	brne	.-44     	; 0x3b6a <SevSeg_voidSingleAutoCounter+0x28>
	s32 Local_Counter1 = 0;
    3b96:	1f 86       	std	Y+15, r1	; 0x0f
    3b98:	18 8a       	std	Y+16, r1	; 0x10
    3b9a:	19 8a       	std	Y+17, r1	; 0x11
    3b9c:	1a 8a       	std	Y+18, r1	; 0x12

	for(Local_Counter1 =0;Local_Counter1 <10; Local_Counter1++){
    3b9e:	1f 86       	std	Y+15, r1	; 0x0f
    3ba0:	18 8a       	std	Y+16, r1	; 0x10
    3ba2:	19 8a       	std	Y+17, r1	; 0x11
    3ba4:	1a 8a       	std	Y+18, r1	; 0x12
    3ba6:	8d c0       	rjmp	.+282    	; 0x3cc2 <SevSeg_voidSingleAutoCounter+0x180>

		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter1]);
    3ba8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3baa:	98 89       	ldd	r25, Y+16	; 0x10
    3bac:	a9 89       	ldd	r26, Y+17	; 0x11
    3bae:	ba 89       	ldd	r27, Y+18	; 0x12
    3bb0:	9e 01       	movw	r18, r28
    3bb2:	2d 5e       	subi	r18, 0xED	; 237
    3bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    3bb6:	f9 01       	movw	r30, r18
    3bb8:	e8 0f       	add	r30, r24
    3bba:	f9 1f       	adc	r31, r25
    3bbc:	80 81       	ld	r24, Z
    3bbe:	98 2f       	mov	r25, r24
    3bc0:	82 e0       	ldi	r24, 0x02	; 2
    3bc2:	69 2f       	mov	r22, r25
    3bc4:	0e 94 b6 1a 	call	0x356c	; 0x356c <DIO_voidSetPortValue>
    3bc8:	80 e0       	ldi	r24, 0x00	; 0
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	a0 e2       	ldi	r26, 0x20	; 32
    3bce:	b1 e4       	ldi	r27, 0x41	; 65
    3bd0:	8b 87       	std	Y+11, r24	; 0x0b
    3bd2:	9c 87       	std	Y+12, r25	; 0x0c
    3bd4:	ad 87       	std	Y+13, r26	; 0x0d
    3bd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bda:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bde:	9e 85       	ldd	r25, Y+14	; 0x0e
    3be0:	20 e0       	ldi	r18, 0x00	; 0
    3be2:	30 e0       	ldi	r19, 0x00	; 0
    3be4:	4a e7       	ldi	r20, 0x7A	; 122
    3be6:	55 e4       	ldi	r21, 0x45	; 69
    3be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bec:	dc 01       	movw	r26, r24
    3bee:	cb 01       	movw	r24, r22
    3bf0:	8f 83       	std	Y+7, r24	; 0x07
    3bf2:	98 87       	std	Y+8, r25	; 0x08
    3bf4:	a9 87       	std	Y+9, r26	; 0x09
    3bf6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bf8:	6f 81       	ldd	r22, Y+7	; 0x07
    3bfa:	78 85       	ldd	r23, Y+8	; 0x08
    3bfc:	89 85       	ldd	r24, Y+9	; 0x09
    3bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	40 e8       	ldi	r20, 0x80	; 128
    3c06:	5f e3       	ldi	r21, 0x3F	; 63
    3c08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c0c:	88 23       	and	r24, r24
    3c0e:	2c f4       	brge	.+10     	; 0x3c1a <SevSeg_voidSingleAutoCounter+0xd8>
		__ticks = 1;
    3c10:	81 e0       	ldi	r24, 0x01	; 1
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	9e 83       	std	Y+6, r25	; 0x06
    3c16:	8d 83       	std	Y+5, r24	; 0x05
    3c18:	3f c0       	rjmp	.+126    	; 0x3c98 <SevSeg_voidSingleAutoCounter+0x156>
	else if (__tmp > 65535)
    3c1a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c1c:	78 85       	ldd	r23, Y+8	; 0x08
    3c1e:	89 85       	ldd	r24, Y+9	; 0x09
    3c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c22:	20 e0       	ldi	r18, 0x00	; 0
    3c24:	3f ef       	ldi	r19, 0xFF	; 255
    3c26:	4f e7       	ldi	r20, 0x7F	; 127
    3c28:	57 e4       	ldi	r21, 0x47	; 71
    3c2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c2e:	18 16       	cp	r1, r24
    3c30:	4c f5       	brge	.+82     	; 0x3c84 <SevSeg_voidSingleAutoCounter+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c32:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c34:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	40 e2       	ldi	r20, 0x20	; 32
    3c40:	51 e4       	ldi	r21, 0x41	; 65
    3c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c46:	dc 01       	movw	r26, r24
    3c48:	cb 01       	movw	r24, r22
    3c4a:	bc 01       	movw	r22, r24
    3c4c:	cd 01       	movw	r24, r26
    3c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c52:	dc 01       	movw	r26, r24
    3c54:	cb 01       	movw	r24, r22
    3c56:	9e 83       	std	Y+6, r25	; 0x06
    3c58:	8d 83       	std	Y+5, r24	; 0x05
    3c5a:	0f c0       	rjmp	.+30     	; 0x3c7a <SevSeg_voidSingleAutoCounter+0x138>
    3c5c:	80 e9       	ldi	r24, 0x90	; 144
    3c5e:	91 e0       	ldi	r25, 0x01	; 1
    3c60:	9c 83       	std	Y+4, r25	; 0x04
    3c62:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3c64:	8b 81       	ldd	r24, Y+3	; 0x03
    3c66:	9c 81       	ldd	r25, Y+4	; 0x04
    3c68:	01 97       	sbiw	r24, 0x01	; 1
    3c6a:	f1 f7       	brne	.-4      	; 0x3c68 <SevSeg_voidSingleAutoCounter+0x126>
    3c6c:	9c 83       	std	Y+4, r25	; 0x04
    3c6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c70:	8d 81       	ldd	r24, Y+5	; 0x05
    3c72:	9e 81       	ldd	r25, Y+6	; 0x06
    3c74:	01 97       	sbiw	r24, 0x01	; 1
    3c76:	9e 83       	std	Y+6, r25	; 0x06
    3c78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c7e:	00 97       	sbiw	r24, 0x00	; 0
    3c80:	69 f7       	brne	.-38     	; 0x3c5c <SevSeg_voidSingleAutoCounter+0x11a>
    3c82:	14 c0       	rjmp	.+40     	; 0x3cac <SevSeg_voidSingleAutoCounter+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c84:	6f 81       	ldd	r22, Y+7	; 0x07
    3c86:	78 85       	ldd	r23, Y+8	; 0x08
    3c88:	89 85       	ldd	r24, Y+9	; 0x09
    3c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c90:	dc 01       	movw	r26, r24
    3c92:	cb 01       	movw	r24, r22
    3c94:	9e 83       	std	Y+6, r25	; 0x06
    3c96:	8d 83       	std	Y+5, r24	; 0x05
    3c98:	8d 81       	ldd	r24, Y+5	; 0x05
    3c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c9c:	9a 83       	std	Y+2, r25	; 0x02
    3c9e:	89 83       	std	Y+1, r24	; 0x01
    3ca0:	89 81       	ldd	r24, Y+1	; 0x01
    3ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca4:	01 97       	sbiw	r24, 0x01	; 1
    3ca6:	f1 f7       	brne	.-4      	; 0x3ca4 <SevSeg_voidSingleAutoCounter+0x162>
    3ca8:	9a 83       	std	Y+2, r25	; 0x02
    3caa:	89 83       	std	Y+1, r24	; 0x01
void SevSeg_voidSingleAutoCounter(){

	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter1 = 0;

	for(Local_Counter1 =0;Local_Counter1 <10; Local_Counter1++){
    3cac:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cae:	98 89       	ldd	r25, Y+16	; 0x10
    3cb0:	a9 89       	ldd	r26, Y+17	; 0x11
    3cb2:	ba 89       	ldd	r27, Y+18	; 0x12
    3cb4:	01 96       	adiw	r24, 0x01	; 1
    3cb6:	a1 1d       	adc	r26, r1
    3cb8:	b1 1d       	adc	r27, r1
    3cba:	8f 87       	std	Y+15, r24	; 0x0f
    3cbc:	98 8b       	std	Y+16, r25	; 0x10
    3cbe:	a9 8b       	std	Y+17, r26	; 0x11
    3cc0:	ba 8b       	std	Y+18, r27	; 0x12
    3cc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cc4:	98 89       	ldd	r25, Y+16	; 0x10
    3cc6:	a9 89       	ldd	r26, Y+17	; 0x11
    3cc8:	ba 89       	ldd	r27, Y+18	; 0x12
    3cca:	8a 30       	cpi	r24, 0x0A	; 10
    3ccc:	91 05       	cpc	r25, r1
    3cce:	a1 05       	cpc	r26, r1
    3cd0:	b1 05       	cpc	r27, r1
    3cd2:	0c f4       	brge	.+2      	; 0x3cd6 <SevSeg_voidSingleAutoCounter+0x194>
    3cd4:	69 cf       	rjmp	.-302    	; 0x3ba8 <SevSeg_voidSingleAutoCounter+0x66>

		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter1]);
		_delay_ms(Sev_DELAY);
	}

}
    3cd6:	a1 96       	adiw	r28, 0x21	; 33
    3cd8:	0f b6       	in	r0, 0x3f	; 63
    3cda:	f8 94       	cli
    3cdc:	de bf       	out	0x3e, r29	; 62
    3cde:	0f be       	out	0x3f, r0	; 63
    3ce0:	cd bf       	out	0x3d, r28	; 61
    3ce2:	cf 91       	pop	r28
    3ce4:	df 91       	pop	r29
    3ce6:	08 95       	ret

00003ce8 <SevSeg_voidDoubleAutoCounter>:

void SevSeg_voidDoubleAutoCounter(){
    3ce8:	df 93       	push	r29
    3cea:	cf 93       	push	r28
    3cec:	cd b7       	in	r28, 0x3d	; 61
    3cee:	de b7       	in	r29, 0x3e	; 62
    3cf0:	a5 97       	sbiw	r28, 0x25	; 37
    3cf2:	0f b6       	in	r0, 0x3f	; 63
    3cf4:	f8 94       	cli
    3cf6:	de bf       	out	0x3e, r29	; 62
    3cf8:	0f be       	out	0x3f, r0	; 63
    3cfa:	cd bf       	out	0x3d, r28	; 61
	s8 Sev_numbers[] = Sev_Array;
    3cfc:	ce 01       	movw	r24, r28
    3cfe:	47 96       	adiw	r24, 0x17	; 23
    3d00:	9a a3       	std	Y+34, r25	; 0x22
    3d02:	89 a3       	std	Y+33, r24	; 0x21
    3d04:	eb e9       	ldi	r30, 0x9B	; 155
    3d06:	f1 e0       	ldi	r31, 0x01	; 1
    3d08:	fc a3       	std	Y+36, r31	; 0x24
    3d0a:	eb a3       	std	Y+35, r30	; 0x23
    3d0c:	fa e0       	ldi	r31, 0x0A	; 10
    3d0e:	fd a3       	std	Y+37, r31	; 0x25
    3d10:	eb a1       	ldd	r30, Y+35	; 0x23
    3d12:	fc a1       	ldd	r31, Y+36	; 0x24
    3d14:	00 80       	ld	r0, Z
    3d16:	8b a1       	ldd	r24, Y+35	; 0x23
    3d18:	9c a1       	ldd	r25, Y+36	; 0x24
    3d1a:	01 96       	adiw	r24, 0x01	; 1
    3d1c:	9c a3       	std	Y+36, r25	; 0x24
    3d1e:	8b a3       	std	Y+35, r24	; 0x23
    3d20:	e9 a1       	ldd	r30, Y+33	; 0x21
    3d22:	fa a1       	ldd	r31, Y+34	; 0x22
    3d24:	00 82       	st	Z, r0
    3d26:	89 a1       	ldd	r24, Y+33	; 0x21
    3d28:	9a a1       	ldd	r25, Y+34	; 0x22
    3d2a:	01 96       	adiw	r24, 0x01	; 1
    3d2c:	9a a3       	std	Y+34, r25	; 0x22
    3d2e:	89 a3       	std	Y+33, r24	; 0x21
    3d30:	9d a1       	ldd	r25, Y+37	; 0x25
    3d32:	91 50       	subi	r25, 0x01	; 1
    3d34:	9d a3       	std	Y+37, r25	; 0x25
    3d36:	ed a1       	ldd	r30, Y+37	; 0x25
    3d38:	ee 23       	and	r30, r30
    3d3a:	51 f7       	brne	.-44     	; 0x3d10 <SevSeg_voidDoubleAutoCounter+0x28>
	s32 Local_Counter1 = 0;
    3d3c:	1b 8a       	std	Y+19, r1	; 0x13
    3d3e:	1c 8a       	std	Y+20, r1	; 0x14
    3d40:	1d 8a       	std	Y+21, r1	; 0x15
    3d42:	1e 8a       	std	Y+22, r1	; 0x16
	s32 Local_Counter2 = 0;
    3d44:	1f 86       	std	Y+15, r1	; 0x0f
    3d46:	18 8a       	std	Y+16, r1	; 0x10
    3d48:	19 8a       	std	Y+17, r1	; 0x11
    3d4a:	1a 8a       	std	Y+18, r1	; 0x12

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){
    3d4c:	1b 8a       	std	Y+19, r1	; 0x13
    3d4e:	1c 8a       	std	Y+20, r1	; 0x14
    3d50:	1d 8a       	std	Y+21, r1	; 0x15
    3d52:	1e 8a       	std	Y+22, r1	; 0x16
    3d54:	b7 c0       	rjmp	.+366    	; 0x3ec4 <SevSeg_voidDoubleAutoCounter+0x1dc>

		DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    3d56:	8b 89       	ldd	r24, Y+19	; 0x13
    3d58:	9c 89       	ldd	r25, Y+20	; 0x14
    3d5a:	ad 89       	ldd	r26, Y+21	; 0x15
    3d5c:	be 89       	ldd	r27, Y+22	; 0x16
    3d5e:	9e 01       	movw	r18, r28
    3d60:	29 5e       	subi	r18, 0xE9	; 233
    3d62:	3f 4f       	sbci	r19, 0xFF	; 255
    3d64:	f9 01       	movw	r30, r18
    3d66:	e8 0f       	add	r30, r24
    3d68:	f9 1f       	adc	r31, r25
    3d6a:	80 81       	ld	r24, Z
    3d6c:	98 2f       	mov	r25, r24
    3d6e:	84 e0       	ldi	r24, 0x04	; 4
    3d70:	69 2f       	mov	r22, r25
    3d72:	0e 94 b6 1a 	call	0x356c	; 0x356c <DIO_voidSetPortValue>

		for(Local_Counter2 =0;Local_Counter2 <10; Local_Counter2++){
    3d76:	1f 86       	std	Y+15, r1	; 0x0f
    3d78:	18 8a       	std	Y+16, r1	; 0x10
    3d7a:	19 8a       	std	Y+17, r1	; 0x11
    3d7c:	1a 8a       	std	Y+18, r1	; 0x12
    3d7e:	8d c0       	rjmp	.+282    	; 0x3e9a <SevSeg_voidDoubleAutoCounter+0x1b2>

			DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    3d80:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d82:	98 89       	ldd	r25, Y+16	; 0x10
    3d84:	a9 89       	ldd	r26, Y+17	; 0x11
    3d86:	ba 89       	ldd	r27, Y+18	; 0x12
    3d88:	9e 01       	movw	r18, r28
    3d8a:	29 5e       	subi	r18, 0xE9	; 233
    3d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d8e:	f9 01       	movw	r30, r18
    3d90:	e8 0f       	add	r30, r24
    3d92:	f9 1f       	adc	r31, r25
    3d94:	80 81       	ld	r24, Z
    3d96:	98 2f       	mov	r25, r24
    3d98:	82 e0       	ldi	r24, 0x02	; 2
    3d9a:	69 2f       	mov	r22, r25
    3d9c:	0e 94 b6 1a 	call	0x356c	; 0x356c <DIO_voidSetPortValue>
    3da0:	80 e0       	ldi	r24, 0x00	; 0
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	a0 e2       	ldi	r26, 0x20	; 32
    3da6:	b1 e4       	ldi	r27, 0x41	; 65
    3da8:	8b 87       	std	Y+11, r24	; 0x0b
    3daa:	9c 87       	std	Y+12, r25	; 0x0c
    3dac:	ad 87       	std	Y+13, r26	; 0x0d
    3dae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3db0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3db2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3db6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3db8:	20 e0       	ldi	r18, 0x00	; 0
    3dba:	30 e0       	ldi	r19, 0x00	; 0
    3dbc:	4a e7       	ldi	r20, 0x7A	; 122
    3dbe:	55 e4       	ldi	r21, 0x45	; 69
    3dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc4:	dc 01       	movw	r26, r24
    3dc6:	cb 01       	movw	r24, r22
    3dc8:	8f 83       	std	Y+7, r24	; 0x07
    3dca:	98 87       	std	Y+8, r25	; 0x08
    3dcc:	a9 87       	std	Y+9, r26	; 0x09
    3dce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    3dd2:	78 85       	ldd	r23, Y+8	; 0x08
    3dd4:	89 85       	ldd	r24, Y+9	; 0x09
    3dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd8:	20 e0       	ldi	r18, 0x00	; 0
    3dda:	30 e0       	ldi	r19, 0x00	; 0
    3ddc:	40 e8       	ldi	r20, 0x80	; 128
    3dde:	5f e3       	ldi	r21, 0x3F	; 63
    3de0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3de4:	88 23       	and	r24, r24
    3de6:	2c f4       	brge	.+10     	; 0x3df2 <SevSeg_voidDoubleAutoCounter+0x10a>
		__ticks = 1;
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	9e 83       	std	Y+6, r25	; 0x06
    3dee:	8d 83       	std	Y+5, r24	; 0x05
    3df0:	3f c0       	rjmp	.+126    	; 0x3e70 <SevSeg_voidDoubleAutoCounter+0x188>
	else if (__tmp > 65535)
    3df2:	6f 81       	ldd	r22, Y+7	; 0x07
    3df4:	78 85       	ldd	r23, Y+8	; 0x08
    3df6:	89 85       	ldd	r24, Y+9	; 0x09
    3df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	3f ef       	ldi	r19, 0xFF	; 255
    3dfe:	4f e7       	ldi	r20, 0x7F	; 127
    3e00:	57 e4       	ldi	r21, 0x47	; 71
    3e02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e06:	18 16       	cp	r1, r24
    3e08:	4c f5       	brge	.+82     	; 0x3e5c <SevSeg_voidDoubleAutoCounter+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e10:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e12:	20 e0       	ldi	r18, 0x00	; 0
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	40 e2       	ldi	r20, 0x20	; 32
    3e18:	51 e4       	ldi	r21, 0x41	; 65
    3e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e1e:	dc 01       	movw	r26, r24
    3e20:	cb 01       	movw	r24, r22
    3e22:	bc 01       	movw	r22, r24
    3e24:	cd 01       	movw	r24, r26
    3e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e2a:	dc 01       	movw	r26, r24
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	9e 83       	std	Y+6, r25	; 0x06
    3e30:	8d 83       	std	Y+5, r24	; 0x05
    3e32:	0f c0       	rjmp	.+30     	; 0x3e52 <SevSeg_voidDoubleAutoCounter+0x16a>
    3e34:	80 e9       	ldi	r24, 0x90	; 144
    3e36:	91 e0       	ldi	r25, 0x01	; 1
    3e38:	9c 83       	std	Y+4, r25	; 0x04
    3e3a:	8b 83       	std	Y+3, r24	; 0x03
    3e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e40:	01 97       	sbiw	r24, 0x01	; 1
    3e42:	f1 f7       	brne	.-4      	; 0x3e40 <SevSeg_voidDoubleAutoCounter+0x158>
    3e44:	9c 83       	std	Y+4, r25	; 0x04
    3e46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e48:	8d 81       	ldd	r24, Y+5	; 0x05
    3e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e4c:	01 97       	sbiw	r24, 0x01	; 1
    3e4e:	9e 83       	std	Y+6, r25	; 0x06
    3e50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e52:	8d 81       	ldd	r24, Y+5	; 0x05
    3e54:	9e 81       	ldd	r25, Y+6	; 0x06
    3e56:	00 97       	sbiw	r24, 0x00	; 0
    3e58:	69 f7       	brne	.-38     	; 0x3e34 <SevSeg_voidDoubleAutoCounter+0x14c>
    3e5a:	14 c0       	rjmp	.+40     	; 0x3e84 <SevSeg_voidDoubleAutoCounter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e5e:	78 85       	ldd	r23, Y+8	; 0x08
    3e60:	89 85       	ldd	r24, Y+9	; 0x09
    3e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e68:	dc 01       	movw	r26, r24
    3e6a:	cb 01       	movw	r24, r22
    3e6c:	9e 83       	std	Y+6, r25	; 0x06
    3e6e:	8d 83       	std	Y+5, r24	; 0x05
    3e70:	8d 81       	ldd	r24, Y+5	; 0x05
    3e72:	9e 81       	ldd	r25, Y+6	; 0x06
    3e74:	9a 83       	std	Y+2, r25	; 0x02
    3e76:	89 83       	std	Y+1, r24	; 0x01
    3e78:	89 81       	ldd	r24, Y+1	; 0x01
    3e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e7c:	01 97       	sbiw	r24, 0x01	; 1
    3e7e:	f1 f7       	brne	.-4      	; 0x3e7c <SevSeg_voidDoubleAutoCounter+0x194>
    3e80:	9a 83       	std	Y+2, r25	; 0x02
    3e82:	89 83       	std	Y+1, r24	; 0x01

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){

		DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

		for(Local_Counter2 =0;Local_Counter2 <10; Local_Counter2++){
    3e84:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e86:	98 89       	ldd	r25, Y+16	; 0x10
    3e88:	a9 89       	ldd	r26, Y+17	; 0x11
    3e8a:	ba 89       	ldd	r27, Y+18	; 0x12
    3e8c:	01 96       	adiw	r24, 0x01	; 1
    3e8e:	a1 1d       	adc	r26, r1
    3e90:	b1 1d       	adc	r27, r1
    3e92:	8f 87       	std	Y+15, r24	; 0x0f
    3e94:	98 8b       	std	Y+16, r25	; 0x10
    3e96:	a9 8b       	std	Y+17, r26	; 0x11
    3e98:	ba 8b       	std	Y+18, r27	; 0x12
    3e9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e9c:	98 89       	ldd	r25, Y+16	; 0x10
    3e9e:	a9 89       	ldd	r26, Y+17	; 0x11
    3ea0:	ba 89       	ldd	r27, Y+18	; 0x12
    3ea2:	8a 30       	cpi	r24, 0x0A	; 10
    3ea4:	91 05       	cpc	r25, r1
    3ea6:	a1 05       	cpc	r26, r1
    3ea8:	b1 05       	cpc	r27, r1
    3eaa:	0c f4       	brge	.+2      	; 0x3eae <SevSeg_voidDoubleAutoCounter+0x1c6>
    3eac:	69 cf       	rjmp	.-302    	; 0x3d80 <SevSeg_voidDoubleAutoCounter+0x98>
void SevSeg_voidDoubleAutoCounter(){
	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter1 = 0;
	s32 Local_Counter2 = 0;

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){
    3eae:	8b 89       	ldd	r24, Y+19	; 0x13
    3eb0:	9c 89       	ldd	r25, Y+20	; 0x14
    3eb2:	ad 89       	ldd	r26, Y+21	; 0x15
    3eb4:	be 89       	ldd	r27, Y+22	; 0x16
    3eb6:	01 96       	adiw	r24, 0x01	; 1
    3eb8:	a1 1d       	adc	r26, r1
    3eba:	b1 1d       	adc	r27, r1
    3ebc:	8b 8b       	std	Y+19, r24	; 0x13
    3ebe:	9c 8b       	std	Y+20, r25	; 0x14
    3ec0:	ad 8b       	std	Y+21, r26	; 0x15
    3ec2:	be 8b       	std	Y+22, r27	; 0x16
    3ec4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ec6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ec8:	ad 89       	ldd	r26, Y+21	; 0x15
    3eca:	be 89       	ldd	r27, Y+22	; 0x16
    3ecc:	8a 30       	cpi	r24, 0x0A	; 10
    3ece:	91 05       	cpc	r25, r1
    3ed0:	a1 05       	cpc	r26, r1
    3ed2:	b1 05       	cpc	r27, r1
    3ed4:	0c f4       	brge	.+2      	; 0x3ed8 <SevSeg_voidDoubleAutoCounter+0x1f0>
    3ed6:	3f cf       	rjmp	.-386    	; 0x3d56 <SevSeg_voidDoubleAutoCounter+0x6e>

			DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
			_delay_ms(Sev_DELAY);
		}
	}
}
    3ed8:	a5 96       	adiw	r28, 0x25	; 37
    3eda:	0f b6       	in	r0, 0x3f	; 63
    3edc:	f8 94       	cli
    3ede:	de bf       	out	0x3e, r29	; 62
    3ee0:	0f be       	out	0x3f, r0	; 63
    3ee2:	cd bf       	out	0x3d, r28	; 61
    3ee4:	cf 91       	pop	r28
    3ee6:	df 91       	pop	r29
    3ee8:	08 95       	ret

00003eea <SevSeg_voidSingleRangeCounter>:

void SevSeg_voidSingleRangeCounter(s8 start, s8 end){
    3eea:	df 93       	push	r29
    3eec:	cf 93       	push	r28
    3eee:	cd b7       	in	r28, 0x3d	; 61
    3ef0:	de b7       	in	r29, 0x3e	; 62
    3ef2:	e1 97       	sbiw	r28, 0x31	; 49
    3ef4:	0f b6       	in	r0, 0x3f	; 63
    3ef6:	f8 94       	cli
    3ef8:	de bf       	out	0x3e, r29	; 62
    3efa:	0f be       	out	0x3f, r0	; 63
    3efc:	cd bf       	out	0x3d, r28	; 61
    3efe:	8b a7       	std	Y+43, r24	; 0x2b
    3f00:	6c a7       	std	Y+44, r22	; 0x2c
	s8 Sev_numbers[] = Sev_Array;
    3f02:	ce 01       	movw	r24, r28
    3f04:	81 96       	adiw	r24, 0x21	; 33
    3f06:	9e a7       	std	Y+46, r25	; 0x2e
    3f08:	8d a7       	std	Y+45, r24	; 0x2d
    3f0a:	e5 ea       	ldi	r30, 0xA5	; 165
    3f0c:	f1 e0       	ldi	r31, 0x01	; 1
    3f0e:	f8 ab       	std	Y+48, r31	; 0x30
    3f10:	ef a7       	std	Y+47, r30	; 0x2f
    3f12:	fa e0       	ldi	r31, 0x0A	; 10
    3f14:	f9 ab       	std	Y+49, r31	; 0x31
    3f16:	ef a5       	ldd	r30, Y+47	; 0x2f
    3f18:	f8 a9       	ldd	r31, Y+48	; 0x30
    3f1a:	00 80       	ld	r0, Z
    3f1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f1e:	98 a9       	ldd	r25, Y+48	; 0x30
    3f20:	01 96       	adiw	r24, 0x01	; 1
    3f22:	98 ab       	std	Y+48, r25	; 0x30
    3f24:	8f a7       	std	Y+47, r24	; 0x2f
    3f26:	ed a5       	ldd	r30, Y+45	; 0x2d
    3f28:	fe a5       	ldd	r31, Y+46	; 0x2e
    3f2a:	00 82       	st	Z, r0
    3f2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f2e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f30:	01 96       	adiw	r24, 0x01	; 1
    3f32:	9e a7       	std	Y+46, r25	; 0x2e
    3f34:	8d a7       	std	Y+45, r24	; 0x2d
    3f36:	99 a9       	ldd	r25, Y+49	; 0x31
    3f38:	91 50       	subi	r25, 0x01	; 1
    3f3a:	99 ab       	std	Y+49, r25	; 0x31
    3f3c:	e9 a9       	ldd	r30, Y+49	; 0x31
    3f3e:	ee 23       	and	r30, r30
    3f40:	51 f7       	brne	.-44     	; 0x3f16 <SevSeg_voidSingleRangeCounter+0x2c>
	s32 Local_Counter2 = 0;
    3f42:	1d 8e       	std	Y+29, r1	; 0x1d
    3f44:	1e 8e       	std	Y+30, r1	; 0x1e
    3f46:	1f 8e       	std	Y+31, r1	; 0x1f
    3f48:	18 a2       	std	Y+32, r1	; 0x20
	if(start >= 0 && start < 10 && end < 10 && end >= 0){
    3f4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f4c:	88 23       	and	r24, r24
    3f4e:	0c f4       	brge	.+2      	; 0x3f52 <SevSeg_voidSingleRangeCounter+0x68>
    3f50:	64 c1       	rjmp	.+712    	; 0x421a <SevSeg_voidSingleRangeCounter+0x330>
    3f52:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f54:	8a 30       	cpi	r24, 0x0A	; 10
    3f56:	0c f0       	brlt	.+2      	; 0x3f5a <SevSeg_voidSingleRangeCounter+0x70>
    3f58:	60 c1       	rjmp	.+704    	; 0x421a <SevSeg_voidSingleRangeCounter+0x330>
    3f5a:	8c a5       	ldd	r24, Y+44	; 0x2c
    3f5c:	8a 30       	cpi	r24, 0x0A	; 10
    3f5e:	0c f0       	brlt	.+2      	; 0x3f62 <SevSeg_voidSingleRangeCounter+0x78>
    3f60:	5c c1       	rjmp	.+696    	; 0x421a <SevSeg_voidSingleRangeCounter+0x330>
    3f62:	8c a5       	ldd	r24, Y+44	; 0x2c
    3f64:	88 23       	and	r24, r24
    3f66:	0c f4       	brge	.+2      	; 0x3f6a <SevSeg_voidSingleRangeCounter+0x80>
    3f68:	58 c1       	rjmp	.+688    	; 0x421a <SevSeg_voidSingleRangeCounter+0x330>

		if(start < end){
    3f6a:	9b a5       	ldd	r25, Y+43	; 0x2b
    3f6c:	8c a5       	ldd	r24, Y+44	; 0x2c
    3f6e:	98 17       	cp	r25, r24
    3f70:	0c f0       	brlt	.+2      	; 0x3f74 <SevSeg_voidSingleRangeCounter+0x8a>
    3f72:	aa c0       	rjmp	.+340    	; 0x40c8 <SevSeg_voidSingleRangeCounter+0x1de>
			for(Local_Counter2 = start; Local_Counter2 <end; Local_Counter2++){
    3f74:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f76:	99 27       	eor	r25, r25
    3f78:	87 fd       	sbrc	r24, 7
    3f7a:	90 95       	com	r25
    3f7c:	a9 2f       	mov	r26, r25
    3f7e:	b9 2f       	mov	r27, r25
    3f80:	8d 8f       	std	Y+29, r24	; 0x1d
    3f82:	9e 8f       	std	Y+30, r25	; 0x1e
    3f84:	af 8f       	std	Y+31, r26	; 0x1f
    3f86:	b8 a3       	std	Y+32, r27	; 0x20
    3f88:	8d c0       	rjmp	.+282    	; 0x40a4 <SevSeg_voidSingleRangeCounter+0x1ba>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    3f8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f8e:	af 8d       	ldd	r26, Y+31	; 0x1f
    3f90:	b8 a1       	ldd	r27, Y+32	; 0x20
    3f92:	9e 01       	movw	r18, r28
    3f94:	2f 5d       	subi	r18, 0xDF	; 223
    3f96:	3f 4f       	sbci	r19, 0xFF	; 255
    3f98:	f9 01       	movw	r30, r18
    3f9a:	e8 0f       	add	r30, r24
    3f9c:	f9 1f       	adc	r31, r25
    3f9e:	80 81       	ld	r24, Z
    3fa0:	98 2f       	mov	r25, r24
    3fa2:	82 e0       	ldi	r24, 0x02	; 2
    3fa4:	69 2f       	mov	r22, r25
    3fa6:	0e 94 b6 1a 	call	0x356c	; 0x356c <DIO_voidSetPortValue>
    3faa:	80 e0       	ldi	r24, 0x00	; 0
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	a0 e2       	ldi	r26, 0x20	; 32
    3fb0:	b1 e4       	ldi	r27, 0x41	; 65
    3fb2:	89 8f       	std	Y+25, r24	; 0x19
    3fb4:	9a 8f       	std	Y+26, r25	; 0x1a
    3fb6:	ab 8f       	std	Y+27, r26	; 0x1b
    3fb8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fba:	69 8d       	ldd	r22, Y+25	; 0x19
    3fbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fc2:	20 e0       	ldi	r18, 0x00	; 0
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	4a e7       	ldi	r20, 0x7A	; 122
    3fc8:	55 e4       	ldi	r21, 0x45	; 69
    3fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fce:	dc 01       	movw	r26, r24
    3fd0:	cb 01       	movw	r24, r22
    3fd2:	8d 8b       	std	Y+21, r24	; 0x15
    3fd4:	9e 8b       	std	Y+22, r25	; 0x16
    3fd6:	af 8b       	std	Y+23, r26	; 0x17
    3fd8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3fda:	6d 89       	ldd	r22, Y+21	; 0x15
    3fdc:	7e 89       	ldd	r23, Y+22	; 0x16
    3fde:	8f 89       	ldd	r24, Y+23	; 0x17
    3fe0:	98 8d       	ldd	r25, Y+24	; 0x18
    3fe2:	20 e0       	ldi	r18, 0x00	; 0
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	40 e8       	ldi	r20, 0x80	; 128
    3fe8:	5f e3       	ldi	r21, 0x3F	; 63
    3fea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fee:	88 23       	and	r24, r24
    3ff0:	2c f4       	brge	.+10     	; 0x3ffc <SevSeg_voidSingleRangeCounter+0x112>
		__ticks = 1;
    3ff2:	81 e0       	ldi	r24, 0x01	; 1
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	9c 8b       	std	Y+20, r25	; 0x14
    3ff8:	8b 8b       	std	Y+19, r24	; 0x13
    3ffa:	3f c0       	rjmp	.+126    	; 0x407a <SevSeg_voidSingleRangeCounter+0x190>
	else if (__tmp > 65535)
    3ffc:	6d 89       	ldd	r22, Y+21	; 0x15
    3ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    4000:	8f 89       	ldd	r24, Y+23	; 0x17
    4002:	98 8d       	ldd	r25, Y+24	; 0x18
    4004:	20 e0       	ldi	r18, 0x00	; 0
    4006:	3f ef       	ldi	r19, 0xFF	; 255
    4008:	4f e7       	ldi	r20, 0x7F	; 127
    400a:	57 e4       	ldi	r21, 0x47	; 71
    400c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4010:	18 16       	cp	r1, r24
    4012:	4c f5       	brge	.+82     	; 0x4066 <SevSeg_voidSingleRangeCounter+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4014:	69 8d       	ldd	r22, Y+25	; 0x19
    4016:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4018:	8b 8d       	ldd	r24, Y+27	; 0x1b
    401a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	40 e2       	ldi	r20, 0x20	; 32
    4022:	51 e4       	ldi	r21, 0x41	; 65
    4024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4028:	dc 01       	movw	r26, r24
    402a:	cb 01       	movw	r24, r22
    402c:	bc 01       	movw	r22, r24
    402e:	cd 01       	movw	r24, r26
    4030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4034:	dc 01       	movw	r26, r24
    4036:	cb 01       	movw	r24, r22
    4038:	9c 8b       	std	Y+20, r25	; 0x14
    403a:	8b 8b       	std	Y+19, r24	; 0x13
    403c:	0f c0       	rjmp	.+30     	; 0x405c <SevSeg_voidSingleRangeCounter+0x172>
    403e:	80 e9       	ldi	r24, 0x90	; 144
    4040:	91 e0       	ldi	r25, 0x01	; 1
    4042:	9a 8b       	std	Y+18, r25	; 0x12
    4044:	89 8b       	std	Y+17, r24	; 0x11
    4046:	89 89       	ldd	r24, Y+17	; 0x11
    4048:	9a 89       	ldd	r25, Y+18	; 0x12
    404a:	01 97       	sbiw	r24, 0x01	; 1
    404c:	f1 f7       	brne	.-4      	; 0x404a <SevSeg_voidSingleRangeCounter+0x160>
    404e:	9a 8b       	std	Y+18, r25	; 0x12
    4050:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4052:	8b 89       	ldd	r24, Y+19	; 0x13
    4054:	9c 89       	ldd	r25, Y+20	; 0x14
    4056:	01 97       	sbiw	r24, 0x01	; 1
    4058:	9c 8b       	std	Y+20, r25	; 0x14
    405a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    405c:	8b 89       	ldd	r24, Y+19	; 0x13
    405e:	9c 89       	ldd	r25, Y+20	; 0x14
    4060:	00 97       	sbiw	r24, 0x00	; 0
    4062:	69 f7       	brne	.-38     	; 0x403e <SevSeg_voidSingleRangeCounter+0x154>
    4064:	14 c0       	rjmp	.+40     	; 0x408e <SevSeg_voidSingleRangeCounter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4066:	6d 89       	ldd	r22, Y+21	; 0x15
    4068:	7e 89       	ldd	r23, Y+22	; 0x16
    406a:	8f 89       	ldd	r24, Y+23	; 0x17
    406c:	98 8d       	ldd	r25, Y+24	; 0x18
    406e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4072:	dc 01       	movw	r26, r24
    4074:	cb 01       	movw	r24, r22
    4076:	9c 8b       	std	Y+20, r25	; 0x14
    4078:	8b 8b       	std	Y+19, r24	; 0x13
    407a:	8b 89       	ldd	r24, Y+19	; 0x13
    407c:	9c 89       	ldd	r25, Y+20	; 0x14
    407e:	98 8b       	std	Y+16, r25	; 0x10
    4080:	8f 87       	std	Y+15, r24	; 0x0f
    4082:	8f 85       	ldd	r24, Y+15	; 0x0f
    4084:	98 89       	ldd	r25, Y+16	; 0x10
    4086:	01 97       	sbiw	r24, 0x01	; 1
    4088:	f1 f7       	brne	.-4      	; 0x4086 <SevSeg_voidSingleRangeCounter+0x19c>
    408a:	98 8b       	std	Y+16, r25	; 0x10
    408c:	8f 87       	std	Y+15, r24	; 0x0f
	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter2 = 0;
	if(start >= 0 && start < 10 && end < 10 && end >= 0){

		if(start < end){
			for(Local_Counter2 = start; Local_Counter2 <end; Local_Counter2++){
    408e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4090:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4092:	af 8d       	ldd	r26, Y+31	; 0x1f
    4094:	b8 a1       	ldd	r27, Y+32	; 0x20
    4096:	01 96       	adiw	r24, 0x01	; 1
    4098:	a1 1d       	adc	r26, r1
    409a:	b1 1d       	adc	r27, r1
    409c:	8d 8f       	std	Y+29, r24	; 0x1d
    409e:	9e 8f       	std	Y+30, r25	; 0x1e
    40a0:	af 8f       	std	Y+31, r26	; 0x1f
    40a2:	b8 a3       	std	Y+32, r27	; 0x20
    40a4:	8c a5       	ldd	r24, Y+44	; 0x2c
    40a6:	28 2f       	mov	r18, r24
    40a8:	33 27       	eor	r19, r19
    40aa:	27 fd       	sbrc	r18, 7
    40ac:	30 95       	com	r19
    40ae:	43 2f       	mov	r20, r19
    40b0:	53 2f       	mov	r21, r19
    40b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    40b6:	af 8d       	ldd	r26, Y+31	; 0x1f
    40b8:	b8 a1       	ldd	r27, Y+32	; 0x20
    40ba:	82 17       	cp	r24, r18
    40bc:	93 07       	cpc	r25, r19
    40be:	a4 07       	cpc	r26, r20
    40c0:	b5 07       	cpc	r27, r21
    40c2:	0c f4       	brge	.+2      	; 0x40c6 <SevSeg_voidSingleRangeCounter+0x1dc>
    40c4:	62 cf       	rjmp	.-316    	; 0x3f8a <SevSeg_voidSingleRangeCounter+0xa0>
    40c6:	a9 c0       	rjmp	.+338    	; 0x421a <SevSeg_voidSingleRangeCounter+0x330>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
		else{
			for(Local_Counter2 = start; Local_Counter2 >= end; Local_Counter2--){
    40c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    40ca:	99 27       	eor	r25, r25
    40cc:	87 fd       	sbrc	r24, 7
    40ce:	90 95       	com	r25
    40d0:	a9 2f       	mov	r26, r25
    40d2:	b9 2f       	mov	r27, r25
    40d4:	8d 8f       	std	Y+29, r24	; 0x1d
    40d6:	9e 8f       	std	Y+30, r25	; 0x1e
    40d8:	af 8f       	std	Y+31, r26	; 0x1f
    40da:	b8 a3       	std	Y+32, r27	; 0x20
    40dc:	8d c0       	rjmp	.+282    	; 0x41f8 <SevSeg_voidSingleRangeCounter+0x30e>

				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    40de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    40e2:	af 8d       	ldd	r26, Y+31	; 0x1f
    40e4:	b8 a1       	ldd	r27, Y+32	; 0x20
    40e6:	9e 01       	movw	r18, r28
    40e8:	2f 5d       	subi	r18, 0xDF	; 223
    40ea:	3f 4f       	sbci	r19, 0xFF	; 255
    40ec:	f9 01       	movw	r30, r18
    40ee:	e8 0f       	add	r30, r24
    40f0:	f9 1f       	adc	r31, r25
    40f2:	80 81       	ld	r24, Z
    40f4:	98 2f       	mov	r25, r24
    40f6:	82 e0       	ldi	r24, 0x02	; 2
    40f8:	69 2f       	mov	r22, r25
    40fa:	0e 94 b6 1a 	call	0x356c	; 0x356c <DIO_voidSetPortValue>
    40fe:	80 e0       	ldi	r24, 0x00	; 0
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	a0 e2       	ldi	r26, 0x20	; 32
    4104:	b1 e4       	ldi	r27, 0x41	; 65
    4106:	8b 87       	std	Y+11, r24	; 0x0b
    4108:	9c 87       	std	Y+12, r25	; 0x0c
    410a:	ad 87       	std	Y+13, r26	; 0x0d
    410c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    410e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4110:	7c 85       	ldd	r23, Y+12	; 0x0c
    4112:	8d 85       	ldd	r24, Y+13	; 0x0d
    4114:	9e 85       	ldd	r25, Y+14	; 0x0e
    4116:	20 e0       	ldi	r18, 0x00	; 0
    4118:	30 e0       	ldi	r19, 0x00	; 0
    411a:	4a e7       	ldi	r20, 0x7A	; 122
    411c:	55 e4       	ldi	r21, 0x45	; 69
    411e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4122:	dc 01       	movw	r26, r24
    4124:	cb 01       	movw	r24, r22
    4126:	8f 83       	std	Y+7, r24	; 0x07
    4128:	98 87       	std	Y+8, r25	; 0x08
    412a:	a9 87       	std	Y+9, r26	; 0x09
    412c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    412e:	6f 81       	ldd	r22, Y+7	; 0x07
    4130:	78 85       	ldd	r23, Y+8	; 0x08
    4132:	89 85       	ldd	r24, Y+9	; 0x09
    4134:	9a 85       	ldd	r25, Y+10	; 0x0a
    4136:	20 e0       	ldi	r18, 0x00	; 0
    4138:	30 e0       	ldi	r19, 0x00	; 0
    413a:	40 e8       	ldi	r20, 0x80	; 128
    413c:	5f e3       	ldi	r21, 0x3F	; 63
    413e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4142:	88 23       	and	r24, r24
    4144:	2c f4       	brge	.+10     	; 0x4150 <SevSeg_voidSingleRangeCounter+0x266>
		__ticks = 1;
    4146:	81 e0       	ldi	r24, 0x01	; 1
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	9e 83       	std	Y+6, r25	; 0x06
    414c:	8d 83       	std	Y+5, r24	; 0x05
    414e:	3f c0       	rjmp	.+126    	; 0x41ce <SevSeg_voidSingleRangeCounter+0x2e4>
	else if (__tmp > 65535)
    4150:	6f 81       	ldd	r22, Y+7	; 0x07
    4152:	78 85       	ldd	r23, Y+8	; 0x08
    4154:	89 85       	ldd	r24, Y+9	; 0x09
    4156:	9a 85       	ldd	r25, Y+10	; 0x0a
    4158:	20 e0       	ldi	r18, 0x00	; 0
    415a:	3f ef       	ldi	r19, 0xFF	; 255
    415c:	4f e7       	ldi	r20, 0x7F	; 127
    415e:	57 e4       	ldi	r21, 0x47	; 71
    4160:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4164:	18 16       	cp	r1, r24
    4166:	4c f5       	brge	.+82     	; 0x41ba <SevSeg_voidSingleRangeCounter+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4168:	6b 85       	ldd	r22, Y+11	; 0x0b
    416a:	7c 85       	ldd	r23, Y+12	; 0x0c
    416c:	8d 85       	ldd	r24, Y+13	; 0x0d
    416e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	40 e2       	ldi	r20, 0x20	; 32
    4176:	51 e4       	ldi	r21, 0x41	; 65
    4178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    417c:	dc 01       	movw	r26, r24
    417e:	cb 01       	movw	r24, r22
    4180:	bc 01       	movw	r22, r24
    4182:	cd 01       	movw	r24, r26
    4184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4188:	dc 01       	movw	r26, r24
    418a:	cb 01       	movw	r24, r22
    418c:	9e 83       	std	Y+6, r25	; 0x06
    418e:	8d 83       	std	Y+5, r24	; 0x05
    4190:	0f c0       	rjmp	.+30     	; 0x41b0 <SevSeg_voidSingleRangeCounter+0x2c6>
    4192:	80 e9       	ldi	r24, 0x90	; 144
    4194:	91 e0       	ldi	r25, 0x01	; 1
    4196:	9c 83       	std	Y+4, r25	; 0x04
    4198:	8b 83       	std	Y+3, r24	; 0x03
    419a:	8b 81       	ldd	r24, Y+3	; 0x03
    419c:	9c 81       	ldd	r25, Y+4	; 0x04
    419e:	01 97       	sbiw	r24, 0x01	; 1
    41a0:	f1 f7       	brne	.-4      	; 0x419e <SevSeg_voidSingleRangeCounter+0x2b4>
    41a2:	9c 83       	std	Y+4, r25	; 0x04
    41a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41a6:	8d 81       	ldd	r24, Y+5	; 0x05
    41a8:	9e 81       	ldd	r25, Y+6	; 0x06
    41aa:	01 97       	sbiw	r24, 0x01	; 1
    41ac:	9e 83       	std	Y+6, r25	; 0x06
    41ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41b0:	8d 81       	ldd	r24, Y+5	; 0x05
    41b2:	9e 81       	ldd	r25, Y+6	; 0x06
    41b4:	00 97       	sbiw	r24, 0x00	; 0
    41b6:	69 f7       	brne	.-38     	; 0x4192 <SevSeg_voidSingleRangeCounter+0x2a8>
    41b8:	14 c0       	rjmp	.+40     	; 0x41e2 <SevSeg_voidSingleRangeCounter+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41ba:	6f 81       	ldd	r22, Y+7	; 0x07
    41bc:	78 85       	ldd	r23, Y+8	; 0x08
    41be:	89 85       	ldd	r24, Y+9	; 0x09
    41c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    41c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c6:	dc 01       	movw	r26, r24
    41c8:	cb 01       	movw	r24, r22
    41ca:	9e 83       	std	Y+6, r25	; 0x06
    41cc:	8d 83       	std	Y+5, r24	; 0x05
    41ce:	8d 81       	ldd	r24, Y+5	; 0x05
    41d0:	9e 81       	ldd	r25, Y+6	; 0x06
    41d2:	9a 83       	std	Y+2, r25	; 0x02
    41d4:	89 83       	std	Y+1, r24	; 0x01
    41d6:	89 81       	ldd	r24, Y+1	; 0x01
    41d8:	9a 81       	ldd	r25, Y+2	; 0x02
    41da:	01 97       	sbiw	r24, 0x01	; 1
    41dc:	f1 f7       	brne	.-4      	; 0x41da <SevSeg_voidSingleRangeCounter+0x2f0>
    41de:	9a 83       	std	Y+2, r25	; 0x02
    41e0:	89 83       	std	Y+1, r24	; 0x01
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
		else{
			for(Local_Counter2 = start; Local_Counter2 >= end; Local_Counter2--){
    41e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    41e6:	af 8d       	ldd	r26, Y+31	; 0x1f
    41e8:	b8 a1       	ldd	r27, Y+32	; 0x20
    41ea:	01 97       	sbiw	r24, 0x01	; 1
    41ec:	a1 09       	sbc	r26, r1
    41ee:	b1 09       	sbc	r27, r1
    41f0:	8d 8f       	std	Y+29, r24	; 0x1d
    41f2:	9e 8f       	std	Y+30, r25	; 0x1e
    41f4:	af 8f       	std	Y+31, r26	; 0x1f
    41f6:	b8 a3       	std	Y+32, r27	; 0x20
    41f8:	8c a5       	ldd	r24, Y+44	; 0x2c
    41fa:	28 2f       	mov	r18, r24
    41fc:	33 27       	eor	r19, r19
    41fe:	27 fd       	sbrc	r18, 7
    4200:	30 95       	com	r19
    4202:	43 2f       	mov	r20, r19
    4204:	53 2f       	mov	r21, r19
    4206:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4208:	9e 8d       	ldd	r25, Y+30	; 0x1e
    420a:	af 8d       	ldd	r26, Y+31	; 0x1f
    420c:	b8 a1       	ldd	r27, Y+32	; 0x20
    420e:	82 17       	cp	r24, r18
    4210:	93 07       	cpc	r25, r19
    4212:	a4 07       	cpc	r26, r20
    4214:	b5 07       	cpc	r27, r21
    4216:	0c f0       	brlt	.+2      	; 0x421a <SevSeg_voidSingleRangeCounter+0x330>
    4218:	62 cf       	rjmp	.-316    	; 0x40de <SevSeg_voidSingleRangeCounter+0x1f4>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
	}
}
    421a:	e1 96       	adiw	r28, 0x31	; 49
    421c:	0f b6       	in	r0, 0x3f	; 63
    421e:	f8 94       	cli
    4220:	de bf       	out	0x3e, r29	; 62
    4222:	0f be       	out	0x3f, r0	; 63
    4224:	cd bf       	out	0x3d, r28	; 61
    4226:	cf 91       	pop	r28
    4228:	df 91       	pop	r29
    422a:	08 95       	ret

0000422c <SevSeg_voidDoubleRangeCounter>:

void SevSeg_voidDoubleRangeCounter(s8 start,s8 end){
    422c:	df 93       	push	r29
    422e:	cf 93       	push	r28
    4230:	cd b7       	in	r28, 0x3d	; 61
    4232:	de b7       	in	r29, 0x3e	; 62
    4234:	e9 97       	sbiw	r28, 0x39	; 57
    4236:	0f b6       	in	r0, 0x3f	; 63
    4238:	f8 94       	cli
    423a:	de bf       	out	0x3e, r29	; 62
    423c:	0f be       	out	0x3f, r0	; 63
    423e:	cd bf       	out	0x3d, r28	; 61
    4240:	8b ab       	std	Y+51, r24	; 0x33
    4242:	6c ab       	std	Y+52, r22	; 0x34
	s8 Sev_numbers[] = Sev_Array;
    4244:	ce 01       	movw	r24, r28
    4246:	89 96       	adiw	r24, 0x29	; 41
    4248:	9e ab       	std	Y+54, r25	; 0x36
    424a:	8d ab       	std	Y+53, r24	; 0x35
    424c:	ef ea       	ldi	r30, 0xAF	; 175
    424e:	f1 e0       	ldi	r31, 0x01	; 1
    4250:	f8 af       	std	Y+56, r31	; 0x38
    4252:	ef ab       	std	Y+55, r30	; 0x37
    4254:	fa e0       	ldi	r31, 0x0A	; 10
    4256:	f9 af       	std	Y+57, r31	; 0x39
    4258:	ef a9       	ldd	r30, Y+55	; 0x37
    425a:	f8 ad       	ldd	r31, Y+56	; 0x38
    425c:	00 80       	ld	r0, Z
    425e:	8f a9       	ldd	r24, Y+55	; 0x37
    4260:	98 ad       	ldd	r25, Y+56	; 0x38
    4262:	01 96       	adiw	r24, 0x01	; 1
    4264:	98 af       	std	Y+56, r25	; 0x38
    4266:	8f ab       	std	Y+55, r24	; 0x37
    4268:	ed a9       	ldd	r30, Y+53	; 0x35
    426a:	fe a9       	ldd	r31, Y+54	; 0x36
    426c:	00 82       	st	Z, r0
    426e:	8d a9       	ldd	r24, Y+53	; 0x35
    4270:	9e a9       	ldd	r25, Y+54	; 0x36
    4272:	01 96       	adiw	r24, 0x01	; 1
    4274:	9e ab       	std	Y+54, r25	; 0x36
    4276:	8d ab       	std	Y+53, r24	; 0x35
    4278:	99 ad       	ldd	r25, Y+57	; 0x39
    427a:	91 50       	subi	r25, 0x01	; 1
    427c:	99 af       	std	Y+57, r25	; 0x39
    427e:	e9 ad       	ldd	r30, Y+57	; 0x39
    4280:	ee 23       	and	r30, r30
    4282:	51 f7       	brne	.-44     	; 0x4258 <SevSeg_voidDoubleRangeCounter+0x2c>

	s8 Local_SevSegTwoStart = start / 10;
    4284:	8b a9       	ldd	r24, Y+51	; 0x33
    4286:	9a e0       	ldi	r25, 0x0A	; 10
    4288:	69 2f       	mov	r22, r25
    428a:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <__divmodqi4>
    428e:	88 a7       	std	Y+40, r24	; 0x28
	s8 Local_SevSegOneStart = start % 10;
    4290:	8b a9       	ldd	r24, Y+51	; 0x33
    4292:	9a e0       	ldi	r25, 0x0A	; 10
    4294:	69 2f       	mov	r22, r25
    4296:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <__divmodqi4>
    429a:	89 2f       	mov	r24, r25
    429c:	8f a3       	std	Y+39, r24	; 0x27

	s8 Local_SevSegTwoEnd = end / 10;
    429e:	8c a9       	ldd	r24, Y+52	; 0x34
    42a0:	9a e0       	ldi	r25, 0x0A	; 10
    42a2:	69 2f       	mov	r22, r25
    42a4:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <__divmodqi4>
    42a8:	8e a3       	std	Y+38, r24	; 0x26
	s8 Local_SevSegOneEnd = end % 10;
    42aa:	8c a9       	ldd	r24, Y+52	; 0x34
    42ac:	9a e0       	ldi	r25, 0x0A	; 10
    42ae:	69 2f       	mov	r22, r25
    42b0:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <__divmodqi4>
    42b4:	89 2f       	mov	r24, r25
    42b6:	8d a3       	std	Y+37, r24	; 0x25

	s32 Local_Counter1 = 0;
    42b8:	19 a2       	std	Y+33, r1	; 0x21
    42ba:	1a a2       	std	Y+34, r1	; 0x22
    42bc:	1b a2       	std	Y+35, r1	; 0x23
    42be:	1c a2       	std	Y+36, r1	; 0x24
	s32 Local_Counter2 = 0;
    42c0:	1d 8e       	std	Y+29, r1	; 0x1d
    42c2:	1e 8e       	std	Y+30, r1	; 0x1e
    42c4:	1f 8e       	std	Y+31, r1	; 0x1f
    42c6:	18 a2       	std	Y+32, r1	; 0x20

	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    42c8:	88 a5       	ldd	r24, Y+40	; 0x28
    42ca:	88 23       	and	r24, r24
    42cc:	0c f4       	brge	.+2      	; 0x42d0 <SevSeg_voidDoubleRangeCounter+0xa4>
    42ce:	05 c2       	rjmp	.+1034   	; 0x46da <SevSeg_voidDoubleRangeCounter+0x4ae>
    42d0:	88 a5       	ldd	r24, Y+40	; 0x28
    42d2:	8a 30       	cpi	r24, 0x0A	; 10
    42d4:	0c f0       	brlt	.+2      	; 0x42d8 <SevSeg_voidDoubleRangeCounter+0xac>
    42d6:	01 c2       	rjmp	.+1026   	; 0x46da <SevSeg_voidDoubleRangeCounter+0x4ae>
    42d8:	8e a1       	ldd	r24, Y+38	; 0x26
    42da:	8a 30       	cpi	r24, 0x0A	; 10
    42dc:	0c f0       	brlt	.+2      	; 0x42e0 <SevSeg_voidDoubleRangeCounter+0xb4>
    42de:	fd c1       	rjmp	.+1018   	; 0x46da <SevSeg_voidDoubleRangeCounter+0x4ae>
    42e0:	8e a1       	ldd	r24, Y+38	; 0x26
    42e2:	88 23       	and	r24, r24
    42e4:	0c f4       	brge	.+2      	; 0x42e8 <SevSeg_voidDoubleRangeCounter+0xbc>
    42e6:	f9 c1       	rjmp	.+1010   	; 0x46da <SevSeg_voidDoubleRangeCounter+0x4ae>

		if(start < end){
    42e8:	9b a9       	ldd	r25, Y+51	; 0x33
    42ea:	8c a9       	ldd	r24, Y+52	; 0x34
    42ec:	98 17       	cp	r25, r24
    42ee:	0c f0       	brlt	.+2      	; 0x42f2 <SevSeg_voidDoubleRangeCounter+0xc6>
    42f0:	fc c0       	rjmp	.+504    	; 0x44ea <SevSeg_voidDoubleRangeCounter+0x2be>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    42f2:	88 a5       	ldd	r24, Y+40	; 0x28
    42f4:	99 27       	eor	r25, r25
    42f6:	87 fd       	sbrc	r24, 7
    42f8:	90 95       	com	r25
    42fa:	a9 2f       	mov	r26, r25
    42fc:	b9 2f       	mov	r27, r25
    42fe:	89 a3       	std	Y+33, r24	; 0x21
    4300:	9a a3       	std	Y+34, r25	; 0x22
    4302:	ab a3       	std	Y+35, r26	; 0x23
    4304:	bc a3       	std	Y+36, r27	; 0x24
    4306:	df c0       	rjmp	.+446    	; 0x44c6 <SevSeg_voidDoubleRangeCounter+0x29a>
				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    4308:	89 a1       	ldd	r24, Y+33	; 0x21
    430a:	9a a1       	ldd	r25, Y+34	; 0x22
    430c:	ab a1       	ldd	r26, Y+35	; 0x23
    430e:	bc a1       	ldd	r27, Y+36	; 0x24
    4310:	9e 01       	movw	r18, r28
    4312:	27 5d       	subi	r18, 0xD7	; 215
    4314:	3f 4f       	sbci	r19, 0xFF	; 255
    4316:	f9 01       	movw	r30, r18
    4318:	e8 0f       	add	r30, r24
    431a:	f9 1f       	adc	r31, r25
    431c:	80 81       	ld	r24, Z
    431e:	98 2f       	mov	r25, r24
    4320:	84 e0       	ldi	r24, 0x04	; 4
    4322:	69 2f       	mov	r22, r25
    4324:	0e 94 b6 1a 	call	0x356c	; 0x356c <DIO_voidSetPortValue>

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    4328:	8f a1       	ldd	r24, Y+39	; 0x27
    432a:	99 27       	eor	r25, r25
    432c:	87 fd       	sbrc	r24, 7
    432e:	90 95       	com	r25
    4330:	a9 2f       	mov	r26, r25
    4332:	b9 2f       	mov	r27, r25
    4334:	8d 8f       	std	Y+29, r24	; 0x1d
    4336:	9e 8f       	std	Y+30, r25	; 0x1e
    4338:	af 8f       	std	Y+31, r26	; 0x1f
    433a:	b8 a3       	std	Y+32, r27	; 0x20
    433c:	ae c0       	rjmp	.+348    	; 0x449a <SevSeg_voidDoubleRangeCounter+0x26e>
					DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    433e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4340:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4342:	af 8d       	ldd	r26, Y+31	; 0x1f
    4344:	b8 a1       	ldd	r27, Y+32	; 0x20
    4346:	9e 01       	movw	r18, r28
    4348:	27 5d       	subi	r18, 0xD7	; 215
    434a:	3f 4f       	sbci	r19, 0xFF	; 255
    434c:	f9 01       	movw	r30, r18
    434e:	e8 0f       	add	r30, r24
    4350:	f9 1f       	adc	r31, r25
    4352:	80 81       	ld	r24, Z
    4354:	98 2f       	mov	r25, r24
    4356:	82 e0       	ldi	r24, 0x02	; 2
    4358:	69 2f       	mov	r22, r25
    435a:	0e 94 b6 1a 	call	0x356c	; 0x356c <DIO_voidSetPortValue>
    435e:	80 e0       	ldi	r24, 0x00	; 0
    4360:	90 e0       	ldi	r25, 0x00	; 0
    4362:	a0 e2       	ldi	r26, 0x20	; 32
    4364:	b1 e4       	ldi	r27, 0x41	; 65
    4366:	89 8f       	std	Y+25, r24	; 0x19
    4368:	9a 8f       	std	Y+26, r25	; 0x1a
    436a:	ab 8f       	std	Y+27, r26	; 0x1b
    436c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    436e:	69 8d       	ldd	r22, Y+25	; 0x19
    4370:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4372:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4374:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4376:	20 e0       	ldi	r18, 0x00	; 0
    4378:	30 e0       	ldi	r19, 0x00	; 0
    437a:	4a e7       	ldi	r20, 0x7A	; 122
    437c:	55 e4       	ldi	r21, 0x45	; 69
    437e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4382:	dc 01       	movw	r26, r24
    4384:	cb 01       	movw	r24, r22
    4386:	8d 8b       	std	Y+21, r24	; 0x15
    4388:	9e 8b       	std	Y+22, r25	; 0x16
    438a:	af 8b       	std	Y+23, r26	; 0x17
    438c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    438e:	6d 89       	ldd	r22, Y+21	; 0x15
    4390:	7e 89       	ldd	r23, Y+22	; 0x16
    4392:	8f 89       	ldd	r24, Y+23	; 0x17
    4394:	98 8d       	ldd	r25, Y+24	; 0x18
    4396:	20 e0       	ldi	r18, 0x00	; 0
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	40 e8       	ldi	r20, 0x80	; 128
    439c:	5f e3       	ldi	r21, 0x3F	; 63
    439e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43a2:	88 23       	and	r24, r24
    43a4:	2c f4       	brge	.+10     	; 0x43b0 <SevSeg_voidDoubleRangeCounter+0x184>
		__ticks = 1;
    43a6:	81 e0       	ldi	r24, 0x01	; 1
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	9c 8b       	std	Y+20, r25	; 0x14
    43ac:	8b 8b       	std	Y+19, r24	; 0x13
    43ae:	3f c0       	rjmp	.+126    	; 0x442e <SevSeg_voidDoubleRangeCounter+0x202>
	else if (__tmp > 65535)
    43b0:	6d 89       	ldd	r22, Y+21	; 0x15
    43b2:	7e 89       	ldd	r23, Y+22	; 0x16
    43b4:	8f 89       	ldd	r24, Y+23	; 0x17
    43b6:	98 8d       	ldd	r25, Y+24	; 0x18
    43b8:	20 e0       	ldi	r18, 0x00	; 0
    43ba:	3f ef       	ldi	r19, 0xFF	; 255
    43bc:	4f e7       	ldi	r20, 0x7F	; 127
    43be:	57 e4       	ldi	r21, 0x47	; 71
    43c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43c4:	18 16       	cp	r1, r24
    43c6:	4c f5       	brge	.+82     	; 0x441a <SevSeg_voidDoubleRangeCounter+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43c8:	69 8d       	ldd	r22, Y+25	; 0x19
    43ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43d0:	20 e0       	ldi	r18, 0x00	; 0
    43d2:	30 e0       	ldi	r19, 0x00	; 0
    43d4:	40 e2       	ldi	r20, 0x20	; 32
    43d6:	51 e4       	ldi	r21, 0x41	; 65
    43d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43dc:	dc 01       	movw	r26, r24
    43de:	cb 01       	movw	r24, r22
    43e0:	bc 01       	movw	r22, r24
    43e2:	cd 01       	movw	r24, r26
    43e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43e8:	dc 01       	movw	r26, r24
    43ea:	cb 01       	movw	r24, r22
    43ec:	9c 8b       	std	Y+20, r25	; 0x14
    43ee:	8b 8b       	std	Y+19, r24	; 0x13
    43f0:	0f c0       	rjmp	.+30     	; 0x4410 <SevSeg_voidDoubleRangeCounter+0x1e4>
    43f2:	80 e9       	ldi	r24, 0x90	; 144
    43f4:	91 e0       	ldi	r25, 0x01	; 1
    43f6:	9a 8b       	std	Y+18, r25	; 0x12
    43f8:	89 8b       	std	Y+17, r24	; 0x11
    43fa:	89 89       	ldd	r24, Y+17	; 0x11
    43fc:	9a 89       	ldd	r25, Y+18	; 0x12
    43fe:	01 97       	sbiw	r24, 0x01	; 1
    4400:	f1 f7       	brne	.-4      	; 0x43fe <SevSeg_voidDoubleRangeCounter+0x1d2>
    4402:	9a 8b       	std	Y+18, r25	; 0x12
    4404:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4406:	8b 89       	ldd	r24, Y+19	; 0x13
    4408:	9c 89       	ldd	r25, Y+20	; 0x14
    440a:	01 97       	sbiw	r24, 0x01	; 1
    440c:	9c 8b       	std	Y+20, r25	; 0x14
    440e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4410:	8b 89       	ldd	r24, Y+19	; 0x13
    4412:	9c 89       	ldd	r25, Y+20	; 0x14
    4414:	00 97       	sbiw	r24, 0x00	; 0
    4416:	69 f7       	brne	.-38     	; 0x43f2 <SevSeg_voidDoubleRangeCounter+0x1c6>
    4418:	14 c0       	rjmp	.+40     	; 0x4442 <SevSeg_voidDoubleRangeCounter+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    441a:	6d 89       	ldd	r22, Y+21	; 0x15
    441c:	7e 89       	ldd	r23, Y+22	; 0x16
    441e:	8f 89       	ldd	r24, Y+23	; 0x17
    4420:	98 8d       	ldd	r25, Y+24	; 0x18
    4422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4426:	dc 01       	movw	r26, r24
    4428:	cb 01       	movw	r24, r22
    442a:	9c 8b       	std	Y+20, r25	; 0x14
    442c:	8b 8b       	std	Y+19, r24	; 0x13
    442e:	8b 89       	ldd	r24, Y+19	; 0x13
    4430:	9c 89       	ldd	r25, Y+20	; 0x14
    4432:	98 8b       	std	Y+16, r25	; 0x10
    4434:	8f 87       	std	Y+15, r24	; 0x0f
    4436:	8f 85       	ldd	r24, Y+15	; 0x0f
    4438:	98 89       	ldd	r25, Y+16	; 0x10
    443a:	01 97       	sbiw	r24, 0x01	; 1
    443c:	f1 f7       	brne	.-4      	; 0x443a <SevSeg_voidDoubleRangeCounter+0x20e>
    443e:	98 8b       	std	Y+16, r25	; 0x10
    4440:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(Sev_DELAY);

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    4442:	8d a1       	ldd	r24, Y+37	; 0x25
    4444:	28 2f       	mov	r18, r24
    4446:	33 27       	eor	r19, r19
    4448:	27 fd       	sbrc	r18, 7
    444a:	30 95       	com	r19
    444c:	43 2f       	mov	r20, r19
    444e:	53 2f       	mov	r21, r19
    4450:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4452:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4454:	af 8d       	ldd	r26, Y+31	; 0x1f
    4456:	b8 a1       	ldd	r27, Y+32	; 0x20
    4458:	28 17       	cp	r18, r24
    445a:	39 07       	cpc	r19, r25
    445c:	4a 07       	cpc	r20, r26
    445e:	5b 07       	cpc	r21, r27
    4460:	89 f4       	brne	.+34     	; 0x4484 <SevSeg_voidDoubleRangeCounter+0x258>
    4462:	8e a1       	ldd	r24, Y+38	; 0x26
    4464:	28 2f       	mov	r18, r24
    4466:	33 27       	eor	r19, r19
    4468:	27 fd       	sbrc	r18, 7
    446a:	30 95       	com	r19
    446c:	43 2f       	mov	r20, r19
    446e:	53 2f       	mov	r21, r19
    4470:	89 a1       	ldd	r24, Y+33	; 0x21
    4472:	9a a1       	ldd	r25, Y+34	; 0x22
    4474:	ab a1       	ldd	r26, Y+35	; 0x23
    4476:	bc a1       	ldd	r27, Y+36	; 0x24
    4478:	28 17       	cp	r18, r24
    447a:	39 07       	cpc	r19, r25
    447c:	4a 07       	cpc	r20, r26
    447e:	5b 07       	cpc	r21, r27
    4480:	09 f4       	brne	.+2      	; 0x4484 <SevSeg_voidDoubleRangeCounter+0x258>
    4482:	2b c1       	rjmp	.+598    	; 0x46da <SevSeg_voidDoubleRangeCounter+0x4ae>

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    4484:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4486:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4488:	af 8d       	ldd	r26, Y+31	; 0x1f
    448a:	b8 a1       	ldd	r27, Y+32	; 0x20
    448c:	01 96       	adiw	r24, 0x01	; 1
    448e:	a1 1d       	adc	r26, r1
    4490:	b1 1d       	adc	r27, r1
    4492:	8d 8f       	std	Y+29, r24	; 0x1d
    4494:	9e 8f       	std	Y+30, r25	; 0x1e
    4496:	af 8f       	std	Y+31, r26	; 0x1f
    4498:	b8 a3       	std	Y+32, r27	; 0x20
    449a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    449c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    449e:	af 8d       	ldd	r26, Y+31	; 0x1f
    44a0:	b8 a1       	ldd	r27, Y+32	; 0x20
    44a2:	8a 30       	cpi	r24, 0x0A	; 10
    44a4:	91 05       	cpc	r25, r1
    44a6:	a1 05       	cpc	r26, r1
    44a8:	b1 05       	cpc	r27, r1
    44aa:	0c f4       	brge	.+2      	; 0x44ae <SevSeg_voidDoubleRangeCounter+0x282>
    44ac:	48 cf       	rjmp	.-368    	; 0x433e <SevSeg_voidDoubleRangeCounter+0x112>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    44ae:	1f a2       	std	Y+39, r1	; 0x27
	s32 Local_Counter2 = 0;

	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    44b0:	89 a1       	ldd	r24, Y+33	; 0x21
    44b2:	9a a1       	ldd	r25, Y+34	; 0x22
    44b4:	ab a1       	ldd	r26, Y+35	; 0x23
    44b6:	bc a1       	ldd	r27, Y+36	; 0x24
    44b8:	01 96       	adiw	r24, 0x01	; 1
    44ba:	a1 1d       	adc	r26, r1
    44bc:	b1 1d       	adc	r27, r1
    44be:	89 a3       	std	Y+33, r24	; 0x21
    44c0:	9a a3       	std	Y+34, r25	; 0x22
    44c2:	ab a3       	std	Y+35, r26	; 0x23
    44c4:	bc a3       	std	Y+36, r27	; 0x24
    44c6:	8e a1       	ldd	r24, Y+38	; 0x26
    44c8:	28 2f       	mov	r18, r24
    44ca:	33 27       	eor	r19, r19
    44cc:	27 fd       	sbrc	r18, 7
    44ce:	30 95       	com	r19
    44d0:	43 2f       	mov	r20, r19
    44d2:	53 2f       	mov	r21, r19
    44d4:	89 a1       	ldd	r24, Y+33	; 0x21
    44d6:	9a a1       	ldd	r25, Y+34	; 0x22
    44d8:	ab a1       	ldd	r26, Y+35	; 0x23
    44da:	bc a1       	ldd	r27, Y+36	; 0x24
    44dc:	28 17       	cp	r18, r24
    44de:	39 07       	cpc	r19, r25
    44e0:	4a 07       	cpc	r20, r26
    44e2:	5b 07       	cpc	r21, r27
    44e4:	0c f0       	brlt	.+2      	; 0x44e8 <SevSeg_voidDoubleRangeCounter+0x2bc>
    44e6:	10 cf       	rjmp	.-480    	; 0x4308 <SevSeg_voidDoubleRangeCounter+0xdc>
    44e8:	f8 c0       	rjmp	.+496    	; 0x46da <SevSeg_voidDoubleRangeCounter+0x4ae>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    44ea:	88 a5       	ldd	r24, Y+40	; 0x28
    44ec:	99 27       	eor	r25, r25
    44ee:	87 fd       	sbrc	r24, 7
    44f0:	90 95       	com	r25
    44f2:	a9 2f       	mov	r26, r25
    44f4:	b9 2f       	mov	r27, r25
    44f6:	89 a3       	std	Y+33, r24	; 0x21
    44f8:	9a a3       	std	Y+34, r25	; 0x22
    44fa:	ab a3       	std	Y+35, r26	; 0x23
    44fc:	bc a3       	std	Y+36, r27	; 0x24
    44fe:	dc c0       	rjmp	.+440    	; 0x46b8 <SevSeg_voidDoubleRangeCounter+0x48c>

				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    4500:	89 a1       	ldd	r24, Y+33	; 0x21
    4502:	9a a1       	ldd	r25, Y+34	; 0x22
    4504:	ab a1       	ldd	r26, Y+35	; 0x23
    4506:	bc a1       	ldd	r27, Y+36	; 0x24
    4508:	9e 01       	movw	r18, r28
    450a:	27 5d       	subi	r18, 0xD7	; 215
    450c:	3f 4f       	sbci	r19, 0xFF	; 255
    450e:	f9 01       	movw	r30, r18
    4510:	e8 0f       	add	r30, r24
    4512:	f9 1f       	adc	r31, r25
    4514:	80 81       	ld	r24, Z
    4516:	98 2f       	mov	r25, r24
    4518:	84 e0       	ldi	r24, 0x04	; 4
    451a:	69 2f       	mov	r22, r25
    451c:	0e 94 b6 1a 	call	0x356c	; 0x356c <DIO_voidSetPortValue>

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    4520:	8f a1       	ldd	r24, Y+39	; 0x27
    4522:	99 27       	eor	r25, r25
    4524:	87 fd       	sbrc	r24, 7
    4526:	90 95       	com	r25
    4528:	a9 2f       	mov	r26, r25
    452a:	b9 2f       	mov	r27, r25
    452c:	8d 8f       	std	Y+29, r24	; 0x1d
    452e:	9e 8f       	std	Y+30, r25	; 0x1e
    4530:	af 8f       	std	Y+31, r26	; 0x1f
    4532:	b8 a3       	std	Y+32, r27	; 0x20
    4534:	ad c0       	rjmp	.+346    	; 0x4690 <SevSeg_voidDoubleRangeCounter+0x464>

					DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    4536:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4538:	9e 8d       	ldd	r25, Y+30	; 0x1e
    453a:	af 8d       	ldd	r26, Y+31	; 0x1f
    453c:	b8 a1       	ldd	r27, Y+32	; 0x20
    453e:	9e 01       	movw	r18, r28
    4540:	27 5d       	subi	r18, 0xD7	; 215
    4542:	3f 4f       	sbci	r19, 0xFF	; 255
    4544:	f9 01       	movw	r30, r18
    4546:	e8 0f       	add	r30, r24
    4548:	f9 1f       	adc	r31, r25
    454a:	80 81       	ld	r24, Z
    454c:	98 2f       	mov	r25, r24
    454e:	82 e0       	ldi	r24, 0x02	; 2
    4550:	69 2f       	mov	r22, r25
    4552:	0e 94 b6 1a 	call	0x356c	; 0x356c <DIO_voidSetPortValue>
    4556:	80 e0       	ldi	r24, 0x00	; 0
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	a0 e2       	ldi	r26, 0x20	; 32
    455c:	b1 e4       	ldi	r27, 0x41	; 65
    455e:	8b 87       	std	Y+11, r24	; 0x0b
    4560:	9c 87       	std	Y+12, r25	; 0x0c
    4562:	ad 87       	std	Y+13, r26	; 0x0d
    4564:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4566:	6b 85       	ldd	r22, Y+11	; 0x0b
    4568:	7c 85       	ldd	r23, Y+12	; 0x0c
    456a:	8d 85       	ldd	r24, Y+13	; 0x0d
    456c:	9e 85       	ldd	r25, Y+14	; 0x0e
    456e:	20 e0       	ldi	r18, 0x00	; 0
    4570:	30 e0       	ldi	r19, 0x00	; 0
    4572:	4a e7       	ldi	r20, 0x7A	; 122
    4574:	55 e4       	ldi	r21, 0x45	; 69
    4576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    457a:	dc 01       	movw	r26, r24
    457c:	cb 01       	movw	r24, r22
    457e:	8f 83       	std	Y+7, r24	; 0x07
    4580:	98 87       	std	Y+8, r25	; 0x08
    4582:	a9 87       	std	Y+9, r26	; 0x09
    4584:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4586:	6f 81       	ldd	r22, Y+7	; 0x07
    4588:	78 85       	ldd	r23, Y+8	; 0x08
    458a:	89 85       	ldd	r24, Y+9	; 0x09
    458c:	9a 85       	ldd	r25, Y+10	; 0x0a
    458e:	20 e0       	ldi	r18, 0x00	; 0
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	40 e8       	ldi	r20, 0x80	; 128
    4594:	5f e3       	ldi	r21, 0x3F	; 63
    4596:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    459a:	88 23       	and	r24, r24
    459c:	2c f4       	brge	.+10     	; 0x45a8 <SevSeg_voidDoubleRangeCounter+0x37c>
		__ticks = 1;
    459e:	81 e0       	ldi	r24, 0x01	; 1
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	9e 83       	std	Y+6, r25	; 0x06
    45a4:	8d 83       	std	Y+5, r24	; 0x05
    45a6:	3f c0       	rjmp	.+126    	; 0x4626 <SevSeg_voidDoubleRangeCounter+0x3fa>
	else if (__tmp > 65535)
    45a8:	6f 81       	ldd	r22, Y+7	; 0x07
    45aa:	78 85       	ldd	r23, Y+8	; 0x08
    45ac:	89 85       	ldd	r24, Y+9	; 0x09
    45ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    45b0:	20 e0       	ldi	r18, 0x00	; 0
    45b2:	3f ef       	ldi	r19, 0xFF	; 255
    45b4:	4f e7       	ldi	r20, 0x7F	; 127
    45b6:	57 e4       	ldi	r21, 0x47	; 71
    45b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45bc:	18 16       	cp	r1, r24
    45be:	4c f5       	brge	.+82     	; 0x4612 <SevSeg_voidDoubleRangeCounter+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    45c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    45c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    45c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    45c8:	20 e0       	ldi	r18, 0x00	; 0
    45ca:	30 e0       	ldi	r19, 0x00	; 0
    45cc:	40 e2       	ldi	r20, 0x20	; 32
    45ce:	51 e4       	ldi	r21, 0x41	; 65
    45d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45d4:	dc 01       	movw	r26, r24
    45d6:	cb 01       	movw	r24, r22
    45d8:	bc 01       	movw	r22, r24
    45da:	cd 01       	movw	r24, r26
    45dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45e0:	dc 01       	movw	r26, r24
    45e2:	cb 01       	movw	r24, r22
    45e4:	9e 83       	std	Y+6, r25	; 0x06
    45e6:	8d 83       	std	Y+5, r24	; 0x05
    45e8:	0f c0       	rjmp	.+30     	; 0x4608 <SevSeg_voidDoubleRangeCounter+0x3dc>
    45ea:	80 e9       	ldi	r24, 0x90	; 144
    45ec:	91 e0       	ldi	r25, 0x01	; 1
    45ee:	9c 83       	std	Y+4, r25	; 0x04
    45f0:	8b 83       	std	Y+3, r24	; 0x03
    45f2:	8b 81       	ldd	r24, Y+3	; 0x03
    45f4:	9c 81       	ldd	r25, Y+4	; 0x04
    45f6:	01 97       	sbiw	r24, 0x01	; 1
    45f8:	f1 f7       	brne	.-4      	; 0x45f6 <SevSeg_voidDoubleRangeCounter+0x3ca>
    45fa:	9c 83       	std	Y+4, r25	; 0x04
    45fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4600:	9e 81       	ldd	r25, Y+6	; 0x06
    4602:	01 97       	sbiw	r24, 0x01	; 1
    4604:	9e 83       	std	Y+6, r25	; 0x06
    4606:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4608:	8d 81       	ldd	r24, Y+5	; 0x05
    460a:	9e 81       	ldd	r25, Y+6	; 0x06
    460c:	00 97       	sbiw	r24, 0x00	; 0
    460e:	69 f7       	brne	.-38     	; 0x45ea <SevSeg_voidDoubleRangeCounter+0x3be>
    4610:	14 c0       	rjmp	.+40     	; 0x463a <SevSeg_voidDoubleRangeCounter+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4612:	6f 81       	ldd	r22, Y+7	; 0x07
    4614:	78 85       	ldd	r23, Y+8	; 0x08
    4616:	89 85       	ldd	r24, Y+9	; 0x09
    4618:	9a 85       	ldd	r25, Y+10	; 0x0a
    461a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    461e:	dc 01       	movw	r26, r24
    4620:	cb 01       	movw	r24, r22
    4622:	9e 83       	std	Y+6, r25	; 0x06
    4624:	8d 83       	std	Y+5, r24	; 0x05
    4626:	8d 81       	ldd	r24, Y+5	; 0x05
    4628:	9e 81       	ldd	r25, Y+6	; 0x06
    462a:	9a 83       	std	Y+2, r25	; 0x02
    462c:	89 83       	std	Y+1, r24	; 0x01
    462e:	89 81       	ldd	r24, Y+1	; 0x01
    4630:	9a 81       	ldd	r25, Y+2	; 0x02
    4632:	01 97       	sbiw	r24, 0x01	; 1
    4634:	f1 f7       	brne	.-4      	; 0x4632 <SevSeg_voidDoubleRangeCounter+0x406>
    4636:	9a 83       	std	Y+2, r25	; 0x02
    4638:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    463a:	8d a1       	ldd	r24, Y+37	; 0x25
    463c:	28 2f       	mov	r18, r24
    463e:	33 27       	eor	r19, r19
    4640:	27 fd       	sbrc	r18, 7
    4642:	30 95       	com	r19
    4644:	43 2f       	mov	r20, r19
    4646:	53 2f       	mov	r21, r19
    4648:	8d 8d       	ldd	r24, Y+29	; 0x1d
    464a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    464c:	af 8d       	ldd	r26, Y+31	; 0x1f
    464e:	b8 a1       	ldd	r27, Y+32	; 0x20
    4650:	28 17       	cp	r18, r24
    4652:	39 07       	cpc	r19, r25
    4654:	4a 07       	cpc	r20, r26
    4656:	5b 07       	cpc	r21, r27
    4658:	81 f4       	brne	.+32     	; 0x467a <SevSeg_voidDoubleRangeCounter+0x44e>
    465a:	8e a1       	ldd	r24, Y+38	; 0x26
    465c:	28 2f       	mov	r18, r24
    465e:	33 27       	eor	r19, r19
    4660:	27 fd       	sbrc	r18, 7
    4662:	30 95       	com	r19
    4664:	43 2f       	mov	r20, r19
    4666:	53 2f       	mov	r21, r19
    4668:	89 a1       	ldd	r24, Y+33	; 0x21
    466a:	9a a1       	ldd	r25, Y+34	; 0x22
    466c:	ab a1       	ldd	r26, Y+35	; 0x23
    466e:	bc a1       	ldd	r27, Y+36	; 0x24
    4670:	28 17       	cp	r18, r24
    4672:	39 07       	cpc	r19, r25
    4674:	4a 07       	cpc	r20, r26
    4676:	5b 07       	cpc	r21, r27
    4678:	81 f1       	breq	.+96     	; 0x46da <SevSeg_voidDoubleRangeCounter+0x4ae>
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    467a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    467c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    467e:	af 8d       	ldd	r26, Y+31	; 0x1f
    4680:	b8 a1       	ldd	r27, Y+32	; 0x20
    4682:	01 97       	sbiw	r24, 0x01	; 1
    4684:	a1 09       	sbc	r26, r1
    4686:	b1 09       	sbc	r27, r1
    4688:	8d 8f       	std	Y+29, r24	; 0x1d
    468a:	9e 8f       	std	Y+30, r25	; 0x1e
    468c:	af 8f       	std	Y+31, r26	; 0x1f
    468e:	b8 a3       	std	Y+32, r27	; 0x20
    4690:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4692:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4694:	af 8d       	ldd	r26, Y+31	; 0x1f
    4696:	b8 a1       	ldd	r27, Y+32	; 0x20
    4698:	bb 23       	and	r27, r27
    469a:	0c f0       	brlt	.+2      	; 0x469e <SevSeg_voidDoubleRangeCounter+0x472>
    469c:	4c cf       	rjmp	.-360    	; 0x4536 <SevSeg_voidDoubleRangeCounter+0x30a>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 9;
    469e:	89 e0       	ldi	r24, 0x09	; 9
    46a0:	8f a3       	std	Y+39, r24	; 0x27

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    46a2:	89 a1       	ldd	r24, Y+33	; 0x21
    46a4:	9a a1       	ldd	r25, Y+34	; 0x22
    46a6:	ab a1       	ldd	r26, Y+35	; 0x23
    46a8:	bc a1       	ldd	r27, Y+36	; 0x24
    46aa:	01 97       	sbiw	r24, 0x01	; 1
    46ac:	a1 09       	sbc	r26, r1
    46ae:	b1 09       	sbc	r27, r1
    46b0:	89 a3       	std	Y+33, r24	; 0x21
    46b2:	9a a3       	std	Y+34, r25	; 0x22
    46b4:	ab a3       	std	Y+35, r26	; 0x23
    46b6:	bc a3       	std	Y+36, r27	; 0x24
    46b8:	8e a1       	ldd	r24, Y+38	; 0x26
    46ba:	28 2f       	mov	r18, r24
    46bc:	33 27       	eor	r19, r19
    46be:	27 fd       	sbrc	r18, 7
    46c0:	30 95       	com	r19
    46c2:	43 2f       	mov	r20, r19
    46c4:	53 2f       	mov	r21, r19
    46c6:	89 a1       	ldd	r24, Y+33	; 0x21
    46c8:	9a a1       	ldd	r25, Y+34	; 0x22
    46ca:	ab a1       	ldd	r26, Y+35	; 0x23
    46cc:	bc a1       	ldd	r27, Y+36	; 0x24
    46ce:	82 17       	cp	r24, r18
    46d0:	93 07       	cpc	r25, r19
    46d2:	a4 07       	cpc	r26, r20
    46d4:	b5 07       	cpc	r27, r21
    46d6:	0c f0       	brlt	.+2      	; 0x46da <SevSeg_voidDoubleRangeCounter+0x4ae>
    46d8:	13 cf       	rjmp	.-474    	; 0x4500 <SevSeg_voidDoubleRangeCounter+0x2d4>

				Local_SevSegOneStart = 9;
			}
		}
	}
}
    46da:	e9 96       	adiw	r28, 0x39	; 57
    46dc:	0f b6       	in	r0, 0x3f	; 63
    46de:	f8 94       	cli
    46e0:	de bf       	out	0x3e, r29	; 62
    46e2:	0f be       	out	0x3f, r0	; 63
    46e4:	cd bf       	out	0x3d, r28	; 61
    46e6:	cf 91       	pop	r28
    46e8:	df 91       	pop	r29
    46ea:	08 95       	ret

000046ec <SevSeg_voidBCDDisplay>:

void SevSeg_voidBCDDisplay(u8 port, u8 number){
    46ec:	df 93       	push	r29
    46ee:	cf 93       	push	r28
    46f0:	00 d0       	rcall	.+0      	; 0x46f2 <SevSeg_voidBCDDisplay+0x6>
    46f2:	cd b7       	in	r28, 0x3d	; 61
    46f4:	de b7       	in	r29, 0x3e	; 62
    46f6:	89 83       	std	Y+1, r24	; 0x01
    46f8:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPortValue(port, number);
    46fa:	89 81       	ldd	r24, Y+1	; 0x01
    46fc:	6a 81       	ldd	r22, Y+2	; 0x02
    46fe:	0e 94 b6 1a 	call	0x356c	; 0x356c <DIO_voidSetPortValue>
}
    4702:	0f 90       	pop	r0
    4704:	0f 90       	pop	r0
    4706:	cf 91       	pop	r28
    4708:	df 91       	pop	r29
    470a:	08 95       	ret

0000470c <SevSeg_voidBCDDoubleDisplay>:

void SevSeg_voidBCDDoubleDisplay(s8 start,s8 end){
    470c:	df 93       	push	r29
    470e:	cf 93       	push	r28
    4710:	cd b7       	in	r28, 0x3d	; 61
    4712:	de b7       	in	r29, 0x3e	; 62
    4714:	ab 97       	sbiw	r28, 0x2b	; 43
    4716:	0f b6       	in	r0, 0x3f	; 63
    4718:	f8 94       	cli
    471a:	de bf       	out	0x3e, r29	; 62
    471c:	0f be       	out	0x3f, r0	; 63
    471e:	cd bf       	out	0x3d, r28	; 61
    4720:	8a a7       	std	Y+42, r24	; 0x2a
    4722:	6b a7       	std	Y+43, r22	; 0x2b
	s8 Local_SevSegTwoStart = start / 10;
    4724:	8a a5       	ldd	r24, Y+42	; 0x2a
    4726:	9a e0       	ldi	r25, 0x0A	; 10
    4728:	69 2f       	mov	r22, r25
    472a:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <__divmodqi4>
    472e:	89 a7       	std	Y+41, r24	; 0x29
	s8 Local_SevSegOneStart = start % 10;
    4730:	8a a5       	ldd	r24, Y+42	; 0x2a
    4732:	9a e0       	ldi	r25, 0x0A	; 10
    4734:	69 2f       	mov	r22, r25
    4736:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <__divmodqi4>
    473a:	89 2f       	mov	r24, r25
    473c:	88 a7       	std	Y+40, r24	; 0x28

	s8 Local_SevSegTwoEnd = end / 10;
    473e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4740:	9a e0       	ldi	r25, 0x0A	; 10
    4742:	69 2f       	mov	r22, r25
    4744:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <__divmodqi4>
    4748:	8f a3       	std	Y+39, r24	; 0x27
	s8 Local_SevSegOneEnd = end % 10;
    474a:	8b a5       	ldd	r24, Y+43	; 0x2b
    474c:	9a e0       	ldi	r25, 0x0A	; 10
    474e:	69 2f       	mov	r22, r25
    4750:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <__divmodqi4>
    4754:	89 2f       	mov	r24, r25
    4756:	8e a3       	std	Y+38, r24	; 0x26

	s32 Local_Counter1 = 0;
    4758:	1a a2       	std	Y+34, r1	; 0x22
    475a:	1b a2       	std	Y+35, r1	; 0x23
    475c:	1c a2       	std	Y+36, r1	; 0x24
    475e:	1d a2       	std	Y+37, r1	; 0x25
	s32 Local_Counter2 = 0;
    4760:	1e 8e       	std	Y+30, r1	; 0x1e
    4762:	1f 8e       	std	Y+31, r1	; 0x1f
    4764:	18 a2       	std	Y+32, r1	; 0x20
    4766:	19 a2       	std	Y+33, r1	; 0x21
	u8 num = 0;
    4768:	1d 8e       	std	Y+29, r1	; 0x1d
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    476a:	89 a5       	ldd	r24, Y+41	; 0x29
    476c:	88 23       	and	r24, r24
    476e:	0c f4       	brge	.+2      	; 0x4772 <SevSeg_voidBCDDoubleDisplay+0x66>
    4770:	11 c2       	rjmp	.+1058   	; 0x4b94 <SevSeg_voidBCDDoubleDisplay+0x488>
    4772:	89 a5       	ldd	r24, Y+41	; 0x29
    4774:	8a 30       	cpi	r24, 0x0A	; 10
    4776:	0c f0       	brlt	.+2      	; 0x477a <SevSeg_voidBCDDoubleDisplay+0x6e>
    4778:	0d c2       	rjmp	.+1050   	; 0x4b94 <SevSeg_voidBCDDoubleDisplay+0x488>
    477a:	8f a1       	ldd	r24, Y+39	; 0x27
    477c:	8a 30       	cpi	r24, 0x0A	; 10
    477e:	0c f0       	brlt	.+2      	; 0x4782 <SevSeg_voidBCDDoubleDisplay+0x76>
    4780:	09 c2       	rjmp	.+1042   	; 0x4b94 <SevSeg_voidBCDDoubleDisplay+0x488>
    4782:	8f a1       	ldd	r24, Y+39	; 0x27
    4784:	88 23       	and	r24, r24
    4786:	0c f4       	brge	.+2      	; 0x478a <SevSeg_voidBCDDoubleDisplay+0x7e>
    4788:	05 c2       	rjmp	.+1034   	; 0x4b94 <SevSeg_voidBCDDoubleDisplay+0x488>

		if(start < end){
    478a:	9a a5       	ldd	r25, Y+42	; 0x2a
    478c:	8b a5       	ldd	r24, Y+43	; 0x2b
    478e:	98 17       	cp	r25, r24
    4790:	0c f0       	brlt	.+2      	; 0x4794 <SevSeg_voidBCDDoubleDisplay+0x88>
    4792:	02 c1       	rjmp	.+516    	; 0x4998 <SevSeg_voidBCDDoubleDisplay+0x28c>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    4794:	89 a5       	ldd	r24, Y+41	; 0x29
    4796:	99 27       	eor	r25, r25
    4798:	87 fd       	sbrc	r24, 7
    479a:	90 95       	com	r25
    479c:	a9 2f       	mov	r26, r25
    479e:	b9 2f       	mov	r27, r25
    47a0:	8a a3       	std	Y+34, r24	; 0x22
    47a2:	9b a3       	std	Y+35, r25	; 0x23
    47a4:	ac a3       	std	Y+36, r26	; 0x24
    47a6:	bd a3       	std	Y+37, r27	; 0x25
    47a8:	e5 c0       	rjmp	.+458    	; 0x4974 <SevSeg_voidBCDDoubleDisplay+0x268>
				num &= 0x0F;
    47aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47ac:	8f 70       	andi	r24, 0x0F	; 15
    47ae:	8d 8f       	std	Y+29, r24	; 0x1d
				num |= (Local_Counter1 << 4);
    47b0:	8a a1       	ldd	r24, Y+34	; 0x22
    47b2:	9b a1       	ldd	r25, Y+35	; 0x23
    47b4:	ac a1       	ldd	r26, Y+36	; 0x24
    47b6:	bd a1       	ldd	r27, Y+37	; 0x25
    47b8:	88 0f       	add	r24, r24
    47ba:	99 1f       	adc	r25, r25
    47bc:	aa 1f       	adc	r26, r26
    47be:	bb 1f       	adc	r27, r27
    47c0:	88 0f       	add	r24, r24
    47c2:	99 1f       	adc	r25, r25
    47c4:	aa 1f       	adc	r26, r26
    47c6:	bb 1f       	adc	r27, r27
    47c8:	88 0f       	add	r24, r24
    47ca:	99 1f       	adc	r25, r25
    47cc:	aa 1f       	adc	r26, r26
    47ce:	bb 1f       	adc	r27, r27
    47d0:	88 0f       	add	r24, r24
    47d2:	99 1f       	adc	r25, r25
    47d4:	aa 1f       	adc	r26, r26
    47d6:	bb 1f       	adc	r27, r27
    47d8:	98 2f       	mov	r25, r24
    47da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47dc:	89 2b       	or	r24, r25
    47de:	8d 8f       	std	Y+29, r24	; 0x1d
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    47e0:	88 a5       	ldd	r24, Y+40	; 0x28
    47e2:	99 27       	eor	r25, r25
    47e4:	87 fd       	sbrc	r24, 7
    47e6:	90 95       	com	r25
    47e8:	a9 2f       	mov	r26, r25
    47ea:	b9 2f       	mov	r27, r25
    47ec:	8e 8f       	std	Y+30, r24	; 0x1e
    47ee:	9f 8f       	std	Y+31, r25	; 0x1f
    47f0:	a8 a3       	std	Y+32, r26	; 0x20
    47f2:	b9 a3       	std	Y+33, r27	; 0x21
    47f4:	a9 c0       	rjmp	.+338    	; 0x4948 <SevSeg_voidBCDDoubleDisplay+0x23c>
					num &= 0xF0;
    47f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47f8:	80 7f       	andi	r24, 0xF0	; 240
    47fa:	8d 8f       	std	Y+29, r24	; 0x1d
					num |= Local_Counter2;
    47fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    47fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4800:	89 2b       	or	r24, r25
    4802:	8d 8f       	std	Y+29, r24	; 0x1d
    4804:	80 e0       	ldi	r24, 0x00	; 0
    4806:	90 e0       	ldi	r25, 0x00	; 0
    4808:	a0 e2       	ldi	r26, 0x20	; 32
    480a:	b1 e4       	ldi	r27, 0x41	; 65
    480c:	89 8f       	std	Y+25, r24	; 0x19
    480e:	9a 8f       	std	Y+26, r25	; 0x1a
    4810:	ab 8f       	std	Y+27, r26	; 0x1b
    4812:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4814:	69 8d       	ldd	r22, Y+25	; 0x19
    4816:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4818:	8b 8d       	ldd	r24, Y+27	; 0x1b
    481a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    481c:	20 e0       	ldi	r18, 0x00	; 0
    481e:	30 e0       	ldi	r19, 0x00	; 0
    4820:	4a e7       	ldi	r20, 0x7A	; 122
    4822:	55 e4       	ldi	r21, 0x45	; 69
    4824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4828:	dc 01       	movw	r26, r24
    482a:	cb 01       	movw	r24, r22
    482c:	8d 8b       	std	Y+21, r24	; 0x15
    482e:	9e 8b       	std	Y+22, r25	; 0x16
    4830:	af 8b       	std	Y+23, r26	; 0x17
    4832:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4834:	6d 89       	ldd	r22, Y+21	; 0x15
    4836:	7e 89       	ldd	r23, Y+22	; 0x16
    4838:	8f 89       	ldd	r24, Y+23	; 0x17
    483a:	98 8d       	ldd	r25, Y+24	; 0x18
    483c:	20 e0       	ldi	r18, 0x00	; 0
    483e:	30 e0       	ldi	r19, 0x00	; 0
    4840:	40 e8       	ldi	r20, 0x80	; 128
    4842:	5f e3       	ldi	r21, 0x3F	; 63
    4844:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4848:	88 23       	and	r24, r24
    484a:	2c f4       	brge	.+10     	; 0x4856 <SevSeg_voidBCDDoubleDisplay+0x14a>
		__ticks = 1;
    484c:	81 e0       	ldi	r24, 0x01	; 1
    484e:	90 e0       	ldi	r25, 0x00	; 0
    4850:	9c 8b       	std	Y+20, r25	; 0x14
    4852:	8b 8b       	std	Y+19, r24	; 0x13
    4854:	3f c0       	rjmp	.+126    	; 0x48d4 <SevSeg_voidBCDDoubleDisplay+0x1c8>
	else if (__tmp > 65535)
    4856:	6d 89       	ldd	r22, Y+21	; 0x15
    4858:	7e 89       	ldd	r23, Y+22	; 0x16
    485a:	8f 89       	ldd	r24, Y+23	; 0x17
    485c:	98 8d       	ldd	r25, Y+24	; 0x18
    485e:	20 e0       	ldi	r18, 0x00	; 0
    4860:	3f ef       	ldi	r19, 0xFF	; 255
    4862:	4f e7       	ldi	r20, 0x7F	; 127
    4864:	57 e4       	ldi	r21, 0x47	; 71
    4866:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    486a:	18 16       	cp	r1, r24
    486c:	4c f5       	brge	.+82     	; 0x48c0 <SevSeg_voidBCDDoubleDisplay+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    486e:	69 8d       	ldd	r22, Y+25	; 0x19
    4870:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4872:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4874:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4876:	20 e0       	ldi	r18, 0x00	; 0
    4878:	30 e0       	ldi	r19, 0x00	; 0
    487a:	40 e2       	ldi	r20, 0x20	; 32
    487c:	51 e4       	ldi	r21, 0x41	; 65
    487e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4882:	dc 01       	movw	r26, r24
    4884:	cb 01       	movw	r24, r22
    4886:	bc 01       	movw	r22, r24
    4888:	cd 01       	movw	r24, r26
    488a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    488e:	dc 01       	movw	r26, r24
    4890:	cb 01       	movw	r24, r22
    4892:	9c 8b       	std	Y+20, r25	; 0x14
    4894:	8b 8b       	std	Y+19, r24	; 0x13
    4896:	0f c0       	rjmp	.+30     	; 0x48b6 <SevSeg_voidBCDDoubleDisplay+0x1aa>
    4898:	80 e9       	ldi	r24, 0x90	; 144
    489a:	91 e0       	ldi	r25, 0x01	; 1
    489c:	9a 8b       	std	Y+18, r25	; 0x12
    489e:	89 8b       	std	Y+17, r24	; 0x11
    48a0:	89 89       	ldd	r24, Y+17	; 0x11
    48a2:	9a 89       	ldd	r25, Y+18	; 0x12
    48a4:	01 97       	sbiw	r24, 0x01	; 1
    48a6:	f1 f7       	brne	.-4      	; 0x48a4 <SevSeg_voidBCDDoubleDisplay+0x198>
    48a8:	9a 8b       	std	Y+18, r25	; 0x12
    48aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48ac:	8b 89       	ldd	r24, Y+19	; 0x13
    48ae:	9c 89       	ldd	r25, Y+20	; 0x14
    48b0:	01 97       	sbiw	r24, 0x01	; 1
    48b2:	9c 8b       	std	Y+20, r25	; 0x14
    48b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48b6:	8b 89       	ldd	r24, Y+19	; 0x13
    48b8:	9c 89       	ldd	r25, Y+20	; 0x14
    48ba:	00 97       	sbiw	r24, 0x00	; 0
    48bc:	69 f7       	brne	.-38     	; 0x4898 <SevSeg_voidBCDDoubleDisplay+0x18c>
    48be:	14 c0       	rjmp	.+40     	; 0x48e8 <SevSeg_voidBCDDoubleDisplay+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48c0:	6d 89       	ldd	r22, Y+21	; 0x15
    48c2:	7e 89       	ldd	r23, Y+22	; 0x16
    48c4:	8f 89       	ldd	r24, Y+23	; 0x17
    48c6:	98 8d       	ldd	r25, Y+24	; 0x18
    48c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48cc:	dc 01       	movw	r26, r24
    48ce:	cb 01       	movw	r24, r22
    48d0:	9c 8b       	std	Y+20, r25	; 0x14
    48d2:	8b 8b       	std	Y+19, r24	; 0x13
    48d4:	8b 89       	ldd	r24, Y+19	; 0x13
    48d6:	9c 89       	ldd	r25, Y+20	; 0x14
    48d8:	98 8b       	std	Y+16, r25	; 0x10
    48da:	8f 87       	std	Y+15, r24	; 0x0f
    48dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    48de:	98 89       	ldd	r25, Y+16	; 0x10
    48e0:	01 97       	sbiw	r24, 0x01	; 1
    48e2:	f1 f7       	brne	.-4      	; 0x48e0 <SevSeg_voidBCDDoubleDisplay+0x1d4>
    48e4:	98 8b       	std	Y+16, r25	; 0x10
    48e6:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    48e8:	82 e0       	ldi	r24, 0x02	; 2
    48ea:	6d 8d       	ldd	r22, Y+29	; 0x1d
    48ec:	0e 94 b6 1a 	call	0x356c	; 0x356c <DIO_voidSetPortValue>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    48f0:	8e a1       	ldd	r24, Y+38	; 0x26
    48f2:	28 2f       	mov	r18, r24
    48f4:	33 27       	eor	r19, r19
    48f6:	27 fd       	sbrc	r18, 7
    48f8:	30 95       	com	r19
    48fa:	43 2f       	mov	r20, r19
    48fc:	53 2f       	mov	r21, r19
    48fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4900:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4902:	a8 a1       	ldd	r26, Y+32	; 0x20
    4904:	b9 a1       	ldd	r27, Y+33	; 0x21
    4906:	28 17       	cp	r18, r24
    4908:	39 07       	cpc	r19, r25
    490a:	4a 07       	cpc	r20, r26
    490c:	5b 07       	cpc	r21, r27
    490e:	89 f4       	brne	.+34     	; 0x4932 <SevSeg_voidBCDDoubleDisplay+0x226>
    4910:	8f a1       	ldd	r24, Y+39	; 0x27
    4912:	28 2f       	mov	r18, r24
    4914:	33 27       	eor	r19, r19
    4916:	27 fd       	sbrc	r18, 7
    4918:	30 95       	com	r19
    491a:	43 2f       	mov	r20, r19
    491c:	53 2f       	mov	r21, r19
    491e:	8a a1       	ldd	r24, Y+34	; 0x22
    4920:	9b a1       	ldd	r25, Y+35	; 0x23
    4922:	ac a1       	ldd	r26, Y+36	; 0x24
    4924:	bd a1       	ldd	r27, Y+37	; 0x25
    4926:	28 17       	cp	r18, r24
    4928:	39 07       	cpc	r19, r25
    492a:	4a 07       	cpc	r20, r26
    492c:	5b 07       	cpc	r21, r27
    492e:	09 f4       	brne	.+2      	; 0x4932 <SevSeg_voidBCDDoubleDisplay+0x226>
    4930:	31 c1       	rjmp	.+610    	; 0x4b94 <SevSeg_voidBCDDoubleDisplay+0x488>

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				num &= 0x0F;
				num |= (Local_Counter1 << 4);
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    4932:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4934:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4936:	a8 a1       	ldd	r26, Y+32	; 0x20
    4938:	b9 a1       	ldd	r27, Y+33	; 0x21
    493a:	01 96       	adiw	r24, 0x01	; 1
    493c:	a1 1d       	adc	r26, r1
    493e:	b1 1d       	adc	r27, r1
    4940:	8e 8f       	std	Y+30, r24	; 0x1e
    4942:	9f 8f       	std	Y+31, r25	; 0x1f
    4944:	a8 a3       	std	Y+32, r26	; 0x20
    4946:	b9 a3       	std	Y+33, r27	; 0x21
    4948:	8e 8d       	ldd	r24, Y+30	; 0x1e
    494a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    494c:	a8 a1       	ldd	r26, Y+32	; 0x20
    494e:	b9 a1       	ldd	r27, Y+33	; 0x21
    4950:	8a 30       	cpi	r24, 0x0A	; 10
    4952:	91 05       	cpc	r25, r1
    4954:	a1 05       	cpc	r26, r1
    4956:	b1 05       	cpc	r27, r1
    4958:	0c f4       	brge	.+2      	; 0x495c <SevSeg_voidBCDDoubleDisplay+0x250>
    495a:	4d cf       	rjmp	.-358    	; 0x47f6 <SevSeg_voidBCDDoubleDisplay+0xea>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    495c:	18 a6       	std	Y+40, r1	; 0x28
	s32 Local_Counter2 = 0;
	u8 num = 0;
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    495e:	8a a1       	ldd	r24, Y+34	; 0x22
    4960:	9b a1       	ldd	r25, Y+35	; 0x23
    4962:	ac a1       	ldd	r26, Y+36	; 0x24
    4964:	bd a1       	ldd	r27, Y+37	; 0x25
    4966:	01 96       	adiw	r24, 0x01	; 1
    4968:	a1 1d       	adc	r26, r1
    496a:	b1 1d       	adc	r27, r1
    496c:	8a a3       	std	Y+34, r24	; 0x22
    496e:	9b a3       	std	Y+35, r25	; 0x23
    4970:	ac a3       	std	Y+36, r26	; 0x24
    4972:	bd a3       	std	Y+37, r27	; 0x25
    4974:	8f a1       	ldd	r24, Y+39	; 0x27
    4976:	28 2f       	mov	r18, r24
    4978:	33 27       	eor	r19, r19
    497a:	27 fd       	sbrc	r18, 7
    497c:	30 95       	com	r19
    497e:	43 2f       	mov	r20, r19
    4980:	53 2f       	mov	r21, r19
    4982:	8a a1       	ldd	r24, Y+34	; 0x22
    4984:	9b a1       	ldd	r25, Y+35	; 0x23
    4986:	ac a1       	ldd	r26, Y+36	; 0x24
    4988:	bd a1       	ldd	r27, Y+37	; 0x25
    498a:	28 17       	cp	r18, r24
    498c:	39 07       	cpc	r19, r25
    498e:	4a 07       	cpc	r20, r26
    4990:	5b 07       	cpc	r21, r27
    4992:	0c f0       	brlt	.+2      	; 0x4996 <SevSeg_voidBCDDoubleDisplay+0x28a>
    4994:	0a cf       	rjmp	.-492    	; 0x47aa <SevSeg_voidBCDDoubleDisplay+0x9e>
    4996:	fe c0       	rjmp	.+508    	; 0x4b94 <SevSeg_voidBCDDoubleDisplay+0x488>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    4998:	89 a5       	ldd	r24, Y+41	; 0x29
    499a:	99 27       	eor	r25, r25
    499c:	87 fd       	sbrc	r24, 7
    499e:	90 95       	com	r25
    49a0:	a9 2f       	mov	r26, r25
    49a2:	b9 2f       	mov	r27, r25
    49a4:	8a a3       	std	Y+34, r24	; 0x22
    49a6:	9b a3       	std	Y+35, r25	; 0x23
    49a8:	ac a3       	std	Y+36, r26	; 0x24
    49aa:	bd a3       	std	Y+37, r27	; 0x25
    49ac:	e2 c0       	rjmp	.+452    	; 0x4b72 <SevSeg_voidBCDDoubleDisplay+0x466>

				num &= 0x0F;
    49ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    49b0:	8f 70       	andi	r24, 0x0F	; 15
    49b2:	8d 8f       	std	Y+29, r24	; 0x1d
				num |= (Local_Counter1 << 4);
    49b4:	8a a1       	ldd	r24, Y+34	; 0x22
    49b6:	9b a1       	ldd	r25, Y+35	; 0x23
    49b8:	ac a1       	ldd	r26, Y+36	; 0x24
    49ba:	bd a1       	ldd	r27, Y+37	; 0x25
    49bc:	88 0f       	add	r24, r24
    49be:	99 1f       	adc	r25, r25
    49c0:	aa 1f       	adc	r26, r26
    49c2:	bb 1f       	adc	r27, r27
    49c4:	88 0f       	add	r24, r24
    49c6:	99 1f       	adc	r25, r25
    49c8:	aa 1f       	adc	r26, r26
    49ca:	bb 1f       	adc	r27, r27
    49cc:	88 0f       	add	r24, r24
    49ce:	99 1f       	adc	r25, r25
    49d0:	aa 1f       	adc	r26, r26
    49d2:	bb 1f       	adc	r27, r27
    49d4:	88 0f       	add	r24, r24
    49d6:	99 1f       	adc	r25, r25
    49d8:	aa 1f       	adc	r26, r26
    49da:	bb 1f       	adc	r27, r27
    49dc:	98 2f       	mov	r25, r24
    49de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    49e0:	89 2b       	or	r24, r25
    49e2:	8d 8f       	std	Y+29, r24	; 0x1d

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    49e4:	88 a5       	ldd	r24, Y+40	; 0x28
    49e6:	99 27       	eor	r25, r25
    49e8:	87 fd       	sbrc	r24, 7
    49ea:	90 95       	com	r25
    49ec:	a9 2f       	mov	r26, r25
    49ee:	b9 2f       	mov	r27, r25
    49f0:	8e 8f       	std	Y+30, r24	; 0x1e
    49f2:	9f 8f       	std	Y+31, r25	; 0x1f
    49f4:	a8 a3       	std	Y+32, r26	; 0x20
    49f6:	b9 a3       	std	Y+33, r27	; 0x21
    49f8:	a8 c0       	rjmp	.+336    	; 0x4b4a <SevSeg_voidBCDDoubleDisplay+0x43e>
					num &= 0xF0;
    49fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    49fc:	80 7f       	andi	r24, 0xF0	; 240
    49fe:	8d 8f       	std	Y+29, r24	; 0x1d
					num |= Local_Counter2;
    4a00:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4a02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a04:	89 2b       	or	r24, r25
    4a06:	8d 8f       	std	Y+29, r24	; 0x1d
    4a08:	80 e0       	ldi	r24, 0x00	; 0
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	a0 e2       	ldi	r26, 0x20	; 32
    4a0e:	b1 e4       	ldi	r27, 0x41	; 65
    4a10:	8b 87       	std	Y+11, r24	; 0x0b
    4a12:	9c 87       	std	Y+12, r25	; 0x0c
    4a14:	ad 87       	std	Y+13, r26	; 0x0d
    4a16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a20:	20 e0       	ldi	r18, 0x00	; 0
    4a22:	30 e0       	ldi	r19, 0x00	; 0
    4a24:	4a e7       	ldi	r20, 0x7A	; 122
    4a26:	55 e4       	ldi	r21, 0x45	; 69
    4a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a2c:	dc 01       	movw	r26, r24
    4a2e:	cb 01       	movw	r24, r22
    4a30:	8f 83       	std	Y+7, r24	; 0x07
    4a32:	98 87       	std	Y+8, r25	; 0x08
    4a34:	a9 87       	std	Y+9, r26	; 0x09
    4a36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a38:	6f 81       	ldd	r22, Y+7	; 0x07
    4a3a:	78 85       	ldd	r23, Y+8	; 0x08
    4a3c:	89 85       	ldd	r24, Y+9	; 0x09
    4a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a40:	20 e0       	ldi	r18, 0x00	; 0
    4a42:	30 e0       	ldi	r19, 0x00	; 0
    4a44:	40 e8       	ldi	r20, 0x80	; 128
    4a46:	5f e3       	ldi	r21, 0x3F	; 63
    4a48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a4c:	88 23       	and	r24, r24
    4a4e:	2c f4       	brge	.+10     	; 0x4a5a <SevSeg_voidBCDDoubleDisplay+0x34e>
		__ticks = 1;
    4a50:	81 e0       	ldi	r24, 0x01	; 1
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	9e 83       	std	Y+6, r25	; 0x06
    4a56:	8d 83       	std	Y+5, r24	; 0x05
    4a58:	3f c0       	rjmp	.+126    	; 0x4ad8 <SevSeg_voidBCDDoubleDisplay+0x3cc>
	else if (__tmp > 65535)
    4a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    4a5c:	78 85       	ldd	r23, Y+8	; 0x08
    4a5e:	89 85       	ldd	r24, Y+9	; 0x09
    4a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a62:	20 e0       	ldi	r18, 0x00	; 0
    4a64:	3f ef       	ldi	r19, 0xFF	; 255
    4a66:	4f e7       	ldi	r20, 0x7F	; 127
    4a68:	57 e4       	ldi	r21, 0x47	; 71
    4a6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a6e:	18 16       	cp	r1, r24
    4a70:	4c f5       	brge	.+82     	; 0x4ac4 <SevSeg_voidBCDDoubleDisplay+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a7a:	20 e0       	ldi	r18, 0x00	; 0
    4a7c:	30 e0       	ldi	r19, 0x00	; 0
    4a7e:	40 e2       	ldi	r20, 0x20	; 32
    4a80:	51 e4       	ldi	r21, 0x41	; 65
    4a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a86:	dc 01       	movw	r26, r24
    4a88:	cb 01       	movw	r24, r22
    4a8a:	bc 01       	movw	r22, r24
    4a8c:	cd 01       	movw	r24, r26
    4a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a92:	dc 01       	movw	r26, r24
    4a94:	cb 01       	movw	r24, r22
    4a96:	9e 83       	std	Y+6, r25	; 0x06
    4a98:	8d 83       	std	Y+5, r24	; 0x05
    4a9a:	0f c0       	rjmp	.+30     	; 0x4aba <SevSeg_voidBCDDoubleDisplay+0x3ae>
    4a9c:	80 e9       	ldi	r24, 0x90	; 144
    4a9e:	91 e0       	ldi	r25, 0x01	; 1
    4aa0:	9c 83       	std	Y+4, r25	; 0x04
    4aa2:	8b 83       	std	Y+3, r24	; 0x03
    4aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    4aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    4aa8:	01 97       	sbiw	r24, 0x01	; 1
    4aaa:	f1 f7       	brne	.-4      	; 0x4aa8 <SevSeg_voidBCDDoubleDisplay+0x39c>
    4aac:	9c 83       	std	Y+4, r25	; 0x04
    4aae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ab4:	01 97       	sbiw	r24, 0x01	; 1
    4ab6:	9e 83       	std	Y+6, r25	; 0x06
    4ab8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aba:	8d 81       	ldd	r24, Y+5	; 0x05
    4abc:	9e 81       	ldd	r25, Y+6	; 0x06
    4abe:	00 97       	sbiw	r24, 0x00	; 0
    4ac0:	69 f7       	brne	.-38     	; 0x4a9c <SevSeg_voidBCDDoubleDisplay+0x390>
    4ac2:	14 c0       	rjmp	.+40     	; 0x4aec <SevSeg_voidBCDDoubleDisplay+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    4ac6:	78 85       	ldd	r23, Y+8	; 0x08
    4ac8:	89 85       	ldd	r24, Y+9	; 0x09
    4aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    4acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ad0:	dc 01       	movw	r26, r24
    4ad2:	cb 01       	movw	r24, r22
    4ad4:	9e 83       	std	Y+6, r25	; 0x06
    4ad6:	8d 83       	std	Y+5, r24	; 0x05
    4ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    4ada:	9e 81       	ldd	r25, Y+6	; 0x06
    4adc:	9a 83       	std	Y+2, r25	; 0x02
    4ade:	89 83       	std	Y+1, r24	; 0x01
    4ae0:	89 81       	ldd	r24, Y+1	; 0x01
    4ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ae4:	01 97       	sbiw	r24, 0x01	; 1
    4ae6:	f1 f7       	brne	.-4      	; 0x4ae4 <SevSeg_voidBCDDoubleDisplay+0x3d8>
    4ae8:	9a 83       	std	Y+2, r25	; 0x02
    4aea:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    4aec:	82 e0       	ldi	r24, 0x02	; 2
    4aee:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4af0:	0e 94 b6 1a 	call	0x356c	; 0x356c <DIO_voidSetPortValue>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    4af4:	8e a1       	ldd	r24, Y+38	; 0x26
    4af6:	28 2f       	mov	r18, r24
    4af8:	33 27       	eor	r19, r19
    4afa:	27 fd       	sbrc	r18, 7
    4afc:	30 95       	com	r19
    4afe:	43 2f       	mov	r20, r19
    4b00:	53 2f       	mov	r21, r19
    4b02:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b04:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4b06:	a8 a1       	ldd	r26, Y+32	; 0x20
    4b08:	b9 a1       	ldd	r27, Y+33	; 0x21
    4b0a:	28 17       	cp	r18, r24
    4b0c:	39 07       	cpc	r19, r25
    4b0e:	4a 07       	cpc	r20, r26
    4b10:	5b 07       	cpc	r21, r27
    4b12:	81 f4       	brne	.+32     	; 0x4b34 <SevSeg_voidBCDDoubleDisplay+0x428>
    4b14:	8f a1       	ldd	r24, Y+39	; 0x27
    4b16:	28 2f       	mov	r18, r24
    4b18:	33 27       	eor	r19, r19
    4b1a:	27 fd       	sbrc	r18, 7
    4b1c:	30 95       	com	r19
    4b1e:	43 2f       	mov	r20, r19
    4b20:	53 2f       	mov	r21, r19
    4b22:	8a a1       	ldd	r24, Y+34	; 0x22
    4b24:	9b a1       	ldd	r25, Y+35	; 0x23
    4b26:	ac a1       	ldd	r26, Y+36	; 0x24
    4b28:	bd a1       	ldd	r27, Y+37	; 0x25
    4b2a:	28 17       	cp	r18, r24
    4b2c:	39 07       	cpc	r19, r25
    4b2e:	4a 07       	cpc	r20, r26
    4b30:	5b 07       	cpc	r21, r27
    4b32:	81 f1       	breq	.+96     	; 0x4b94 <SevSeg_voidBCDDoubleDisplay+0x488>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				num &= 0x0F;
				num |= (Local_Counter1 << 4);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    4b34:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b36:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4b38:	a8 a1       	ldd	r26, Y+32	; 0x20
    4b3a:	b9 a1       	ldd	r27, Y+33	; 0x21
    4b3c:	01 97       	sbiw	r24, 0x01	; 1
    4b3e:	a1 09       	sbc	r26, r1
    4b40:	b1 09       	sbc	r27, r1
    4b42:	8e 8f       	std	Y+30, r24	; 0x1e
    4b44:	9f 8f       	std	Y+31, r25	; 0x1f
    4b46:	a8 a3       	std	Y+32, r26	; 0x20
    4b48:	b9 a3       	std	Y+33, r27	; 0x21
    4b4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b4c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4b4e:	a8 a1       	ldd	r26, Y+32	; 0x20
    4b50:	b9 a1       	ldd	r27, Y+33	; 0x21
    4b52:	bb 23       	and	r27, r27
    4b54:	0c f0       	brlt	.+2      	; 0x4b58 <SevSeg_voidBCDDoubleDisplay+0x44c>
    4b56:	51 cf       	rjmp	.-350    	; 0x49fa <SevSeg_voidBCDDoubleDisplay+0x2ee>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}
				Local_SevSegOneStart = 9;
    4b58:	89 e0       	ldi	r24, 0x09	; 9
    4b5a:	88 a7       	std	Y+40, r24	; 0x28

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    4b5c:	8a a1       	ldd	r24, Y+34	; 0x22
    4b5e:	9b a1       	ldd	r25, Y+35	; 0x23
    4b60:	ac a1       	ldd	r26, Y+36	; 0x24
    4b62:	bd a1       	ldd	r27, Y+37	; 0x25
    4b64:	01 97       	sbiw	r24, 0x01	; 1
    4b66:	a1 09       	sbc	r26, r1
    4b68:	b1 09       	sbc	r27, r1
    4b6a:	8a a3       	std	Y+34, r24	; 0x22
    4b6c:	9b a3       	std	Y+35, r25	; 0x23
    4b6e:	ac a3       	std	Y+36, r26	; 0x24
    4b70:	bd a3       	std	Y+37, r27	; 0x25
    4b72:	8f a1       	ldd	r24, Y+39	; 0x27
    4b74:	28 2f       	mov	r18, r24
    4b76:	33 27       	eor	r19, r19
    4b78:	27 fd       	sbrc	r18, 7
    4b7a:	30 95       	com	r19
    4b7c:	43 2f       	mov	r20, r19
    4b7e:	53 2f       	mov	r21, r19
    4b80:	8a a1       	ldd	r24, Y+34	; 0x22
    4b82:	9b a1       	ldd	r25, Y+35	; 0x23
    4b84:	ac a1       	ldd	r26, Y+36	; 0x24
    4b86:	bd a1       	ldd	r27, Y+37	; 0x25
    4b88:	82 17       	cp	r24, r18
    4b8a:	93 07       	cpc	r25, r19
    4b8c:	a4 07       	cpc	r26, r20
    4b8e:	b5 07       	cpc	r27, r21
    4b90:	0c f0       	brlt	.+2      	; 0x4b94 <SevSeg_voidBCDDoubleDisplay+0x488>
    4b92:	0d cf       	rjmp	.-486    	; 0x49ae <SevSeg_voidBCDDoubleDisplay+0x2a2>
				}
				Local_SevSegOneStart = 9;
			}
		}
	}
}
    4b94:	ab 96       	adiw	r28, 0x2b	; 43
    4b96:	0f b6       	in	r0, 0x3f	; 63
    4b98:	f8 94       	cli
    4b9a:	de bf       	out	0x3e, r29	; 62
    4b9c:	0f be       	out	0x3f, r0	; 63
    4b9e:	cd bf       	out	0x3d, r28	; 61
    4ba0:	cf 91       	pop	r28
    4ba2:	df 91       	pop	r29
    4ba4:	08 95       	ret

00004ba6 <SevSeg_voidMulBCD>:

void SevSeg_voidMulBCD(s8 start,s8 end){
    4ba6:	df 93       	push	r29
    4ba8:	cf 93       	push	r28
    4baa:	cd b7       	in	r28, 0x3d	; 61
    4bac:	de b7       	in	r29, 0x3e	; 62
    4bae:	c1 54       	subi	r28, 0x41	; 65
    4bb0:	d0 40       	sbci	r29, 0x00	; 0
    4bb2:	0f b6       	in	r0, 0x3f	; 63
    4bb4:	f8 94       	cli
    4bb6:	de bf       	out	0x3e, r29	; 62
    4bb8:	0f be       	out	0x3f, r0	; 63
    4bba:	cd bf       	out	0x3d, r28	; 61
    4bbc:	fe 01       	movw	r30, r28
    4bbe:	e0 5c       	subi	r30, 0xC0	; 192
    4bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc2:	80 83       	st	Z, r24
    4bc4:	fe 01       	movw	r30, r28
    4bc6:	ef 5b       	subi	r30, 0xBF	; 191
    4bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bca:	60 83       	st	Z, r22
	s8 Local_SevSegTwoStart = start / 10;
    4bcc:	fe 01       	movw	r30, r28
    4bce:	e0 5c       	subi	r30, 0xC0	; 192
    4bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd2:	80 81       	ld	r24, Z
    4bd4:	9a e0       	ldi	r25, 0x0A	; 10
    4bd6:	69 2f       	mov	r22, r25
    4bd8:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <__divmodqi4>
    4bdc:	8f af       	std	Y+63, r24	; 0x3f
	s8 Local_SevSegOneStart = start % 10;
    4bde:	fe 01       	movw	r30, r28
    4be0:	e0 5c       	subi	r30, 0xC0	; 192
    4be2:	ff 4f       	sbci	r31, 0xFF	; 255
    4be4:	80 81       	ld	r24, Z
    4be6:	9a e0       	ldi	r25, 0x0A	; 10
    4be8:	69 2f       	mov	r22, r25
    4bea:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <__divmodqi4>
    4bee:	89 2f       	mov	r24, r25
    4bf0:	8e af       	std	Y+62, r24	; 0x3e

	s8 Local_SevSegTwoEnd = end / 10;
    4bf2:	fe 01       	movw	r30, r28
    4bf4:	ef 5b       	subi	r30, 0xBF	; 191
    4bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf8:	80 81       	ld	r24, Z
    4bfa:	9a e0       	ldi	r25, 0x0A	; 10
    4bfc:	69 2f       	mov	r22, r25
    4bfe:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <__divmodqi4>
    4c02:	8d af       	std	Y+61, r24	; 0x3d
	s8 Local_SevSegOneEnd = end % 10;
    4c04:	fe 01       	movw	r30, r28
    4c06:	ef 5b       	subi	r30, 0xBF	; 191
    4c08:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0a:	80 81       	ld	r24, Z
    4c0c:	9a e0       	ldi	r25, 0x0A	; 10
    4c0e:	69 2f       	mov	r22, r25
    4c10:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <__divmodqi4>
    4c14:	89 2f       	mov	r24, r25
    4c16:	8c af       	std	Y+60, r24	; 0x3c

	s32 Local_Counter1 = 0;
    4c18:	18 ae       	std	Y+56, r1	; 0x38
    4c1a:	19 ae       	std	Y+57, r1	; 0x39
    4c1c:	1a ae       	std	Y+58, r1	; 0x3a
    4c1e:	1b ae       	std	Y+59, r1	; 0x3b
	s32 Local_Counter2 = 0;
    4c20:	1c aa       	std	Y+52, r1	; 0x34
    4c22:	1d aa       	std	Y+53, r1	; 0x35
    4c24:	1e aa       	std	Y+54, r1	; 0x36
    4c26:	1f aa       	std	Y+55, r1	; 0x37
	u8 num = 0;
    4c28:	1b aa       	std	Y+51, r1	; 0x33
	u32 count = 0;
    4c2a:	1f a6       	std	Y+47, r1	; 0x2f
    4c2c:	18 aa       	std	Y+48, r1	; 0x30
    4c2e:	19 aa       	std	Y+49, r1	; 0x31
    4c30:	1a aa       	std	Y+50, r1	; 0x32
	u32 delay = 1000 / (Sev_DELAY * 2);
    4c32:	82 e3       	ldi	r24, 0x32	; 50
    4c34:	90 e0       	ldi	r25, 0x00	; 0
    4c36:	a0 e0       	ldi	r26, 0x00	; 0
    4c38:	b0 e0       	ldi	r27, 0x00	; 0
    4c3a:	8b a7       	std	Y+43, r24	; 0x2b
    4c3c:	9c a7       	std	Y+44, r25	; 0x2c
    4c3e:	ad a7       	std	Y+45, r26	; 0x2d
    4c40:	be a7       	std	Y+46, r27	; 0x2e
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    4c42:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c44:	88 23       	and	r24, r24
    4c46:	0c f4       	brge	.+2      	; 0x4c4a <SevSeg_voidMulBCD+0xa4>
    4c48:	ad c2       	rjmp	.+1370   	; 0x51a4 <SevSeg_voidMulBCD+0x5fe>
    4c4a:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c4c:	8a 30       	cpi	r24, 0x0A	; 10
    4c4e:	0c f0       	brlt	.+2      	; 0x4c52 <SevSeg_voidMulBCD+0xac>
    4c50:	a9 c2       	rjmp	.+1362   	; 0x51a4 <SevSeg_voidMulBCD+0x5fe>
    4c52:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c54:	8a 30       	cpi	r24, 0x0A	; 10
    4c56:	0c f0       	brlt	.+2      	; 0x4c5a <SevSeg_voidMulBCD+0xb4>
    4c58:	a5 c2       	rjmp	.+1354   	; 0x51a4 <SevSeg_voidMulBCD+0x5fe>
    4c5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c5c:	88 23       	and	r24, r24
    4c5e:	0c f4       	brge	.+2      	; 0x4c62 <SevSeg_voidMulBCD+0xbc>
    4c60:	a1 c2       	rjmp	.+1346   	; 0x51a4 <SevSeg_voidMulBCD+0x5fe>

		if(start < end){
    4c62:	de 01       	movw	r26, r28
    4c64:	af 5b       	subi	r26, 0xBF	; 191
    4c66:	bf 4f       	sbci	r27, 0xFF	; 255
    4c68:	fe 01       	movw	r30, r28
    4c6a:	e0 5c       	subi	r30, 0xC0	; 192
    4c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c6e:	90 81       	ld	r25, Z
    4c70:	8c 91       	ld	r24, X
    4c72:	98 17       	cp	r25, r24
    4c74:	0c f0       	brlt	.+2      	; 0x4c78 <SevSeg_voidMulBCD+0xd2>
    4c76:	98 c1       	rjmp	.+816    	; 0x4fa8 <SevSeg_voidMulBCD+0x402>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    4c78:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c7a:	99 27       	eor	r25, r25
    4c7c:	87 fd       	sbrc	r24, 7
    4c7e:	90 95       	com	r25
    4c80:	a9 2f       	mov	r26, r25
    4c82:	b9 2f       	mov	r27, r25
    4c84:	88 af       	std	Y+56, r24	; 0x38
    4c86:	99 af       	std	Y+57, r25	; 0x39
    4c88:	aa af       	std	Y+58, r26	; 0x3a
    4c8a:	bb af       	std	Y+59, r27	; 0x3b
    4c8c:	7b c1       	rjmp	.+758    	; 0x4f84 <SevSeg_voidMulBCD+0x3de>
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    4c8e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4c90:	99 27       	eor	r25, r25
    4c92:	87 fd       	sbrc	r24, 7
    4c94:	90 95       	com	r25
    4c96:	a9 2f       	mov	r26, r25
    4c98:	b9 2f       	mov	r27, r25
    4c9a:	8c ab       	std	Y+52, r24	; 0x34
    4c9c:	9d ab       	std	Y+53, r25	; 0x35
    4c9e:	ae ab       	std	Y+54, r26	; 0x36
    4ca0:	bf ab       	std	Y+55, r27	; 0x37
    4ca2:	5a c1       	rjmp	.+692    	; 0x4f58 <SevSeg_voidMulBCD+0x3b2>
					count = 0;
    4ca4:	1f a6       	std	Y+47, r1	; 0x2f
    4ca6:	18 aa       	std	Y+48, r1	; 0x30
    4ca8:	19 aa       	std	Y+49, r1	; 0x31
    4caa:	1a aa       	std	Y+50, r1	; 0x32
    4cac:	1b c1       	rjmp	.+566    	; 0x4ee4 <SevSeg_voidMulBCD+0x33e>
					while(count< delay){
						DIO_voidSetPortValue(Sev_PORT,MulBCDArr[Local_Counter1]);
    4cae:	88 ad       	ldd	r24, Y+56	; 0x38
    4cb0:	99 ad       	ldd	r25, Y+57	; 0x39
    4cb2:	aa ad       	ldd	r26, Y+58	; 0x3a
    4cb4:	bb ad       	ldd	r27, Y+59	; 0x3b
    4cb6:	fc 01       	movw	r30, r24
    4cb8:	ef 58       	subi	r30, 0x8F	; 143
    4cba:	fe 4f       	sbci	r31, 0xFE	; 254
    4cbc:	90 81       	ld	r25, Z
    4cbe:	82 e0       	ldi	r24, 0x02	; 2
    4cc0:	69 2f       	mov	r22, r25
    4cc2:	0e 94 b6 1a 	call	0x356c	; 0x356c <DIO_voidSetPortValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN6, Low);
    4cc6:	82 e0       	ldi	r24, 0x02	; 2
    4cc8:	66 e0       	ldi	r22, 0x06	; 6
    4cca:	40 e0       	ldi	r20, 0x00	; 0
    4ccc:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, High);
    4cd0:	82 e0       	ldi	r24, 0x02	; 2
    4cd2:	65 e0       	ldi	r22, 0x05	; 5
    4cd4:	41 e0       	ldi	r20, 0x01	; 1
    4cd6:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
    4cda:	80 e0       	ldi	r24, 0x00	; 0
    4cdc:	90 e0       	ldi	r25, 0x00	; 0
    4cde:	a0 e2       	ldi	r26, 0x20	; 32
    4ce0:	b1 e4       	ldi	r27, 0x41	; 65
    4ce2:	8f a3       	std	Y+39, r24	; 0x27
    4ce4:	98 a7       	std	Y+40, r25	; 0x28
    4ce6:	a9 a7       	std	Y+41, r26	; 0x29
    4ce8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cea:	6f a1       	ldd	r22, Y+39	; 0x27
    4cec:	78 a5       	ldd	r23, Y+40	; 0x28
    4cee:	89 a5       	ldd	r24, Y+41	; 0x29
    4cf0:	9a a5       	ldd	r25, Y+42	; 0x2a
    4cf2:	20 e0       	ldi	r18, 0x00	; 0
    4cf4:	30 e0       	ldi	r19, 0x00	; 0
    4cf6:	4a e7       	ldi	r20, 0x7A	; 122
    4cf8:	55 e4       	ldi	r21, 0x45	; 69
    4cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cfe:	dc 01       	movw	r26, r24
    4d00:	cb 01       	movw	r24, r22
    4d02:	8b a3       	std	Y+35, r24	; 0x23
    4d04:	9c a3       	std	Y+36, r25	; 0x24
    4d06:	ad a3       	std	Y+37, r26	; 0x25
    4d08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4d0a:	6b a1       	ldd	r22, Y+35	; 0x23
    4d0c:	7c a1       	ldd	r23, Y+36	; 0x24
    4d0e:	8d a1       	ldd	r24, Y+37	; 0x25
    4d10:	9e a1       	ldd	r25, Y+38	; 0x26
    4d12:	20 e0       	ldi	r18, 0x00	; 0
    4d14:	30 e0       	ldi	r19, 0x00	; 0
    4d16:	40 e8       	ldi	r20, 0x80	; 128
    4d18:	5f e3       	ldi	r21, 0x3F	; 63
    4d1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d1e:	88 23       	and	r24, r24
    4d20:	2c f4       	brge	.+10     	; 0x4d2c <SevSeg_voidMulBCD+0x186>
		__ticks = 1;
    4d22:	81 e0       	ldi	r24, 0x01	; 1
    4d24:	90 e0       	ldi	r25, 0x00	; 0
    4d26:	9a a3       	std	Y+34, r25	; 0x22
    4d28:	89 a3       	std	Y+33, r24	; 0x21
    4d2a:	3f c0       	rjmp	.+126    	; 0x4daa <SevSeg_voidMulBCD+0x204>
	else if (__tmp > 65535)
    4d2c:	6b a1       	ldd	r22, Y+35	; 0x23
    4d2e:	7c a1       	ldd	r23, Y+36	; 0x24
    4d30:	8d a1       	ldd	r24, Y+37	; 0x25
    4d32:	9e a1       	ldd	r25, Y+38	; 0x26
    4d34:	20 e0       	ldi	r18, 0x00	; 0
    4d36:	3f ef       	ldi	r19, 0xFF	; 255
    4d38:	4f e7       	ldi	r20, 0x7F	; 127
    4d3a:	57 e4       	ldi	r21, 0x47	; 71
    4d3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d40:	18 16       	cp	r1, r24
    4d42:	4c f5       	brge	.+82     	; 0x4d96 <SevSeg_voidMulBCD+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d44:	6f a1       	ldd	r22, Y+39	; 0x27
    4d46:	78 a5       	ldd	r23, Y+40	; 0x28
    4d48:	89 a5       	ldd	r24, Y+41	; 0x29
    4d4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d4c:	20 e0       	ldi	r18, 0x00	; 0
    4d4e:	30 e0       	ldi	r19, 0x00	; 0
    4d50:	40 e2       	ldi	r20, 0x20	; 32
    4d52:	51 e4       	ldi	r21, 0x41	; 65
    4d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d58:	dc 01       	movw	r26, r24
    4d5a:	cb 01       	movw	r24, r22
    4d5c:	bc 01       	movw	r22, r24
    4d5e:	cd 01       	movw	r24, r26
    4d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d64:	dc 01       	movw	r26, r24
    4d66:	cb 01       	movw	r24, r22
    4d68:	9a a3       	std	Y+34, r25	; 0x22
    4d6a:	89 a3       	std	Y+33, r24	; 0x21
    4d6c:	0f c0       	rjmp	.+30     	; 0x4d8c <SevSeg_voidMulBCD+0x1e6>
    4d6e:	80 e9       	ldi	r24, 0x90	; 144
    4d70:	91 e0       	ldi	r25, 0x01	; 1
    4d72:	98 a3       	std	Y+32, r25	; 0x20
    4d74:	8f 8f       	std	Y+31, r24	; 0x1f
    4d76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4d78:	98 a1       	ldd	r25, Y+32	; 0x20
    4d7a:	01 97       	sbiw	r24, 0x01	; 1
    4d7c:	f1 f7       	brne	.-4      	; 0x4d7a <SevSeg_voidMulBCD+0x1d4>
    4d7e:	98 a3       	std	Y+32, r25	; 0x20
    4d80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d82:	89 a1       	ldd	r24, Y+33	; 0x21
    4d84:	9a a1       	ldd	r25, Y+34	; 0x22
    4d86:	01 97       	sbiw	r24, 0x01	; 1
    4d88:	9a a3       	std	Y+34, r25	; 0x22
    4d8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d8c:	89 a1       	ldd	r24, Y+33	; 0x21
    4d8e:	9a a1       	ldd	r25, Y+34	; 0x22
    4d90:	00 97       	sbiw	r24, 0x00	; 0
    4d92:	69 f7       	brne	.-38     	; 0x4d6e <SevSeg_voidMulBCD+0x1c8>
    4d94:	14 c0       	rjmp	.+40     	; 0x4dbe <SevSeg_voidMulBCD+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d96:	6b a1       	ldd	r22, Y+35	; 0x23
    4d98:	7c a1       	ldd	r23, Y+36	; 0x24
    4d9a:	8d a1       	ldd	r24, Y+37	; 0x25
    4d9c:	9e a1       	ldd	r25, Y+38	; 0x26
    4d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4da2:	dc 01       	movw	r26, r24
    4da4:	cb 01       	movw	r24, r22
    4da6:	9a a3       	std	Y+34, r25	; 0x22
    4da8:	89 a3       	std	Y+33, r24	; 0x21
    4daa:	89 a1       	ldd	r24, Y+33	; 0x21
    4dac:	9a a1       	ldd	r25, Y+34	; 0x22
    4dae:	9e 8f       	std	Y+30, r25	; 0x1e
    4db0:	8d 8f       	std	Y+29, r24	; 0x1d
    4db2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4db4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4db6:	01 97       	sbiw	r24, 0x01	; 1
    4db8:	f1 f7       	brne	.-4      	; 0x4db6 <SevSeg_voidMulBCD+0x210>
    4dba:	9e 8f       	std	Y+30, r25	; 0x1e
    4dbc:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(Sev_DELAY);
						DIO_voidSetPortValue(Sev_PORT,MulBCDArr[Local_Counter2]);
    4dbe:	8c a9       	ldd	r24, Y+52	; 0x34
    4dc0:	9d a9       	ldd	r25, Y+53	; 0x35
    4dc2:	ae a9       	ldd	r26, Y+54	; 0x36
    4dc4:	bf a9       	ldd	r27, Y+55	; 0x37
    4dc6:	fc 01       	movw	r30, r24
    4dc8:	ef 58       	subi	r30, 0x8F	; 143
    4dca:	fe 4f       	sbci	r31, 0xFE	; 254
    4dcc:	90 81       	ld	r25, Z
    4dce:	82 e0       	ldi	r24, 0x02	; 2
    4dd0:	69 2f       	mov	r22, r25
    4dd2:	0e 94 b6 1a 	call	0x356c	; 0x356c <DIO_voidSetPortValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN6, High);
    4dd6:	82 e0       	ldi	r24, 0x02	; 2
    4dd8:	66 e0       	ldi	r22, 0x06	; 6
    4dda:	41 e0       	ldi	r20, 0x01	; 1
    4ddc:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, Low);
    4de0:	82 e0       	ldi	r24, 0x02	; 2
    4de2:	65 e0       	ldi	r22, 0x05	; 5
    4de4:	40 e0       	ldi	r20, 0x00	; 0
    4de6:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
    4dea:	80 e0       	ldi	r24, 0x00	; 0
    4dec:	90 e0       	ldi	r25, 0x00	; 0
    4dee:	a0 e2       	ldi	r26, 0x20	; 32
    4df0:	b1 e4       	ldi	r27, 0x41	; 65
    4df2:	89 8f       	std	Y+25, r24	; 0x19
    4df4:	9a 8f       	std	Y+26, r25	; 0x1a
    4df6:	ab 8f       	std	Y+27, r26	; 0x1b
    4df8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dfa:	69 8d       	ldd	r22, Y+25	; 0x19
    4dfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4dfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e02:	20 e0       	ldi	r18, 0x00	; 0
    4e04:	30 e0       	ldi	r19, 0x00	; 0
    4e06:	4a e7       	ldi	r20, 0x7A	; 122
    4e08:	55 e4       	ldi	r21, 0x45	; 69
    4e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e0e:	dc 01       	movw	r26, r24
    4e10:	cb 01       	movw	r24, r22
    4e12:	8d 8b       	std	Y+21, r24	; 0x15
    4e14:	9e 8b       	std	Y+22, r25	; 0x16
    4e16:	af 8b       	std	Y+23, r26	; 0x17
    4e18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4e1a:	6d 89       	ldd	r22, Y+21	; 0x15
    4e1c:	7e 89       	ldd	r23, Y+22	; 0x16
    4e1e:	8f 89       	ldd	r24, Y+23	; 0x17
    4e20:	98 8d       	ldd	r25, Y+24	; 0x18
    4e22:	20 e0       	ldi	r18, 0x00	; 0
    4e24:	30 e0       	ldi	r19, 0x00	; 0
    4e26:	40 e8       	ldi	r20, 0x80	; 128
    4e28:	5f e3       	ldi	r21, 0x3F	; 63
    4e2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e2e:	88 23       	and	r24, r24
    4e30:	2c f4       	brge	.+10     	; 0x4e3c <SevSeg_voidMulBCD+0x296>
		__ticks = 1;
    4e32:	81 e0       	ldi	r24, 0x01	; 1
    4e34:	90 e0       	ldi	r25, 0x00	; 0
    4e36:	9c 8b       	std	Y+20, r25	; 0x14
    4e38:	8b 8b       	std	Y+19, r24	; 0x13
    4e3a:	3f c0       	rjmp	.+126    	; 0x4eba <SevSeg_voidMulBCD+0x314>
	else if (__tmp > 65535)
    4e3c:	6d 89       	ldd	r22, Y+21	; 0x15
    4e3e:	7e 89       	ldd	r23, Y+22	; 0x16
    4e40:	8f 89       	ldd	r24, Y+23	; 0x17
    4e42:	98 8d       	ldd	r25, Y+24	; 0x18
    4e44:	20 e0       	ldi	r18, 0x00	; 0
    4e46:	3f ef       	ldi	r19, 0xFF	; 255
    4e48:	4f e7       	ldi	r20, 0x7F	; 127
    4e4a:	57 e4       	ldi	r21, 0x47	; 71
    4e4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e50:	18 16       	cp	r1, r24
    4e52:	4c f5       	brge	.+82     	; 0x4ea6 <SevSeg_voidMulBCD+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e54:	69 8d       	ldd	r22, Y+25	; 0x19
    4e56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e5c:	20 e0       	ldi	r18, 0x00	; 0
    4e5e:	30 e0       	ldi	r19, 0x00	; 0
    4e60:	40 e2       	ldi	r20, 0x20	; 32
    4e62:	51 e4       	ldi	r21, 0x41	; 65
    4e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e68:	dc 01       	movw	r26, r24
    4e6a:	cb 01       	movw	r24, r22
    4e6c:	bc 01       	movw	r22, r24
    4e6e:	cd 01       	movw	r24, r26
    4e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e74:	dc 01       	movw	r26, r24
    4e76:	cb 01       	movw	r24, r22
    4e78:	9c 8b       	std	Y+20, r25	; 0x14
    4e7a:	8b 8b       	std	Y+19, r24	; 0x13
    4e7c:	0f c0       	rjmp	.+30     	; 0x4e9c <SevSeg_voidMulBCD+0x2f6>
    4e7e:	80 e9       	ldi	r24, 0x90	; 144
    4e80:	91 e0       	ldi	r25, 0x01	; 1
    4e82:	9a 8b       	std	Y+18, r25	; 0x12
    4e84:	89 8b       	std	Y+17, r24	; 0x11
    4e86:	89 89       	ldd	r24, Y+17	; 0x11
    4e88:	9a 89       	ldd	r25, Y+18	; 0x12
    4e8a:	01 97       	sbiw	r24, 0x01	; 1
    4e8c:	f1 f7       	brne	.-4      	; 0x4e8a <SevSeg_voidMulBCD+0x2e4>
    4e8e:	9a 8b       	std	Y+18, r25	; 0x12
    4e90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e92:	8b 89       	ldd	r24, Y+19	; 0x13
    4e94:	9c 89       	ldd	r25, Y+20	; 0x14
    4e96:	01 97       	sbiw	r24, 0x01	; 1
    4e98:	9c 8b       	std	Y+20, r25	; 0x14
    4e9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e9c:	8b 89       	ldd	r24, Y+19	; 0x13
    4e9e:	9c 89       	ldd	r25, Y+20	; 0x14
    4ea0:	00 97       	sbiw	r24, 0x00	; 0
    4ea2:	69 f7       	brne	.-38     	; 0x4e7e <SevSeg_voidMulBCD+0x2d8>
    4ea4:	14 c0       	rjmp	.+40     	; 0x4ece <SevSeg_voidMulBCD+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ea6:	6d 89       	ldd	r22, Y+21	; 0x15
    4ea8:	7e 89       	ldd	r23, Y+22	; 0x16
    4eaa:	8f 89       	ldd	r24, Y+23	; 0x17
    4eac:	98 8d       	ldd	r25, Y+24	; 0x18
    4eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eb2:	dc 01       	movw	r26, r24
    4eb4:	cb 01       	movw	r24, r22
    4eb6:	9c 8b       	std	Y+20, r25	; 0x14
    4eb8:	8b 8b       	std	Y+19, r24	; 0x13
    4eba:	8b 89       	ldd	r24, Y+19	; 0x13
    4ebc:	9c 89       	ldd	r25, Y+20	; 0x14
    4ebe:	98 8b       	std	Y+16, r25	; 0x10
    4ec0:	8f 87       	std	Y+15, r24	; 0x0f
    4ec2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ec4:	98 89       	ldd	r25, Y+16	; 0x10
    4ec6:	01 97       	sbiw	r24, 0x01	; 1
    4ec8:	f1 f7       	brne	.-4      	; 0x4ec6 <SevSeg_voidMulBCD+0x320>
    4eca:	98 8b       	std	Y+16, r25	; 0x10
    4ecc:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(Sev_DELAY);
						count++;
    4ece:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ed0:	98 a9       	ldd	r25, Y+48	; 0x30
    4ed2:	a9 a9       	ldd	r26, Y+49	; 0x31
    4ed4:	ba a9       	ldd	r27, Y+50	; 0x32
    4ed6:	01 96       	adiw	r24, 0x01	; 1
    4ed8:	a1 1d       	adc	r26, r1
    4eda:	b1 1d       	adc	r27, r1
    4edc:	8f a7       	std	Y+47, r24	; 0x2f
    4ede:	98 ab       	std	Y+48, r25	; 0x30
    4ee0:	a9 ab       	std	Y+49, r26	; 0x31
    4ee2:	ba ab       	std	Y+50, r27	; 0x32

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
					count = 0;
					while(count< delay){
    4ee4:	2f a5       	ldd	r18, Y+47	; 0x2f
    4ee6:	38 a9       	ldd	r19, Y+48	; 0x30
    4ee8:	49 a9       	ldd	r20, Y+49	; 0x31
    4eea:	5a a9       	ldd	r21, Y+50	; 0x32
    4eec:	8b a5       	ldd	r24, Y+43	; 0x2b
    4eee:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ef0:	ad a5       	ldd	r26, Y+45	; 0x2d
    4ef2:	be a5       	ldd	r27, Y+46	; 0x2e
    4ef4:	28 17       	cp	r18, r24
    4ef6:	39 07       	cpc	r19, r25
    4ef8:	4a 07       	cpc	r20, r26
    4efa:	5b 07       	cpc	r21, r27
    4efc:	08 f4       	brcc	.+2      	; 0x4f00 <SevSeg_voidMulBCD+0x35a>
    4efe:	d7 ce       	rjmp	.-594    	; 0x4cae <SevSeg_voidMulBCD+0x108>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, Low);
						_delay_ms(Sev_DELAY);
						count++;
					}
					//DIO_voidSetPortValue(Sev_PORT,num);
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    4f00:	8c ad       	ldd	r24, Y+60	; 0x3c
    4f02:	28 2f       	mov	r18, r24
    4f04:	33 27       	eor	r19, r19
    4f06:	27 fd       	sbrc	r18, 7
    4f08:	30 95       	com	r19
    4f0a:	43 2f       	mov	r20, r19
    4f0c:	53 2f       	mov	r21, r19
    4f0e:	8c a9       	ldd	r24, Y+52	; 0x34
    4f10:	9d a9       	ldd	r25, Y+53	; 0x35
    4f12:	ae a9       	ldd	r26, Y+54	; 0x36
    4f14:	bf a9       	ldd	r27, Y+55	; 0x37
    4f16:	28 17       	cp	r18, r24
    4f18:	39 07       	cpc	r19, r25
    4f1a:	4a 07       	cpc	r20, r26
    4f1c:	5b 07       	cpc	r21, r27
    4f1e:	89 f4       	brne	.+34     	; 0x4f42 <SevSeg_voidMulBCD+0x39c>
    4f20:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f22:	28 2f       	mov	r18, r24
    4f24:	33 27       	eor	r19, r19
    4f26:	27 fd       	sbrc	r18, 7
    4f28:	30 95       	com	r19
    4f2a:	43 2f       	mov	r20, r19
    4f2c:	53 2f       	mov	r21, r19
    4f2e:	88 ad       	ldd	r24, Y+56	; 0x38
    4f30:	99 ad       	ldd	r25, Y+57	; 0x39
    4f32:	aa ad       	ldd	r26, Y+58	; 0x3a
    4f34:	bb ad       	ldd	r27, Y+59	; 0x3b
    4f36:	28 17       	cp	r18, r24
    4f38:	39 07       	cpc	r19, r25
    4f3a:	4a 07       	cpc	r20, r26
    4f3c:	5b 07       	cpc	r21, r27
    4f3e:	09 f4       	brne	.+2      	; 0x4f42 <SevSeg_voidMulBCD+0x39c>
    4f40:	31 c1       	rjmp	.+610    	; 0x51a4 <SevSeg_voidMulBCD+0x5fe>
	u32 delay = 1000 / (Sev_DELAY * 2);
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    4f42:	8c a9       	ldd	r24, Y+52	; 0x34
    4f44:	9d a9       	ldd	r25, Y+53	; 0x35
    4f46:	ae a9       	ldd	r26, Y+54	; 0x36
    4f48:	bf a9       	ldd	r27, Y+55	; 0x37
    4f4a:	01 96       	adiw	r24, 0x01	; 1
    4f4c:	a1 1d       	adc	r26, r1
    4f4e:	b1 1d       	adc	r27, r1
    4f50:	8c ab       	std	Y+52, r24	; 0x34
    4f52:	9d ab       	std	Y+53, r25	; 0x35
    4f54:	ae ab       	std	Y+54, r26	; 0x36
    4f56:	bf ab       	std	Y+55, r27	; 0x37
    4f58:	8c a9       	ldd	r24, Y+52	; 0x34
    4f5a:	9d a9       	ldd	r25, Y+53	; 0x35
    4f5c:	ae a9       	ldd	r26, Y+54	; 0x36
    4f5e:	bf a9       	ldd	r27, Y+55	; 0x37
    4f60:	8a 30       	cpi	r24, 0x0A	; 10
    4f62:	91 05       	cpc	r25, r1
    4f64:	a1 05       	cpc	r26, r1
    4f66:	b1 05       	cpc	r27, r1
    4f68:	0c f4       	brge	.+2      	; 0x4f6c <SevSeg_voidMulBCD+0x3c6>
    4f6a:	9c ce       	rjmp	.-712    	; 0x4ca4 <SevSeg_voidMulBCD+0xfe>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    4f6c:	1e ae       	std	Y+62, r1	; 0x3e
	u32 count = 0;
	u32 delay = 1000 / (Sev_DELAY * 2);
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    4f6e:	88 ad       	ldd	r24, Y+56	; 0x38
    4f70:	99 ad       	ldd	r25, Y+57	; 0x39
    4f72:	aa ad       	ldd	r26, Y+58	; 0x3a
    4f74:	bb ad       	ldd	r27, Y+59	; 0x3b
    4f76:	01 96       	adiw	r24, 0x01	; 1
    4f78:	a1 1d       	adc	r26, r1
    4f7a:	b1 1d       	adc	r27, r1
    4f7c:	88 af       	std	Y+56, r24	; 0x38
    4f7e:	99 af       	std	Y+57, r25	; 0x39
    4f80:	aa af       	std	Y+58, r26	; 0x3a
    4f82:	bb af       	std	Y+59, r27	; 0x3b
    4f84:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f86:	28 2f       	mov	r18, r24
    4f88:	33 27       	eor	r19, r19
    4f8a:	27 fd       	sbrc	r18, 7
    4f8c:	30 95       	com	r19
    4f8e:	43 2f       	mov	r20, r19
    4f90:	53 2f       	mov	r21, r19
    4f92:	88 ad       	ldd	r24, Y+56	; 0x38
    4f94:	99 ad       	ldd	r25, Y+57	; 0x39
    4f96:	aa ad       	ldd	r26, Y+58	; 0x3a
    4f98:	bb ad       	ldd	r27, Y+59	; 0x3b
    4f9a:	28 17       	cp	r18, r24
    4f9c:	39 07       	cpc	r19, r25
    4f9e:	4a 07       	cpc	r20, r26
    4fa0:	5b 07       	cpc	r21, r27
    4fa2:	0c f0       	brlt	.+2      	; 0x4fa6 <SevSeg_voidMulBCD+0x400>
    4fa4:	74 ce       	rjmp	.-792    	; 0x4c8e <SevSeg_voidMulBCD+0xe8>
    4fa6:	fe c0       	rjmp	.+508    	; 0x51a4 <SevSeg_voidMulBCD+0x5fe>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    4fa8:	8f ad       	ldd	r24, Y+63	; 0x3f
    4faa:	99 27       	eor	r25, r25
    4fac:	87 fd       	sbrc	r24, 7
    4fae:	90 95       	com	r25
    4fb0:	a9 2f       	mov	r26, r25
    4fb2:	b9 2f       	mov	r27, r25
    4fb4:	88 af       	std	Y+56, r24	; 0x38
    4fb6:	99 af       	std	Y+57, r25	; 0x39
    4fb8:	aa af       	std	Y+58, r26	; 0x3a
    4fba:	bb af       	std	Y+59, r27	; 0x3b
    4fbc:	e2 c0       	rjmp	.+452    	; 0x5182 <SevSeg_voidMulBCD+0x5dc>

				num &= 0x0F;
    4fbe:	8b a9       	ldd	r24, Y+51	; 0x33
    4fc0:	8f 70       	andi	r24, 0x0F	; 15
    4fc2:	8b ab       	std	Y+51, r24	; 0x33
				num |= (Local_Counter1 << 4);
    4fc4:	88 ad       	ldd	r24, Y+56	; 0x38
    4fc6:	99 ad       	ldd	r25, Y+57	; 0x39
    4fc8:	aa ad       	ldd	r26, Y+58	; 0x3a
    4fca:	bb ad       	ldd	r27, Y+59	; 0x3b
    4fcc:	88 0f       	add	r24, r24
    4fce:	99 1f       	adc	r25, r25
    4fd0:	aa 1f       	adc	r26, r26
    4fd2:	bb 1f       	adc	r27, r27
    4fd4:	88 0f       	add	r24, r24
    4fd6:	99 1f       	adc	r25, r25
    4fd8:	aa 1f       	adc	r26, r26
    4fda:	bb 1f       	adc	r27, r27
    4fdc:	88 0f       	add	r24, r24
    4fde:	99 1f       	adc	r25, r25
    4fe0:	aa 1f       	adc	r26, r26
    4fe2:	bb 1f       	adc	r27, r27
    4fe4:	88 0f       	add	r24, r24
    4fe6:	99 1f       	adc	r25, r25
    4fe8:	aa 1f       	adc	r26, r26
    4fea:	bb 1f       	adc	r27, r27
    4fec:	98 2f       	mov	r25, r24
    4fee:	8b a9       	ldd	r24, Y+51	; 0x33
    4ff0:	89 2b       	or	r24, r25
    4ff2:	8b ab       	std	Y+51, r24	; 0x33

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    4ff4:	8e ad       	ldd	r24, Y+62	; 0x3e
    4ff6:	99 27       	eor	r25, r25
    4ff8:	87 fd       	sbrc	r24, 7
    4ffa:	90 95       	com	r25
    4ffc:	a9 2f       	mov	r26, r25
    4ffe:	b9 2f       	mov	r27, r25
    5000:	8c ab       	std	Y+52, r24	; 0x34
    5002:	9d ab       	std	Y+53, r25	; 0x35
    5004:	ae ab       	std	Y+54, r26	; 0x36
    5006:	bf ab       	std	Y+55, r27	; 0x37
    5008:	a8 c0       	rjmp	.+336    	; 0x515a <SevSeg_voidMulBCD+0x5b4>
					num &= 0xF0;
    500a:	8b a9       	ldd	r24, Y+51	; 0x33
    500c:	80 7f       	andi	r24, 0xF0	; 240
    500e:	8b ab       	std	Y+51, r24	; 0x33
					num |= Local_Counter2;
    5010:	9c a9       	ldd	r25, Y+52	; 0x34
    5012:	8b a9       	ldd	r24, Y+51	; 0x33
    5014:	89 2b       	or	r24, r25
    5016:	8b ab       	std	Y+51, r24	; 0x33
    5018:	80 e0       	ldi	r24, 0x00	; 0
    501a:	90 e0       	ldi	r25, 0x00	; 0
    501c:	a0 e2       	ldi	r26, 0x20	; 32
    501e:	b1 e4       	ldi	r27, 0x41	; 65
    5020:	8b 87       	std	Y+11, r24	; 0x0b
    5022:	9c 87       	std	Y+12, r25	; 0x0c
    5024:	ad 87       	std	Y+13, r26	; 0x0d
    5026:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5028:	6b 85       	ldd	r22, Y+11	; 0x0b
    502a:	7c 85       	ldd	r23, Y+12	; 0x0c
    502c:	8d 85       	ldd	r24, Y+13	; 0x0d
    502e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5030:	20 e0       	ldi	r18, 0x00	; 0
    5032:	30 e0       	ldi	r19, 0x00	; 0
    5034:	4a e7       	ldi	r20, 0x7A	; 122
    5036:	55 e4       	ldi	r21, 0x45	; 69
    5038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    503c:	dc 01       	movw	r26, r24
    503e:	cb 01       	movw	r24, r22
    5040:	8f 83       	std	Y+7, r24	; 0x07
    5042:	98 87       	std	Y+8, r25	; 0x08
    5044:	a9 87       	std	Y+9, r26	; 0x09
    5046:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5048:	6f 81       	ldd	r22, Y+7	; 0x07
    504a:	78 85       	ldd	r23, Y+8	; 0x08
    504c:	89 85       	ldd	r24, Y+9	; 0x09
    504e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5050:	20 e0       	ldi	r18, 0x00	; 0
    5052:	30 e0       	ldi	r19, 0x00	; 0
    5054:	40 e8       	ldi	r20, 0x80	; 128
    5056:	5f e3       	ldi	r21, 0x3F	; 63
    5058:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    505c:	88 23       	and	r24, r24
    505e:	2c f4       	brge	.+10     	; 0x506a <SevSeg_voidMulBCD+0x4c4>
		__ticks = 1;
    5060:	81 e0       	ldi	r24, 0x01	; 1
    5062:	90 e0       	ldi	r25, 0x00	; 0
    5064:	9e 83       	std	Y+6, r25	; 0x06
    5066:	8d 83       	std	Y+5, r24	; 0x05
    5068:	3f c0       	rjmp	.+126    	; 0x50e8 <SevSeg_voidMulBCD+0x542>
	else if (__tmp > 65535)
    506a:	6f 81       	ldd	r22, Y+7	; 0x07
    506c:	78 85       	ldd	r23, Y+8	; 0x08
    506e:	89 85       	ldd	r24, Y+9	; 0x09
    5070:	9a 85       	ldd	r25, Y+10	; 0x0a
    5072:	20 e0       	ldi	r18, 0x00	; 0
    5074:	3f ef       	ldi	r19, 0xFF	; 255
    5076:	4f e7       	ldi	r20, 0x7F	; 127
    5078:	57 e4       	ldi	r21, 0x47	; 71
    507a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    507e:	18 16       	cp	r1, r24
    5080:	4c f5       	brge	.+82     	; 0x50d4 <SevSeg_voidMulBCD+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5082:	6b 85       	ldd	r22, Y+11	; 0x0b
    5084:	7c 85       	ldd	r23, Y+12	; 0x0c
    5086:	8d 85       	ldd	r24, Y+13	; 0x0d
    5088:	9e 85       	ldd	r25, Y+14	; 0x0e
    508a:	20 e0       	ldi	r18, 0x00	; 0
    508c:	30 e0       	ldi	r19, 0x00	; 0
    508e:	40 e2       	ldi	r20, 0x20	; 32
    5090:	51 e4       	ldi	r21, 0x41	; 65
    5092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5096:	dc 01       	movw	r26, r24
    5098:	cb 01       	movw	r24, r22
    509a:	bc 01       	movw	r22, r24
    509c:	cd 01       	movw	r24, r26
    509e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50a2:	dc 01       	movw	r26, r24
    50a4:	cb 01       	movw	r24, r22
    50a6:	9e 83       	std	Y+6, r25	; 0x06
    50a8:	8d 83       	std	Y+5, r24	; 0x05
    50aa:	0f c0       	rjmp	.+30     	; 0x50ca <SevSeg_voidMulBCD+0x524>
    50ac:	80 e9       	ldi	r24, 0x90	; 144
    50ae:	91 e0       	ldi	r25, 0x01	; 1
    50b0:	9c 83       	std	Y+4, r25	; 0x04
    50b2:	8b 83       	std	Y+3, r24	; 0x03
    50b4:	8b 81       	ldd	r24, Y+3	; 0x03
    50b6:	9c 81       	ldd	r25, Y+4	; 0x04
    50b8:	01 97       	sbiw	r24, 0x01	; 1
    50ba:	f1 f7       	brne	.-4      	; 0x50b8 <SevSeg_voidMulBCD+0x512>
    50bc:	9c 83       	std	Y+4, r25	; 0x04
    50be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50c0:	8d 81       	ldd	r24, Y+5	; 0x05
    50c2:	9e 81       	ldd	r25, Y+6	; 0x06
    50c4:	01 97       	sbiw	r24, 0x01	; 1
    50c6:	9e 83       	std	Y+6, r25	; 0x06
    50c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50ca:	8d 81       	ldd	r24, Y+5	; 0x05
    50cc:	9e 81       	ldd	r25, Y+6	; 0x06
    50ce:	00 97       	sbiw	r24, 0x00	; 0
    50d0:	69 f7       	brne	.-38     	; 0x50ac <SevSeg_voidMulBCD+0x506>
    50d2:	14 c0       	rjmp	.+40     	; 0x50fc <SevSeg_voidMulBCD+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50d4:	6f 81       	ldd	r22, Y+7	; 0x07
    50d6:	78 85       	ldd	r23, Y+8	; 0x08
    50d8:	89 85       	ldd	r24, Y+9	; 0x09
    50da:	9a 85       	ldd	r25, Y+10	; 0x0a
    50dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50e0:	dc 01       	movw	r26, r24
    50e2:	cb 01       	movw	r24, r22
    50e4:	9e 83       	std	Y+6, r25	; 0x06
    50e6:	8d 83       	std	Y+5, r24	; 0x05
    50e8:	8d 81       	ldd	r24, Y+5	; 0x05
    50ea:	9e 81       	ldd	r25, Y+6	; 0x06
    50ec:	9a 83       	std	Y+2, r25	; 0x02
    50ee:	89 83       	std	Y+1, r24	; 0x01
    50f0:	89 81       	ldd	r24, Y+1	; 0x01
    50f2:	9a 81       	ldd	r25, Y+2	; 0x02
    50f4:	01 97       	sbiw	r24, 0x01	; 1
    50f6:	f1 f7       	brne	.-4      	; 0x50f4 <SevSeg_voidMulBCD+0x54e>
    50f8:	9a 83       	std	Y+2, r25	; 0x02
    50fa:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    50fc:	82 e0       	ldi	r24, 0x02	; 2
    50fe:	6b a9       	ldd	r22, Y+51	; 0x33
    5100:	0e 94 b6 1a 	call	0x356c	; 0x356c <DIO_voidSetPortValue>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    5104:	8c ad       	ldd	r24, Y+60	; 0x3c
    5106:	28 2f       	mov	r18, r24
    5108:	33 27       	eor	r19, r19
    510a:	27 fd       	sbrc	r18, 7
    510c:	30 95       	com	r19
    510e:	43 2f       	mov	r20, r19
    5110:	53 2f       	mov	r21, r19
    5112:	8c a9       	ldd	r24, Y+52	; 0x34
    5114:	9d a9       	ldd	r25, Y+53	; 0x35
    5116:	ae a9       	ldd	r26, Y+54	; 0x36
    5118:	bf a9       	ldd	r27, Y+55	; 0x37
    511a:	28 17       	cp	r18, r24
    511c:	39 07       	cpc	r19, r25
    511e:	4a 07       	cpc	r20, r26
    5120:	5b 07       	cpc	r21, r27
    5122:	81 f4       	brne	.+32     	; 0x5144 <SevSeg_voidMulBCD+0x59e>
    5124:	8d ad       	ldd	r24, Y+61	; 0x3d
    5126:	28 2f       	mov	r18, r24
    5128:	33 27       	eor	r19, r19
    512a:	27 fd       	sbrc	r18, 7
    512c:	30 95       	com	r19
    512e:	43 2f       	mov	r20, r19
    5130:	53 2f       	mov	r21, r19
    5132:	88 ad       	ldd	r24, Y+56	; 0x38
    5134:	99 ad       	ldd	r25, Y+57	; 0x39
    5136:	aa ad       	ldd	r26, Y+58	; 0x3a
    5138:	bb ad       	ldd	r27, Y+59	; 0x3b
    513a:	28 17       	cp	r18, r24
    513c:	39 07       	cpc	r19, r25
    513e:	4a 07       	cpc	r20, r26
    5140:	5b 07       	cpc	r21, r27
    5142:	81 f1       	breq	.+96     	; 0x51a4 <SevSeg_voidMulBCD+0x5fe>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				num &= 0x0F;
				num |= (Local_Counter1 << 4);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    5144:	8c a9       	ldd	r24, Y+52	; 0x34
    5146:	9d a9       	ldd	r25, Y+53	; 0x35
    5148:	ae a9       	ldd	r26, Y+54	; 0x36
    514a:	bf a9       	ldd	r27, Y+55	; 0x37
    514c:	01 97       	sbiw	r24, 0x01	; 1
    514e:	a1 09       	sbc	r26, r1
    5150:	b1 09       	sbc	r27, r1
    5152:	8c ab       	std	Y+52, r24	; 0x34
    5154:	9d ab       	std	Y+53, r25	; 0x35
    5156:	ae ab       	std	Y+54, r26	; 0x36
    5158:	bf ab       	std	Y+55, r27	; 0x37
    515a:	8c a9       	ldd	r24, Y+52	; 0x34
    515c:	9d a9       	ldd	r25, Y+53	; 0x35
    515e:	ae a9       	ldd	r26, Y+54	; 0x36
    5160:	bf a9       	ldd	r27, Y+55	; 0x37
    5162:	bb 23       	and	r27, r27
    5164:	0c f0       	brlt	.+2      	; 0x5168 <SevSeg_voidMulBCD+0x5c2>
    5166:	51 cf       	rjmp	.-350    	; 0x500a <SevSeg_voidMulBCD+0x464>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}
				Local_SevSegOneStart = 9;
    5168:	89 e0       	ldi	r24, 0x09	; 9
    516a:	8e af       	std	Y+62, r24	; 0x3e

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    516c:	88 ad       	ldd	r24, Y+56	; 0x38
    516e:	99 ad       	ldd	r25, Y+57	; 0x39
    5170:	aa ad       	ldd	r26, Y+58	; 0x3a
    5172:	bb ad       	ldd	r27, Y+59	; 0x3b
    5174:	01 97       	sbiw	r24, 0x01	; 1
    5176:	a1 09       	sbc	r26, r1
    5178:	b1 09       	sbc	r27, r1
    517a:	88 af       	std	Y+56, r24	; 0x38
    517c:	99 af       	std	Y+57, r25	; 0x39
    517e:	aa af       	std	Y+58, r26	; 0x3a
    5180:	bb af       	std	Y+59, r27	; 0x3b
    5182:	8d ad       	ldd	r24, Y+61	; 0x3d
    5184:	28 2f       	mov	r18, r24
    5186:	33 27       	eor	r19, r19
    5188:	27 fd       	sbrc	r18, 7
    518a:	30 95       	com	r19
    518c:	43 2f       	mov	r20, r19
    518e:	53 2f       	mov	r21, r19
    5190:	88 ad       	ldd	r24, Y+56	; 0x38
    5192:	99 ad       	ldd	r25, Y+57	; 0x39
    5194:	aa ad       	ldd	r26, Y+58	; 0x3a
    5196:	bb ad       	ldd	r27, Y+59	; 0x3b
    5198:	82 17       	cp	r24, r18
    519a:	93 07       	cpc	r25, r19
    519c:	a4 07       	cpc	r26, r20
    519e:	b5 07       	cpc	r27, r21
    51a0:	0c f0       	brlt	.+2      	; 0x51a4 <SevSeg_voidMulBCD+0x5fe>
    51a2:	0d cf       	rjmp	.-486    	; 0x4fbe <SevSeg_voidMulBCD+0x418>
				}
				Local_SevSegOneStart = 9;
			}
		}
	}
}
    51a4:	cf 5b       	subi	r28, 0xBF	; 191
    51a6:	df 4f       	sbci	r29, 0xFF	; 255
    51a8:	0f b6       	in	r0, 0x3f	; 63
    51aa:	f8 94       	cli
    51ac:	de bf       	out	0x3e, r29	; 62
    51ae:	0f be       	out	0x3f, r0	; 63
    51b0:	cd bf       	out	0x3d, r28	; 61
    51b2:	cf 91       	pop	r28
    51b4:	df 91       	pop	r29
    51b6:	08 95       	ret

000051b8 <LCD_voidInit>:
#include "../Header/LCD_Interface.h"
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "util/delay.h"


void LCD_voidInit(){
    51b8:	0f 93       	push	r16
    51ba:	1f 93       	push	r17
    51bc:	df 93       	push	r29
    51be:	cf 93       	push	r28
    51c0:	cd b7       	in	r28, 0x3d	; 61
    51c2:	de b7       	in	r29, 0x3e	; 62
    51c4:	cc 58       	subi	r28, 0x8C	; 140
    51c6:	d0 40       	sbci	r29, 0x00	; 0
    51c8:	0f b6       	in	r0, 0x3f	; 63
    51ca:	f8 94       	cli
    51cc:	de bf       	out	0x3e, r29	; 62
    51ce:	0f be       	out	0x3f, r0	; 63
    51d0:	cd bf       	out	0x3d, r28	; 61
    51d2:	fe 01       	movw	r30, r28
    51d4:	e7 57       	subi	r30, 0x77	; 119
    51d6:	ff 4f       	sbci	r31, 0xFF	; 255
    51d8:	80 e0       	ldi	r24, 0x00	; 0
    51da:	90 e0       	ldi	r25, 0x00	; 0
    51dc:	ac e0       	ldi	r26, 0x0C	; 12
    51de:	b2 e4       	ldi	r27, 0x42	; 66
    51e0:	80 83       	st	Z, r24
    51e2:	91 83       	std	Z+1, r25	; 0x01
    51e4:	a2 83       	std	Z+2, r26	; 0x02
    51e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51e8:	8e 01       	movw	r16, r28
    51ea:	0b 57       	subi	r16, 0x7B	; 123
    51ec:	1f 4f       	sbci	r17, 0xFF	; 255
    51ee:	fe 01       	movw	r30, r28
    51f0:	e7 57       	subi	r30, 0x77	; 119
    51f2:	ff 4f       	sbci	r31, 0xFF	; 255
    51f4:	60 81       	ld	r22, Z
    51f6:	71 81       	ldd	r23, Z+1	; 0x01
    51f8:	82 81       	ldd	r24, Z+2	; 0x02
    51fa:	93 81       	ldd	r25, Z+3	; 0x03
    51fc:	20 e0       	ldi	r18, 0x00	; 0
    51fe:	30 e0       	ldi	r19, 0x00	; 0
    5200:	4a e7       	ldi	r20, 0x7A	; 122
    5202:	55 e4       	ldi	r21, 0x45	; 69
    5204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5208:	dc 01       	movw	r26, r24
    520a:	cb 01       	movw	r24, r22
    520c:	f8 01       	movw	r30, r16
    520e:	80 83       	st	Z, r24
    5210:	91 83       	std	Z+1, r25	; 0x01
    5212:	a2 83       	std	Z+2, r26	; 0x02
    5214:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5216:	fe 01       	movw	r30, r28
    5218:	eb 57       	subi	r30, 0x7B	; 123
    521a:	ff 4f       	sbci	r31, 0xFF	; 255
    521c:	60 81       	ld	r22, Z
    521e:	71 81       	ldd	r23, Z+1	; 0x01
    5220:	82 81       	ldd	r24, Z+2	; 0x02
    5222:	93 81       	ldd	r25, Z+3	; 0x03
    5224:	20 e0       	ldi	r18, 0x00	; 0
    5226:	30 e0       	ldi	r19, 0x00	; 0
    5228:	40 e8       	ldi	r20, 0x80	; 128
    522a:	5f e3       	ldi	r21, 0x3F	; 63
    522c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5230:	88 23       	and	r24, r24
    5232:	44 f4       	brge	.+16     	; 0x5244 <LCD_voidInit+0x8c>
		__ticks = 1;
    5234:	fe 01       	movw	r30, r28
    5236:	ed 57       	subi	r30, 0x7D	; 125
    5238:	ff 4f       	sbci	r31, 0xFF	; 255
    523a:	81 e0       	ldi	r24, 0x01	; 1
    523c:	90 e0       	ldi	r25, 0x00	; 0
    523e:	91 83       	std	Z+1, r25	; 0x01
    5240:	80 83       	st	Z, r24
    5242:	64 c0       	rjmp	.+200    	; 0x530c <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    5244:	fe 01       	movw	r30, r28
    5246:	eb 57       	subi	r30, 0x7B	; 123
    5248:	ff 4f       	sbci	r31, 0xFF	; 255
    524a:	60 81       	ld	r22, Z
    524c:	71 81       	ldd	r23, Z+1	; 0x01
    524e:	82 81       	ldd	r24, Z+2	; 0x02
    5250:	93 81       	ldd	r25, Z+3	; 0x03
    5252:	20 e0       	ldi	r18, 0x00	; 0
    5254:	3f ef       	ldi	r19, 0xFF	; 255
    5256:	4f e7       	ldi	r20, 0x7F	; 127
    5258:	57 e4       	ldi	r21, 0x47	; 71
    525a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    525e:	18 16       	cp	r1, r24
    5260:	0c f0       	brlt	.+2      	; 0x5264 <LCD_voidInit+0xac>
    5262:	43 c0       	rjmp	.+134    	; 0x52ea <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5264:	fe 01       	movw	r30, r28
    5266:	e7 57       	subi	r30, 0x77	; 119
    5268:	ff 4f       	sbci	r31, 0xFF	; 255
    526a:	60 81       	ld	r22, Z
    526c:	71 81       	ldd	r23, Z+1	; 0x01
    526e:	82 81       	ldd	r24, Z+2	; 0x02
    5270:	93 81       	ldd	r25, Z+3	; 0x03
    5272:	20 e0       	ldi	r18, 0x00	; 0
    5274:	30 e0       	ldi	r19, 0x00	; 0
    5276:	40 e2       	ldi	r20, 0x20	; 32
    5278:	51 e4       	ldi	r21, 0x41	; 65
    527a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    527e:	dc 01       	movw	r26, r24
    5280:	cb 01       	movw	r24, r22
    5282:	8e 01       	movw	r16, r28
    5284:	0d 57       	subi	r16, 0x7D	; 125
    5286:	1f 4f       	sbci	r17, 0xFF	; 255
    5288:	bc 01       	movw	r22, r24
    528a:	cd 01       	movw	r24, r26
    528c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5290:	dc 01       	movw	r26, r24
    5292:	cb 01       	movw	r24, r22
    5294:	f8 01       	movw	r30, r16
    5296:	91 83       	std	Z+1, r25	; 0x01
    5298:	80 83       	st	Z, r24
    529a:	1f c0       	rjmp	.+62     	; 0x52da <LCD_voidInit+0x122>
    529c:	fe 01       	movw	r30, r28
    529e:	ef 57       	subi	r30, 0x7F	; 127
    52a0:	ff 4f       	sbci	r31, 0xFF	; 255
    52a2:	80 e9       	ldi	r24, 0x90	; 144
    52a4:	91 e0       	ldi	r25, 0x01	; 1
    52a6:	91 83       	std	Z+1, r25	; 0x01
    52a8:	80 83       	st	Z, r24
    52aa:	fe 01       	movw	r30, r28
    52ac:	ef 57       	subi	r30, 0x7F	; 127
    52ae:	ff 4f       	sbci	r31, 0xFF	; 255
    52b0:	80 81       	ld	r24, Z
    52b2:	91 81       	ldd	r25, Z+1	; 0x01
    52b4:	01 97       	sbiw	r24, 0x01	; 1
    52b6:	f1 f7       	brne	.-4      	; 0x52b4 <LCD_voidInit+0xfc>
    52b8:	fe 01       	movw	r30, r28
    52ba:	ef 57       	subi	r30, 0x7F	; 127
    52bc:	ff 4f       	sbci	r31, 0xFF	; 255
    52be:	91 83       	std	Z+1, r25	; 0x01
    52c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52c2:	de 01       	movw	r26, r28
    52c4:	ad 57       	subi	r26, 0x7D	; 125
    52c6:	bf 4f       	sbci	r27, 0xFF	; 255
    52c8:	fe 01       	movw	r30, r28
    52ca:	ed 57       	subi	r30, 0x7D	; 125
    52cc:	ff 4f       	sbci	r31, 0xFF	; 255
    52ce:	80 81       	ld	r24, Z
    52d0:	91 81       	ldd	r25, Z+1	; 0x01
    52d2:	01 97       	sbiw	r24, 0x01	; 1
    52d4:	11 96       	adiw	r26, 0x01	; 1
    52d6:	9c 93       	st	X, r25
    52d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52da:	fe 01       	movw	r30, r28
    52dc:	ed 57       	subi	r30, 0x7D	; 125
    52de:	ff 4f       	sbci	r31, 0xFF	; 255
    52e0:	80 81       	ld	r24, Z
    52e2:	91 81       	ldd	r25, Z+1	; 0x01
    52e4:	00 97       	sbiw	r24, 0x00	; 0
    52e6:	d1 f6       	brne	.-76     	; 0x529c <LCD_voidInit+0xe4>
    52e8:	27 c0       	rjmp	.+78     	; 0x5338 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52ea:	8e 01       	movw	r16, r28
    52ec:	0d 57       	subi	r16, 0x7D	; 125
    52ee:	1f 4f       	sbci	r17, 0xFF	; 255
    52f0:	fe 01       	movw	r30, r28
    52f2:	eb 57       	subi	r30, 0x7B	; 123
    52f4:	ff 4f       	sbci	r31, 0xFF	; 255
    52f6:	60 81       	ld	r22, Z
    52f8:	71 81       	ldd	r23, Z+1	; 0x01
    52fa:	82 81       	ldd	r24, Z+2	; 0x02
    52fc:	93 81       	ldd	r25, Z+3	; 0x03
    52fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5302:	dc 01       	movw	r26, r24
    5304:	cb 01       	movw	r24, r22
    5306:	f8 01       	movw	r30, r16
    5308:	91 83       	std	Z+1, r25	; 0x01
    530a:	80 83       	st	Z, r24
    530c:	de 01       	movw	r26, r28
    530e:	a1 58       	subi	r26, 0x81	; 129
    5310:	bf 4f       	sbci	r27, 0xFF	; 255
    5312:	fe 01       	movw	r30, r28
    5314:	ed 57       	subi	r30, 0x7D	; 125
    5316:	ff 4f       	sbci	r31, 0xFF	; 255
    5318:	80 81       	ld	r24, Z
    531a:	91 81       	ldd	r25, Z+1	; 0x01
    531c:	8d 93       	st	X+, r24
    531e:	9c 93       	st	X, r25
    5320:	fe 01       	movw	r30, r28
    5322:	e1 58       	subi	r30, 0x81	; 129
    5324:	ff 4f       	sbci	r31, 0xFF	; 255
    5326:	80 81       	ld	r24, Z
    5328:	91 81       	ldd	r25, Z+1	; 0x01
    532a:	01 97       	sbiw	r24, 0x01	; 1
    532c:	f1 f7       	brne	.-4      	; 0x532a <LCD_voidInit+0x172>
    532e:	fe 01       	movw	r30, r28
    5330:	e1 58       	subi	r30, 0x81	; 129
    5332:	ff 4f       	sbci	r31, 0xFF	; 255
    5334:	91 83       	std	Z+1, r25	; 0x01
    5336:	80 83       	st	Z, r24
	_delay_ms(35);
#if LCD_BITS == LCD_4_BIT_MODE
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    5338:	80 e3       	ldi	r24, 0x30	; 48
    533a:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <LCD_voidSendInitCommand>
    533e:	fe 01       	movw	r30, r28
    5340:	e5 58       	subi	r30, 0x85	; 133
    5342:	ff 4f       	sbci	r31, 0xFF	; 255
    5344:	80 e0       	ldi	r24, 0x00	; 0
    5346:	90 e0       	ldi	r25, 0x00	; 0
    5348:	a0 ea       	ldi	r26, 0xA0	; 160
    534a:	b0 e4       	ldi	r27, 0x40	; 64
    534c:	80 83       	st	Z, r24
    534e:	91 83       	std	Z+1, r25	; 0x01
    5350:	a2 83       	std	Z+2, r26	; 0x02
    5352:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5354:	8e 01       	movw	r16, r28
    5356:	09 58       	subi	r16, 0x89	; 137
    5358:	1f 4f       	sbci	r17, 0xFF	; 255
    535a:	fe 01       	movw	r30, r28
    535c:	e5 58       	subi	r30, 0x85	; 133
    535e:	ff 4f       	sbci	r31, 0xFF	; 255
    5360:	60 81       	ld	r22, Z
    5362:	71 81       	ldd	r23, Z+1	; 0x01
    5364:	82 81       	ldd	r24, Z+2	; 0x02
    5366:	93 81       	ldd	r25, Z+3	; 0x03
    5368:	20 e0       	ldi	r18, 0x00	; 0
    536a:	30 e0       	ldi	r19, 0x00	; 0
    536c:	4a e7       	ldi	r20, 0x7A	; 122
    536e:	55 e4       	ldi	r21, 0x45	; 69
    5370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5374:	dc 01       	movw	r26, r24
    5376:	cb 01       	movw	r24, r22
    5378:	f8 01       	movw	r30, r16
    537a:	80 83       	st	Z, r24
    537c:	91 83       	std	Z+1, r25	; 0x01
    537e:	a2 83       	std	Z+2, r26	; 0x02
    5380:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5382:	fe 01       	movw	r30, r28
    5384:	e9 58       	subi	r30, 0x89	; 137
    5386:	ff 4f       	sbci	r31, 0xFF	; 255
    5388:	60 81       	ld	r22, Z
    538a:	71 81       	ldd	r23, Z+1	; 0x01
    538c:	82 81       	ldd	r24, Z+2	; 0x02
    538e:	93 81       	ldd	r25, Z+3	; 0x03
    5390:	20 e0       	ldi	r18, 0x00	; 0
    5392:	30 e0       	ldi	r19, 0x00	; 0
    5394:	40 e8       	ldi	r20, 0x80	; 128
    5396:	5f e3       	ldi	r21, 0x3F	; 63
    5398:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    539c:	88 23       	and	r24, r24
    539e:	44 f4       	brge	.+16     	; 0x53b0 <LCD_voidInit+0x1f8>
		__ticks = 1;
    53a0:	fe 01       	movw	r30, r28
    53a2:	eb 58       	subi	r30, 0x8B	; 139
    53a4:	ff 4f       	sbci	r31, 0xFF	; 255
    53a6:	81 e0       	ldi	r24, 0x01	; 1
    53a8:	90 e0       	ldi	r25, 0x00	; 0
    53aa:	91 83       	std	Z+1, r25	; 0x01
    53ac:	80 83       	st	Z, r24
    53ae:	64 c0       	rjmp	.+200    	; 0x5478 <LCD_voidInit+0x2c0>
	else if (__tmp > 65535)
    53b0:	fe 01       	movw	r30, r28
    53b2:	e9 58       	subi	r30, 0x89	; 137
    53b4:	ff 4f       	sbci	r31, 0xFF	; 255
    53b6:	60 81       	ld	r22, Z
    53b8:	71 81       	ldd	r23, Z+1	; 0x01
    53ba:	82 81       	ldd	r24, Z+2	; 0x02
    53bc:	93 81       	ldd	r25, Z+3	; 0x03
    53be:	20 e0       	ldi	r18, 0x00	; 0
    53c0:	3f ef       	ldi	r19, 0xFF	; 255
    53c2:	4f e7       	ldi	r20, 0x7F	; 127
    53c4:	57 e4       	ldi	r21, 0x47	; 71
    53c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    53ca:	18 16       	cp	r1, r24
    53cc:	0c f0       	brlt	.+2      	; 0x53d0 <LCD_voidInit+0x218>
    53ce:	43 c0       	rjmp	.+134    	; 0x5456 <LCD_voidInit+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53d0:	fe 01       	movw	r30, r28
    53d2:	e5 58       	subi	r30, 0x85	; 133
    53d4:	ff 4f       	sbci	r31, 0xFF	; 255
    53d6:	60 81       	ld	r22, Z
    53d8:	71 81       	ldd	r23, Z+1	; 0x01
    53da:	82 81       	ldd	r24, Z+2	; 0x02
    53dc:	93 81       	ldd	r25, Z+3	; 0x03
    53de:	20 e0       	ldi	r18, 0x00	; 0
    53e0:	30 e0       	ldi	r19, 0x00	; 0
    53e2:	40 e2       	ldi	r20, 0x20	; 32
    53e4:	51 e4       	ldi	r21, 0x41	; 65
    53e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53ea:	dc 01       	movw	r26, r24
    53ec:	cb 01       	movw	r24, r22
    53ee:	8e 01       	movw	r16, r28
    53f0:	0b 58       	subi	r16, 0x8B	; 139
    53f2:	1f 4f       	sbci	r17, 0xFF	; 255
    53f4:	bc 01       	movw	r22, r24
    53f6:	cd 01       	movw	r24, r26
    53f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53fc:	dc 01       	movw	r26, r24
    53fe:	cb 01       	movw	r24, r22
    5400:	f8 01       	movw	r30, r16
    5402:	91 83       	std	Z+1, r25	; 0x01
    5404:	80 83       	st	Z, r24
    5406:	1f c0       	rjmp	.+62     	; 0x5446 <LCD_voidInit+0x28e>
    5408:	fe 01       	movw	r30, r28
    540a:	ed 58       	subi	r30, 0x8D	; 141
    540c:	ff 4f       	sbci	r31, 0xFF	; 255
    540e:	80 e9       	ldi	r24, 0x90	; 144
    5410:	91 e0       	ldi	r25, 0x01	; 1
    5412:	91 83       	std	Z+1, r25	; 0x01
    5414:	80 83       	st	Z, r24
    5416:	fe 01       	movw	r30, r28
    5418:	ed 58       	subi	r30, 0x8D	; 141
    541a:	ff 4f       	sbci	r31, 0xFF	; 255
    541c:	80 81       	ld	r24, Z
    541e:	91 81       	ldd	r25, Z+1	; 0x01
    5420:	01 97       	sbiw	r24, 0x01	; 1
    5422:	f1 f7       	brne	.-4      	; 0x5420 <LCD_voidInit+0x268>
    5424:	fe 01       	movw	r30, r28
    5426:	ed 58       	subi	r30, 0x8D	; 141
    5428:	ff 4f       	sbci	r31, 0xFF	; 255
    542a:	91 83       	std	Z+1, r25	; 0x01
    542c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    542e:	de 01       	movw	r26, r28
    5430:	ab 58       	subi	r26, 0x8B	; 139
    5432:	bf 4f       	sbci	r27, 0xFF	; 255
    5434:	fe 01       	movw	r30, r28
    5436:	eb 58       	subi	r30, 0x8B	; 139
    5438:	ff 4f       	sbci	r31, 0xFF	; 255
    543a:	80 81       	ld	r24, Z
    543c:	91 81       	ldd	r25, Z+1	; 0x01
    543e:	01 97       	sbiw	r24, 0x01	; 1
    5440:	11 96       	adiw	r26, 0x01	; 1
    5442:	9c 93       	st	X, r25
    5444:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5446:	fe 01       	movw	r30, r28
    5448:	eb 58       	subi	r30, 0x8B	; 139
    544a:	ff 4f       	sbci	r31, 0xFF	; 255
    544c:	80 81       	ld	r24, Z
    544e:	91 81       	ldd	r25, Z+1	; 0x01
    5450:	00 97       	sbiw	r24, 0x00	; 0
    5452:	d1 f6       	brne	.-76     	; 0x5408 <LCD_voidInit+0x250>
    5454:	27 c0       	rjmp	.+78     	; 0x54a4 <LCD_voidInit+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5456:	8e 01       	movw	r16, r28
    5458:	0b 58       	subi	r16, 0x8B	; 139
    545a:	1f 4f       	sbci	r17, 0xFF	; 255
    545c:	fe 01       	movw	r30, r28
    545e:	e9 58       	subi	r30, 0x89	; 137
    5460:	ff 4f       	sbci	r31, 0xFF	; 255
    5462:	60 81       	ld	r22, Z
    5464:	71 81       	ldd	r23, Z+1	; 0x01
    5466:	82 81       	ldd	r24, Z+2	; 0x02
    5468:	93 81       	ldd	r25, Z+3	; 0x03
    546a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    546e:	dc 01       	movw	r26, r24
    5470:	cb 01       	movw	r24, r22
    5472:	f8 01       	movw	r30, r16
    5474:	91 83       	std	Z+1, r25	; 0x01
    5476:	80 83       	st	Z, r24
    5478:	de 01       	movw	r26, r28
    547a:	af 58       	subi	r26, 0x8F	; 143
    547c:	bf 4f       	sbci	r27, 0xFF	; 255
    547e:	fe 01       	movw	r30, r28
    5480:	eb 58       	subi	r30, 0x8B	; 139
    5482:	ff 4f       	sbci	r31, 0xFF	; 255
    5484:	80 81       	ld	r24, Z
    5486:	91 81       	ldd	r25, Z+1	; 0x01
    5488:	8d 93       	st	X+, r24
    548a:	9c 93       	st	X, r25
    548c:	fe 01       	movw	r30, r28
    548e:	ef 58       	subi	r30, 0x8F	; 143
    5490:	ff 4f       	sbci	r31, 0xFF	; 255
    5492:	80 81       	ld	r24, Z
    5494:	91 81       	ldd	r25, Z+1	; 0x01
    5496:	01 97       	sbiw	r24, 0x01	; 1
    5498:	f1 f7       	brne	.-4      	; 0x5496 <LCD_voidInit+0x2de>
    549a:	fe 01       	movw	r30, r28
    549c:	ef 58       	subi	r30, 0x8F	; 143
    549e:	ff 4f       	sbci	r31, 0xFF	; 255
    54a0:	91 83       	std	Z+1, r25	; 0x01
    54a2:	80 83       	st	Z, r24
	_delay_ms(5);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    54a4:	80 e3       	ldi	r24, 0x30	; 48
    54a6:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <LCD_voidSendInitCommand>
    54aa:	fe 01       	movw	r30, r28
    54ac:	e3 59       	subi	r30, 0x93	; 147
    54ae:	ff 4f       	sbci	r31, 0xFF	; 255
    54b0:	80 e0       	ldi	r24, 0x00	; 0
    54b2:	90 e0       	ldi	r25, 0x00	; 0
    54b4:	a0 e8       	ldi	r26, 0x80	; 128
    54b6:	bf e3       	ldi	r27, 0x3F	; 63
    54b8:	80 83       	st	Z, r24
    54ba:	91 83       	std	Z+1, r25	; 0x01
    54bc:	a2 83       	std	Z+2, r26	; 0x02
    54be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54c0:	8e 01       	movw	r16, r28
    54c2:	07 59       	subi	r16, 0x97	; 151
    54c4:	1f 4f       	sbci	r17, 0xFF	; 255
    54c6:	fe 01       	movw	r30, r28
    54c8:	e3 59       	subi	r30, 0x93	; 147
    54ca:	ff 4f       	sbci	r31, 0xFF	; 255
    54cc:	60 81       	ld	r22, Z
    54ce:	71 81       	ldd	r23, Z+1	; 0x01
    54d0:	82 81       	ldd	r24, Z+2	; 0x02
    54d2:	93 81       	ldd	r25, Z+3	; 0x03
    54d4:	20 e0       	ldi	r18, 0x00	; 0
    54d6:	30 e0       	ldi	r19, 0x00	; 0
    54d8:	4a e7       	ldi	r20, 0x7A	; 122
    54da:	55 e4       	ldi	r21, 0x45	; 69
    54dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54e0:	dc 01       	movw	r26, r24
    54e2:	cb 01       	movw	r24, r22
    54e4:	f8 01       	movw	r30, r16
    54e6:	80 83       	st	Z, r24
    54e8:	91 83       	std	Z+1, r25	; 0x01
    54ea:	a2 83       	std	Z+2, r26	; 0x02
    54ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    54ee:	fe 01       	movw	r30, r28
    54f0:	e7 59       	subi	r30, 0x97	; 151
    54f2:	ff 4f       	sbci	r31, 0xFF	; 255
    54f4:	60 81       	ld	r22, Z
    54f6:	71 81       	ldd	r23, Z+1	; 0x01
    54f8:	82 81       	ldd	r24, Z+2	; 0x02
    54fa:	93 81       	ldd	r25, Z+3	; 0x03
    54fc:	20 e0       	ldi	r18, 0x00	; 0
    54fe:	30 e0       	ldi	r19, 0x00	; 0
    5500:	40 e8       	ldi	r20, 0x80	; 128
    5502:	5f e3       	ldi	r21, 0x3F	; 63
    5504:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5508:	88 23       	and	r24, r24
    550a:	44 f4       	brge	.+16     	; 0x551c <LCD_voidInit+0x364>
		__ticks = 1;
    550c:	fe 01       	movw	r30, r28
    550e:	e9 59       	subi	r30, 0x99	; 153
    5510:	ff 4f       	sbci	r31, 0xFF	; 255
    5512:	81 e0       	ldi	r24, 0x01	; 1
    5514:	90 e0       	ldi	r25, 0x00	; 0
    5516:	91 83       	std	Z+1, r25	; 0x01
    5518:	80 83       	st	Z, r24
    551a:	64 c0       	rjmp	.+200    	; 0x55e4 <LCD_voidInit+0x42c>
	else if (__tmp > 65535)
    551c:	fe 01       	movw	r30, r28
    551e:	e7 59       	subi	r30, 0x97	; 151
    5520:	ff 4f       	sbci	r31, 0xFF	; 255
    5522:	60 81       	ld	r22, Z
    5524:	71 81       	ldd	r23, Z+1	; 0x01
    5526:	82 81       	ldd	r24, Z+2	; 0x02
    5528:	93 81       	ldd	r25, Z+3	; 0x03
    552a:	20 e0       	ldi	r18, 0x00	; 0
    552c:	3f ef       	ldi	r19, 0xFF	; 255
    552e:	4f e7       	ldi	r20, 0x7F	; 127
    5530:	57 e4       	ldi	r21, 0x47	; 71
    5532:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5536:	18 16       	cp	r1, r24
    5538:	0c f0       	brlt	.+2      	; 0x553c <LCD_voidInit+0x384>
    553a:	43 c0       	rjmp	.+134    	; 0x55c2 <LCD_voidInit+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    553c:	fe 01       	movw	r30, r28
    553e:	e3 59       	subi	r30, 0x93	; 147
    5540:	ff 4f       	sbci	r31, 0xFF	; 255
    5542:	60 81       	ld	r22, Z
    5544:	71 81       	ldd	r23, Z+1	; 0x01
    5546:	82 81       	ldd	r24, Z+2	; 0x02
    5548:	93 81       	ldd	r25, Z+3	; 0x03
    554a:	20 e0       	ldi	r18, 0x00	; 0
    554c:	30 e0       	ldi	r19, 0x00	; 0
    554e:	40 e2       	ldi	r20, 0x20	; 32
    5550:	51 e4       	ldi	r21, 0x41	; 65
    5552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5556:	dc 01       	movw	r26, r24
    5558:	cb 01       	movw	r24, r22
    555a:	8e 01       	movw	r16, r28
    555c:	09 59       	subi	r16, 0x99	; 153
    555e:	1f 4f       	sbci	r17, 0xFF	; 255
    5560:	bc 01       	movw	r22, r24
    5562:	cd 01       	movw	r24, r26
    5564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5568:	dc 01       	movw	r26, r24
    556a:	cb 01       	movw	r24, r22
    556c:	f8 01       	movw	r30, r16
    556e:	91 83       	std	Z+1, r25	; 0x01
    5570:	80 83       	st	Z, r24
    5572:	1f c0       	rjmp	.+62     	; 0x55b2 <LCD_voidInit+0x3fa>
    5574:	fe 01       	movw	r30, r28
    5576:	eb 59       	subi	r30, 0x9B	; 155
    5578:	ff 4f       	sbci	r31, 0xFF	; 255
    557a:	80 e9       	ldi	r24, 0x90	; 144
    557c:	91 e0       	ldi	r25, 0x01	; 1
    557e:	91 83       	std	Z+1, r25	; 0x01
    5580:	80 83       	st	Z, r24
    5582:	fe 01       	movw	r30, r28
    5584:	eb 59       	subi	r30, 0x9B	; 155
    5586:	ff 4f       	sbci	r31, 0xFF	; 255
    5588:	80 81       	ld	r24, Z
    558a:	91 81       	ldd	r25, Z+1	; 0x01
    558c:	01 97       	sbiw	r24, 0x01	; 1
    558e:	f1 f7       	brne	.-4      	; 0x558c <LCD_voidInit+0x3d4>
    5590:	fe 01       	movw	r30, r28
    5592:	eb 59       	subi	r30, 0x9B	; 155
    5594:	ff 4f       	sbci	r31, 0xFF	; 255
    5596:	91 83       	std	Z+1, r25	; 0x01
    5598:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    559a:	de 01       	movw	r26, r28
    559c:	a9 59       	subi	r26, 0x99	; 153
    559e:	bf 4f       	sbci	r27, 0xFF	; 255
    55a0:	fe 01       	movw	r30, r28
    55a2:	e9 59       	subi	r30, 0x99	; 153
    55a4:	ff 4f       	sbci	r31, 0xFF	; 255
    55a6:	80 81       	ld	r24, Z
    55a8:	91 81       	ldd	r25, Z+1	; 0x01
    55aa:	01 97       	sbiw	r24, 0x01	; 1
    55ac:	11 96       	adiw	r26, 0x01	; 1
    55ae:	9c 93       	st	X, r25
    55b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55b2:	fe 01       	movw	r30, r28
    55b4:	e9 59       	subi	r30, 0x99	; 153
    55b6:	ff 4f       	sbci	r31, 0xFF	; 255
    55b8:	80 81       	ld	r24, Z
    55ba:	91 81       	ldd	r25, Z+1	; 0x01
    55bc:	00 97       	sbiw	r24, 0x00	; 0
    55be:	d1 f6       	brne	.-76     	; 0x5574 <LCD_voidInit+0x3bc>
    55c0:	27 c0       	rjmp	.+78     	; 0x5610 <LCD_voidInit+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55c2:	8e 01       	movw	r16, r28
    55c4:	09 59       	subi	r16, 0x99	; 153
    55c6:	1f 4f       	sbci	r17, 0xFF	; 255
    55c8:	fe 01       	movw	r30, r28
    55ca:	e7 59       	subi	r30, 0x97	; 151
    55cc:	ff 4f       	sbci	r31, 0xFF	; 255
    55ce:	60 81       	ld	r22, Z
    55d0:	71 81       	ldd	r23, Z+1	; 0x01
    55d2:	82 81       	ldd	r24, Z+2	; 0x02
    55d4:	93 81       	ldd	r25, Z+3	; 0x03
    55d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55da:	dc 01       	movw	r26, r24
    55dc:	cb 01       	movw	r24, r22
    55de:	f8 01       	movw	r30, r16
    55e0:	91 83       	std	Z+1, r25	; 0x01
    55e2:	80 83       	st	Z, r24
    55e4:	de 01       	movw	r26, r28
    55e6:	ad 59       	subi	r26, 0x9D	; 157
    55e8:	bf 4f       	sbci	r27, 0xFF	; 255
    55ea:	fe 01       	movw	r30, r28
    55ec:	e9 59       	subi	r30, 0x99	; 153
    55ee:	ff 4f       	sbci	r31, 0xFF	; 255
    55f0:	80 81       	ld	r24, Z
    55f2:	91 81       	ldd	r25, Z+1	; 0x01
    55f4:	8d 93       	st	X+, r24
    55f6:	9c 93       	st	X, r25
    55f8:	fe 01       	movw	r30, r28
    55fa:	ed 59       	subi	r30, 0x9D	; 157
    55fc:	ff 4f       	sbci	r31, 0xFF	; 255
    55fe:	80 81       	ld	r24, Z
    5600:	91 81       	ldd	r25, Z+1	; 0x01
    5602:	01 97       	sbiw	r24, 0x01	; 1
    5604:	f1 f7       	brne	.-4      	; 0x5602 <LCD_voidInit+0x44a>
    5606:	fe 01       	movw	r30, r28
    5608:	ed 59       	subi	r30, 0x9D	; 157
    560a:	ff 4f       	sbci	r31, 0xFF	; 255
    560c:	91 83       	std	Z+1, r25	; 0x01
    560e:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    5610:	80 e3       	ldi	r24, 0x30	; 48
    5612:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <LCD_voidSendInitCommand>
    5616:	fe 01       	movw	r30, r28
    5618:	e1 5a       	subi	r30, 0xA1	; 161
    561a:	ff 4f       	sbci	r31, 0xFF	; 255
    561c:	80 e0       	ldi	r24, 0x00	; 0
    561e:	90 e0       	ldi	r25, 0x00	; 0
    5620:	a0 e8       	ldi	r26, 0x80	; 128
    5622:	bf e3       	ldi	r27, 0x3F	; 63
    5624:	80 83       	st	Z, r24
    5626:	91 83       	std	Z+1, r25	; 0x01
    5628:	a2 83       	std	Z+2, r26	; 0x02
    562a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    562c:	8e 01       	movw	r16, r28
    562e:	05 5a       	subi	r16, 0xA5	; 165
    5630:	1f 4f       	sbci	r17, 0xFF	; 255
    5632:	fe 01       	movw	r30, r28
    5634:	e1 5a       	subi	r30, 0xA1	; 161
    5636:	ff 4f       	sbci	r31, 0xFF	; 255
    5638:	60 81       	ld	r22, Z
    563a:	71 81       	ldd	r23, Z+1	; 0x01
    563c:	82 81       	ldd	r24, Z+2	; 0x02
    563e:	93 81       	ldd	r25, Z+3	; 0x03
    5640:	20 e0       	ldi	r18, 0x00	; 0
    5642:	30 e0       	ldi	r19, 0x00	; 0
    5644:	4a e7       	ldi	r20, 0x7A	; 122
    5646:	55 e4       	ldi	r21, 0x45	; 69
    5648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    564c:	dc 01       	movw	r26, r24
    564e:	cb 01       	movw	r24, r22
    5650:	f8 01       	movw	r30, r16
    5652:	80 83       	st	Z, r24
    5654:	91 83       	std	Z+1, r25	; 0x01
    5656:	a2 83       	std	Z+2, r26	; 0x02
    5658:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    565a:	fe 01       	movw	r30, r28
    565c:	e5 5a       	subi	r30, 0xA5	; 165
    565e:	ff 4f       	sbci	r31, 0xFF	; 255
    5660:	60 81       	ld	r22, Z
    5662:	71 81       	ldd	r23, Z+1	; 0x01
    5664:	82 81       	ldd	r24, Z+2	; 0x02
    5666:	93 81       	ldd	r25, Z+3	; 0x03
    5668:	20 e0       	ldi	r18, 0x00	; 0
    566a:	30 e0       	ldi	r19, 0x00	; 0
    566c:	40 e8       	ldi	r20, 0x80	; 128
    566e:	5f e3       	ldi	r21, 0x3F	; 63
    5670:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5674:	88 23       	and	r24, r24
    5676:	44 f4       	brge	.+16     	; 0x5688 <LCD_voidInit+0x4d0>
		__ticks = 1;
    5678:	fe 01       	movw	r30, r28
    567a:	e7 5a       	subi	r30, 0xA7	; 167
    567c:	ff 4f       	sbci	r31, 0xFF	; 255
    567e:	81 e0       	ldi	r24, 0x01	; 1
    5680:	90 e0       	ldi	r25, 0x00	; 0
    5682:	91 83       	std	Z+1, r25	; 0x01
    5684:	80 83       	st	Z, r24
    5686:	64 c0       	rjmp	.+200    	; 0x5750 <LCD_voidInit+0x598>
	else if (__tmp > 65535)
    5688:	fe 01       	movw	r30, r28
    568a:	e5 5a       	subi	r30, 0xA5	; 165
    568c:	ff 4f       	sbci	r31, 0xFF	; 255
    568e:	60 81       	ld	r22, Z
    5690:	71 81       	ldd	r23, Z+1	; 0x01
    5692:	82 81       	ldd	r24, Z+2	; 0x02
    5694:	93 81       	ldd	r25, Z+3	; 0x03
    5696:	20 e0       	ldi	r18, 0x00	; 0
    5698:	3f ef       	ldi	r19, 0xFF	; 255
    569a:	4f e7       	ldi	r20, 0x7F	; 127
    569c:	57 e4       	ldi	r21, 0x47	; 71
    569e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    56a2:	18 16       	cp	r1, r24
    56a4:	0c f0       	brlt	.+2      	; 0x56a8 <LCD_voidInit+0x4f0>
    56a6:	43 c0       	rjmp	.+134    	; 0x572e <LCD_voidInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56a8:	fe 01       	movw	r30, r28
    56aa:	e1 5a       	subi	r30, 0xA1	; 161
    56ac:	ff 4f       	sbci	r31, 0xFF	; 255
    56ae:	60 81       	ld	r22, Z
    56b0:	71 81       	ldd	r23, Z+1	; 0x01
    56b2:	82 81       	ldd	r24, Z+2	; 0x02
    56b4:	93 81       	ldd	r25, Z+3	; 0x03
    56b6:	20 e0       	ldi	r18, 0x00	; 0
    56b8:	30 e0       	ldi	r19, 0x00	; 0
    56ba:	40 e2       	ldi	r20, 0x20	; 32
    56bc:	51 e4       	ldi	r21, 0x41	; 65
    56be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56c2:	dc 01       	movw	r26, r24
    56c4:	cb 01       	movw	r24, r22
    56c6:	8e 01       	movw	r16, r28
    56c8:	07 5a       	subi	r16, 0xA7	; 167
    56ca:	1f 4f       	sbci	r17, 0xFF	; 255
    56cc:	bc 01       	movw	r22, r24
    56ce:	cd 01       	movw	r24, r26
    56d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56d4:	dc 01       	movw	r26, r24
    56d6:	cb 01       	movw	r24, r22
    56d8:	f8 01       	movw	r30, r16
    56da:	91 83       	std	Z+1, r25	; 0x01
    56dc:	80 83       	st	Z, r24
    56de:	1f c0       	rjmp	.+62     	; 0x571e <LCD_voidInit+0x566>
    56e0:	fe 01       	movw	r30, r28
    56e2:	e9 5a       	subi	r30, 0xA9	; 169
    56e4:	ff 4f       	sbci	r31, 0xFF	; 255
    56e6:	80 e9       	ldi	r24, 0x90	; 144
    56e8:	91 e0       	ldi	r25, 0x01	; 1
    56ea:	91 83       	std	Z+1, r25	; 0x01
    56ec:	80 83       	st	Z, r24
    56ee:	fe 01       	movw	r30, r28
    56f0:	e9 5a       	subi	r30, 0xA9	; 169
    56f2:	ff 4f       	sbci	r31, 0xFF	; 255
    56f4:	80 81       	ld	r24, Z
    56f6:	91 81       	ldd	r25, Z+1	; 0x01
    56f8:	01 97       	sbiw	r24, 0x01	; 1
    56fa:	f1 f7       	brne	.-4      	; 0x56f8 <LCD_voidInit+0x540>
    56fc:	fe 01       	movw	r30, r28
    56fe:	e9 5a       	subi	r30, 0xA9	; 169
    5700:	ff 4f       	sbci	r31, 0xFF	; 255
    5702:	91 83       	std	Z+1, r25	; 0x01
    5704:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5706:	de 01       	movw	r26, r28
    5708:	a7 5a       	subi	r26, 0xA7	; 167
    570a:	bf 4f       	sbci	r27, 0xFF	; 255
    570c:	fe 01       	movw	r30, r28
    570e:	e7 5a       	subi	r30, 0xA7	; 167
    5710:	ff 4f       	sbci	r31, 0xFF	; 255
    5712:	80 81       	ld	r24, Z
    5714:	91 81       	ldd	r25, Z+1	; 0x01
    5716:	01 97       	sbiw	r24, 0x01	; 1
    5718:	11 96       	adiw	r26, 0x01	; 1
    571a:	9c 93       	st	X, r25
    571c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    571e:	fe 01       	movw	r30, r28
    5720:	e7 5a       	subi	r30, 0xA7	; 167
    5722:	ff 4f       	sbci	r31, 0xFF	; 255
    5724:	80 81       	ld	r24, Z
    5726:	91 81       	ldd	r25, Z+1	; 0x01
    5728:	00 97       	sbiw	r24, 0x00	; 0
    572a:	d1 f6       	brne	.-76     	; 0x56e0 <LCD_voidInit+0x528>
    572c:	27 c0       	rjmp	.+78     	; 0x577c <LCD_voidInit+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    572e:	8e 01       	movw	r16, r28
    5730:	07 5a       	subi	r16, 0xA7	; 167
    5732:	1f 4f       	sbci	r17, 0xFF	; 255
    5734:	fe 01       	movw	r30, r28
    5736:	e5 5a       	subi	r30, 0xA5	; 165
    5738:	ff 4f       	sbci	r31, 0xFF	; 255
    573a:	60 81       	ld	r22, Z
    573c:	71 81       	ldd	r23, Z+1	; 0x01
    573e:	82 81       	ldd	r24, Z+2	; 0x02
    5740:	93 81       	ldd	r25, Z+3	; 0x03
    5742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5746:	dc 01       	movw	r26, r24
    5748:	cb 01       	movw	r24, r22
    574a:	f8 01       	movw	r30, r16
    574c:	91 83       	std	Z+1, r25	; 0x01
    574e:	80 83       	st	Z, r24
    5750:	de 01       	movw	r26, r28
    5752:	ab 5a       	subi	r26, 0xAB	; 171
    5754:	bf 4f       	sbci	r27, 0xFF	; 255
    5756:	fe 01       	movw	r30, r28
    5758:	e7 5a       	subi	r30, 0xA7	; 167
    575a:	ff 4f       	sbci	r31, 0xFF	; 255
    575c:	80 81       	ld	r24, Z
    575e:	91 81       	ldd	r25, Z+1	; 0x01
    5760:	8d 93       	st	X+, r24
    5762:	9c 93       	st	X, r25
    5764:	fe 01       	movw	r30, r28
    5766:	eb 5a       	subi	r30, 0xAB	; 171
    5768:	ff 4f       	sbci	r31, 0xFF	; 255
    576a:	80 81       	ld	r24, Z
    576c:	91 81       	ldd	r25, Z+1	; 0x01
    576e:	01 97       	sbiw	r24, 0x01	; 1
    5770:	f1 f7       	brne	.-4      	; 0x576e <LCD_voidInit+0x5b6>
    5772:	fe 01       	movw	r30, r28
    5774:	eb 5a       	subi	r30, 0xAB	; 171
    5776:	ff 4f       	sbci	r31, 0xFF	; 255
    5778:	91 83       	std	Z+1, r25	; 0x01
    577a:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_4BitMode);
    577c:	80 e2       	ldi	r24, 0x20	; 32
    577e:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <LCD_voidSendInitCommand>
    5782:	fe 01       	movw	r30, r28
    5784:	ef 5a       	subi	r30, 0xAF	; 175
    5786:	ff 4f       	sbci	r31, 0xFF	; 255
    5788:	80 e0       	ldi	r24, 0x00	; 0
    578a:	90 e0       	ldi	r25, 0x00	; 0
    578c:	a0 e8       	ldi	r26, 0x80	; 128
    578e:	bf e3       	ldi	r27, 0x3F	; 63
    5790:	80 83       	st	Z, r24
    5792:	91 83       	std	Z+1, r25	; 0x01
    5794:	a2 83       	std	Z+2, r26	; 0x02
    5796:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5798:	8e 01       	movw	r16, r28
    579a:	03 5b       	subi	r16, 0xB3	; 179
    579c:	1f 4f       	sbci	r17, 0xFF	; 255
    579e:	fe 01       	movw	r30, r28
    57a0:	ef 5a       	subi	r30, 0xAF	; 175
    57a2:	ff 4f       	sbci	r31, 0xFF	; 255
    57a4:	60 81       	ld	r22, Z
    57a6:	71 81       	ldd	r23, Z+1	; 0x01
    57a8:	82 81       	ldd	r24, Z+2	; 0x02
    57aa:	93 81       	ldd	r25, Z+3	; 0x03
    57ac:	20 e0       	ldi	r18, 0x00	; 0
    57ae:	30 e0       	ldi	r19, 0x00	; 0
    57b0:	4a e7       	ldi	r20, 0x7A	; 122
    57b2:	55 e4       	ldi	r21, 0x45	; 69
    57b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57b8:	dc 01       	movw	r26, r24
    57ba:	cb 01       	movw	r24, r22
    57bc:	f8 01       	movw	r30, r16
    57be:	80 83       	st	Z, r24
    57c0:	91 83       	std	Z+1, r25	; 0x01
    57c2:	a2 83       	std	Z+2, r26	; 0x02
    57c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    57c6:	fe 01       	movw	r30, r28
    57c8:	e3 5b       	subi	r30, 0xB3	; 179
    57ca:	ff 4f       	sbci	r31, 0xFF	; 255
    57cc:	60 81       	ld	r22, Z
    57ce:	71 81       	ldd	r23, Z+1	; 0x01
    57d0:	82 81       	ldd	r24, Z+2	; 0x02
    57d2:	93 81       	ldd	r25, Z+3	; 0x03
    57d4:	20 e0       	ldi	r18, 0x00	; 0
    57d6:	30 e0       	ldi	r19, 0x00	; 0
    57d8:	40 e8       	ldi	r20, 0x80	; 128
    57da:	5f e3       	ldi	r21, 0x3F	; 63
    57dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57e0:	88 23       	and	r24, r24
    57e2:	44 f4       	brge	.+16     	; 0x57f4 <LCD_voidInit+0x63c>
		__ticks = 1;
    57e4:	fe 01       	movw	r30, r28
    57e6:	e5 5b       	subi	r30, 0xB5	; 181
    57e8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ea:	81 e0       	ldi	r24, 0x01	; 1
    57ec:	90 e0       	ldi	r25, 0x00	; 0
    57ee:	91 83       	std	Z+1, r25	; 0x01
    57f0:	80 83       	st	Z, r24
    57f2:	64 c0       	rjmp	.+200    	; 0x58bc <LCD_voidInit+0x704>
	else if (__tmp > 65535)
    57f4:	fe 01       	movw	r30, r28
    57f6:	e3 5b       	subi	r30, 0xB3	; 179
    57f8:	ff 4f       	sbci	r31, 0xFF	; 255
    57fa:	60 81       	ld	r22, Z
    57fc:	71 81       	ldd	r23, Z+1	; 0x01
    57fe:	82 81       	ldd	r24, Z+2	; 0x02
    5800:	93 81       	ldd	r25, Z+3	; 0x03
    5802:	20 e0       	ldi	r18, 0x00	; 0
    5804:	3f ef       	ldi	r19, 0xFF	; 255
    5806:	4f e7       	ldi	r20, 0x7F	; 127
    5808:	57 e4       	ldi	r21, 0x47	; 71
    580a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    580e:	18 16       	cp	r1, r24
    5810:	0c f0       	brlt	.+2      	; 0x5814 <LCD_voidInit+0x65c>
    5812:	43 c0       	rjmp	.+134    	; 0x589a <LCD_voidInit+0x6e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5814:	fe 01       	movw	r30, r28
    5816:	ef 5a       	subi	r30, 0xAF	; 175
    5818:	ff 4f       	sbci	r31, 0xFF	; 255
    581a:	60 81       	ld	r22, Z
    581c:	71 81       	ldd	r23, Z+1	; 0x01
    581e:	82 81       	ldd	r24, Z+2	; 0x02
    5820:	93 81       	ldd	r25, Z+3	; 0x03
    5822:	20 e0       	ldi	r18, 0x00	; 0
    5824:	30 e0       	ldi	r19, 0x00	; 0
    5826:	40 e2       	ldi	r20, 0x20	; 32
    5828:	51 e4       	ldi	r21, 0x41	; 65
    582a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    582e:	dc 01       	movw	r26, r24
    5830:	cb 01       	movw	r24, r22
    5832:	8e 01       	movw	r16, r28
    5834:	05 5b       	subi	r16, 0xB5	; 181
    5836:	1f 4f       	sbci	r17, 0xFF	; 255
    5838:	bc 01       	movw	r22, r24
    583a:	cd 01       	movw	r24, r26
    583c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5840:	dc 01       	movw	r26, r24
    5842:	cb 01       	movw	r24, r22
    5844:	f8 01       	movw	r30, r16
    5846:	91 83       	std	Z+1, r25	; 0x01
    5848:	80 83       	st	Z, r24
    584a:	1f c0       	rjmp	.+62     	; 0x588a <LCD_voidInit+0x6d2>
    584c:	fe 01       	movw	r30, r28
    584e:	e7 5b       	subi	r30, 0xB7	; 183
    5850:	ff 4f       	sbci	r31, 0xFF	; 255
    5852:	80 e9       	ldi	r24, 0x90	; 144
    5854:	91 e0       	ldi	r25, 0x01	; 1
    5856:	91 83       	std	Z+1, r25	; 0x01
    5858:	80 83       	st	Z, r24
    585a:	fe 01       	movw	r30, r28
    585c:	e7 5b       	subi	r30, 0xB7	; 183
    585e:	ff 4f       	sbci	r31, 0xFF	; 255
    5860:	80 81       	ld	r24, Z
    5862:	91 81       	ldd	r25, Z+1	; 0x01
    5864:	01 97       	sbiw	r24, 0x01	; 1
    5866:	f1 f7       	brne	.-4      	; 0x5864 <LCD_voidInit+0x6ac>
    5868:	fe 01       	movw	r30, r28
    586a:	e7 5b       	subi	r30, 0xB7	; 183
    586c:	ff 4f       	sbci	r31, 0xFF	; 255
    586e:	91 83       	std	Z+1, r25	; 0x01
    5870:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5872:	de 01       	movw	r26, r28
    5874:	a5 5b       	subi	r26, 0xB5	; 181
    5876:	bf 4f       	sbci	r27, 0xFF	; 255
    5878:	fe 01       	movw	r30, r28
    587a:	e5 5b       	subi	r30, 0xB5	; 181
    587c:	ff 4f       	sbci	r31, 0xFF	; 255
    587e:	80 81       	ld	r24, Z
    5880:	91 81       	ldd	r25, Z+1	; 0x01
    5882:	01 97       	sbiw	r24, 0x01	; 1
    5884:	11 96       	adiw	r26, 0x01	; 1
    5886:	9c 93       	st	X, r25
    5888:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    588a:	fe 01       	movw	r30, r28
    588c:	e5 5b       	subi	r30, 0xB5	; 181
    588e:	ff 4f       	sbci	r31, 0xFF	; 255
    5890:	80 81       	ld	r24, Z
    5892:	91 81       	ldd	r25, Z+1	; 0x01
    5894:	00 97       	sbiw	r24, 0x00	; 0
    5896:	d1 f6       	brne	.-76     	; 0x584c <LCD_voidInit+0x694>
    5898:	27 c0       	rjmp	.+78     	; 0x58e8 <LCD_voidInit+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    589a:	8e 01       	movw	r16, r28
    589c:	05 5b       	subi	r16, 0xB5	; 181
    589e:	1f 4f       	sbci	r17, 0xFF	; 255
    58a0:	fe 01       	movw	r30, r28
    58a2:	e3 5b       	subi	r30, 0xB3	; 179
    58a4:	ff 4f       	sbci	r31, 0xFF	; 255
    58a6:	60 81       	ld	r22, Z
    58a8:	71 81       	ldd	r23, Z+1	; 0x01
    58aa:	82 81       	ldd	r24, Z+2	; 0x02
    58ac:	93 81       	ldd	r25, Z+3	; 0x03
    58ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58b2:	dc 01       	movw	r26, r24
    58b4:	cb 01       	movw	r24, r22
    58b6:	f8 01       	movw	r30, r16
    58b8:	91 83       	std	Z+1, r25	; 0x01
    58ba:	80 83       	st	Z, r24
    58bc:	de 01       	movw	r26, r28
    58be:	a9 5b       	subi	r26, 0xB9	; 185
    58c0:	bf 4f       	sbci	r27, 0xFF	; 255
    58c2:	fe 01       	movw	r30, r28
    58c4:	e5 5b       	subi	r30, 0xB5	; 181
    58c6:	ff 4f       	sbci	r31, 0xFF	; 255
    58c8:	80 81       	ld	r24, Z
    58ca:	91 81       	ldd	r25, Z+1	; 0x01
    58cc:	8d 93       	st	X+, r24
    58ce:	9c 93       	st	X, r25
    58d0:	fe 01       	movw	r30, r28
    58d2:	e9 5b       	subi	r30, 0xB9	; 185
    58d4:	ff 4f       	sbci	r31, 0xFF	; 255
    58d6:	80 81       	ld	r24, Z
    58d8:	91 81       	ldd	r25, Z+1	; 0x01
    58da:	01 97       	sbiw	r24, 0x01	; 1
    58dc:	f1 f7       	brne	.-4      	; 0x58da <LCD_voidInit+0x722>
    58de:	fe 01       	movw	r30, r28
    58e0:	e9 5b       	subi	r30, 0xB9	; 185
    58e2:	ff 4f       	sbci	r31, 0xFF	; 255
    58e4:	91 83       	std	Z+1, r25	; 0x01
    58e6:	80 83       	st	Z, r24
	_delay_ms(1);
#endif
	LCD_voidSendCommand(LCD_FunctionSet);
    58e8:	8c e2       	ldi	r24, 0x2C	; 44
    58ea:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <LCD_voidSendCommand>
    58ee:	fe 01       	movw	r30, r28
    58f0:	ed 5b       	subi	r30, 0xBD	; 189
    58f2:	ff 4f       	sbci	r31, 0xFF	; 255
    58f4:	80 e0       	ldi	r24, 0x00	; 0
    58f6:	90 e0       	ldi	r25, 0x00	; 0
    58f8:	a0 e8       	ldi	r26, 0x80	; 128
    58fa:	bf e3       	ldi	r27, 0x3F	; 63
    58fc:	80 83       	st	Z, r24
    58fe:	91 83       	std	Z+1, r25	; 0x01
    5900:	a2 83       	std	Z+2, r26	; 0x02
    5902:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5904:	8e 01       	movw	r16, r28
    5906:	01 5c       	subi	r16, 0xC1	; 193
    5908:	1f 4f       	sbci	r17, 0xFF	; 255
    590a:	fe 01       	movw	r30, r28
    590c:	ed 5b       	subi	r30, 0xBD	; 189
    590e:	ff 4f       	sbci	r31, 0xFF	; 255
    5910:	60 81       	ld	r22, Z
    5912:	71 81       	ldd	r23, Z+1	; 0x01
    5914:	82 81       	ldd	r24, Z+2	; 0x02
    5916:	93 81       	ldd	r25, Z+3	; 0x03
    5918:	20 e0       	ldi	r18, 0x00	; 0
    591a:	30 e0       	ldi	r19, 0x00	; 0
    591c:	4a e7       	ldi	r20, 0x7A	; 122
    591e:	55 e4       	ldi	r21, 0x45	; 69
    5920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5924:	dc 01       	movw	r26, r24
    5926:	cb 01       	movw	r24, r22
    5928:	f8 01       	movw	r30, r16
    592a:	80 83       	st	Z, r24
    592c:	91 83       	std	Z+1, r25	; 0x01
    592e:	a2 83       	std	Z+2, r26	; 0x02
    5930:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5932:	fe 01       	movw	r30, r28
    5934:	ff 96       	adiw	r30, 0x3f	; 63
    5936:	60 81       	ld	r22, Z
    5938:	71 81       	ldd	r23, Z+1	; 0x01
    593a:	82 81       	ldd	r24, Z+2	; 0x02
    593c:	93 81       	ldd	r25, Z+3	; 0x03
    593e:	20 e0       	ldi	r18, 0x00	; 0
    5940:	30 e0       	ldi	r19, 0x00	; 0
    5942:	40 e8       	ldi	r20, 0x80	; 128
    5944:	5f e3       	ldi	r21, 0x3F	; 63
    5946:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    594a:	88 23       	and	r24, r24
    594c:	2c f4       	brge	.+10     	; 0x5958 <LCD_voidInit+0x7a0>
		__ticks = 1;
    594e:	81 e0       	ldi	r24, 0x01	; 1
    5950:	90 e0       	ldi	r25, 0x00	; 0
    5952:	9e af       	std	Y+62, r25	; 0x3e
    5954:	8d af       	std	Y+61, r24	; 0x3d
    5956:	46 c0       	rjmp	.+140    	; 0x59e4 <LCD_voidInit+0x82c>
	else if (__tmp > 65535)
    5958:	fe 01       	movw	r30, r28
    595a:	ff 96       	adiw	r30, 0x3f	; 63
    595c:	60 81       	ld	r22, Z
    595e:	71 81       	ldd	r23, Z+1	; 0x01
    5960:	82 81       	ldd	r24, Z+2	; 0x02
    5962:	93 81       	ldd	r25, Z+3	; 0x03
    5964:	20 e0       	ldi	r18, 0x00	; 0
    5966:	3f ef       	ldi	r19, 0xFF	; 255
    5968:	4f e7       	ldi	r20, 0x7F	; 127
    596a:	57 e4       	ldi	r21, 0x47	; 71
    596c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5970:	18 16       	cp	r1, r24
    5972:	64 f5       	brge	.+88     	; 0x59cc <LCD_voidInit+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5974:	fe 01       	movw	r30, r28
    5976:	ed 5b       	subi	r30, 0xBD	; 189
    5978:	ff 4f       	sbci	r31, 0xFF	; 255
    597a:	60 81       	ld	r22, Z
    597c:	71 81       	ldd	r23, Z+1	; 0x01
    597e:	82 81       	ldd	r24, Z+2	; 0x02
    5980:	93 81       	ldd	r25, Z+3	; 0x03
    5982:	20 e0       	ldi	r18, 0x00	; 0
    5984:	30 e0       	ldi	r19, 0x00	; 0
    5986:	40 e2       	ldi	r20, 0x20	; 32
    5988:	51 e4       	ldi	r21, 0x41	; 65
    598a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    598e:	dc 01       	movw	r26, r24
    5990:	cb 01       	movw	r24, r22
    5992:	bc 01       	movw	r22, r24
    5994:	cd 01       	movw	r24, r26
    5996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    599a:	dc 01       	movw	r26, r24
    599c:	cb 01       	movw	r24, r22
    599e:	9e af       	std	Y+62, r25	; 0x3e
    59a0:	8d af       	std	Y+61, r24	; 0x3d
    59a2:	0f c0       	rjmp	.+30     	; 0x59c2 <LCD_voidInit+0x80a>
    59a4:	80 e9       	ldi	r24, 0x90	; 144
    59a6:	91 e0       	ldi	r25, 0x01	; 1
    59a8:	9c af       	std	Y+60, r25	; 0x3c
    59aa:	8b af       	std	Y+59, r24	; 0x3b
    59ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    59ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    59b0:	01 97       	sbiw	r24, 0x01	; 1
    59b2:	f1 f7       	brne	.-4      	; 0x59b0 <LCD_voidInit+0x7f8>
    59b4:	9c af       	std	Y+60, r25	; 0x3c
    59b6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    59ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    59bc:	01 97       	sbiw	r24, 0x01	; 1
    59be:	9e af       	std	Y+62, r25	; 0x3e
    59c0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    59c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    59c6:	00 97       	sbiw	r24, 0x00	; 0
    59c8:	69 f7       	brne	.-38     	; 0x59a4 <LCD_voidInit+0x7ec>
    59ca:	16 c0       	rjmp	.+44     	; 0x59f8 <LCD_voidInit+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59cc:	fe 01       	movw	r30, r28
    59ce:	ff 96       	adiw	r30, 0x3f	; 63
    59d0:	60 81       	ld	r22, Z
    59d2:	71 81       	ldd	r23, Z+1	; 0x01
    59d4:	82 81       	ldd	r24, Z+2	; 0x02
    59d6:	93 81       	ldd	r25, Z+3	; 0x03
    59d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59dc:	dc 01       	movw	r26, r24
    59de:	cb 01       	movw	r24, r22
    59e0:	9e af       	std	Y+62, r25	; 0x3e
    59e2:	8d af       	std	Y+61, r24	; 0x3d
    59e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    59e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    59e8:	9a af       	std	Y+58, r25	; 0x3a
    59ea:	89 af       	std	Y+57, r24	; 0x39
    59ec:	89 ad       	ldd	r24, Y+57	; 0x39
    59ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    59f0:	01 97       	sbiw	r24, 0x01	; 1
    59f2:	f1 f7       	brne	.-4      	; 0x59f0 <LCD_voidInit+0x838>
    59f4:	9a af       	std	Y+58, r25	; 0x3a
    59f6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_voidSendCommand(LCD_DisplayOFF);
    59f8:	88 e0       	ldi	r24, 0x08	; 8
    59fa:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <LCD_voidSendCommand>
    59fe:	80 e0       	ldi	r24, 0x00	; 0
    5a00:	90 e0       	ldi	r25, 0x00	; 0
    5a02:	a0 e8       	ldi	r26, 0x80	; 128
    5a04:	bf e3       	ldi	r27, 0x3F	; 63
    5a06:	8d ab       	std	Y+53, r24	; 0x35
    5a08:	9e ab       	std	Y+54, r25	; 0x36
    5a0a:	af ab       	std	Y+55, r26	; 0x37
    5a0c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a0e:	6d a9       	ldd	r22, Y+53	; 0x35
    5a10:	7e a9       	ldd	r23, Y+54	; 0x36
    5a12:	8f a9       	ldd	r24, Y+55	; 0x37
    5a14:	98 ad       	ldd	r25, Y+56	; 0x38
    5a16:	20 e0       	ldi	r18, 0x00	; 0
    5a18:	30 e0       	ldi	r19, 0x00	; 0
    5a1a:	4a e7       	ldi	r20, 0x7A	; 122
    5a1c:	55 e4       	ldi	r21, 0x45	; 69
    5a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a22:	dc 01       	movw	r26, r24
    5a24:	cb 01       	movw	r24, r22
    5a26:	89 ab       	std	Y+49, r24	; 0x31
    5a28:	9a ab       	std	Y+50, r25	; 0x32
    5a2a:	ab ab       	std	Y+51, r26	; 0x33
    5a2c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5a2e:	69 a9       	ldd	r22, Y+49	; 0x31
    5a30:	7a a9       	ldd	r23, Y+50	; 0x32
    5a32:	8b a9       	ldd	r24, Y+51	; 0x33
    5a34:	9c a9       	ldd	r25, Y+52	; 0x34
    5a36:	20 e0       	ldi	r18, 0x00	; 0
    5a38:	30 e0       	ldi	r19, 0x00	; 0
    5a3a:	40 e8       	ldi	r20, 0x80	; 128
    5a3c:	5f e3       	ldi	r21, 0x3F	; 63
    5a3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a42:	88 23       	and	r24, r24
    5a44:	2c f4       	brge	.+10     	; 0x5a50 <LCD_voidInit+0x898>
		__ticks = 1;
    5a46:	81 e0       	ldi	r24, 0x01	; 1
    5a48:	90 e0       	ldi	r25, 0x00	; 0
    5a4a:	98 ab       	std	Y+48, r25	; 0x30
    5a4c:	8f a7       	std	Y+47, r24	; 0x2f
    5a4e:	3f c0       	rjmp	.+126    	; 0x5ace <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    5a50:	69 a9       	ldd	r22, Y+49	; 0x31
    5a52:	7a a9       	ldd	r23, Y+50	; 0x32
    5a54:	8b a9       	ldd	r24, Y+51	; 0x33
    5a56:	9c a9       	ldd	r25, Y+52	; 0x34
    5a58:	20 e0       	ldi	r18, 0x00	; 0
    5a5a:	3f ef       	ldi	r19, 0xFF	; 255
    5a5c:	4f e7       	ldi	r20, 0x7F	; 127
    5a5e:	57 e4       	ldi	r21, 0x47	; 71
    5a60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a64:	18 16       	cp	r1, r24
    5a66:	4c f5       	brge	.+82     	; 0x5aba <LCD_voidInit+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a68:	6d a9       	ldd	r22, Y+53	; 0x35
    5a6a:	7e a9       	ldd	r23, Y+54	; 0x36
    5a6c:	8f a9       	ldd	r24, Y+55	; 0x37
    5a6e:	98 ad       	ldd	r25, Y+56	; 0x38
    5a70:	20 e0       	ldi	r18, 0x00	; 0
    5a72:	30 e0       	ldi	r19, 0x00	; 0
    5a74:	40 e2       	ldi	r20, 0x20	; 32
    5a76:	51 e4       	ldi	r21, 0x41	; 65
    5a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a7c:	dc 01       	movw	r26, r24
    5a7e:	cb 01       	movw	r24, r22
    5a80:	bc 01       	movw	r22, r24
    5a82:	cd 01       	movw	r24, r26
    5a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a88:	dc 01       	movw	r26, r24
    5a8a:	cb 01       	movw	r24, r22
    5a8c:	98 ab       	std	Y+48, r25	; 0x30
    5a8e:	8f a7       	std	Y+47, r24	; 0x2f
    5a90:	0f c0       	rjmp	.+30     	; 0x5ab0 <LCD_voidInit+0x8f8>
    5a92:	80 e9       	ldi	r24, 0x90	; 144
    5a94:	91 e0       	ldi	r25, 0x01	; 1
    5a96:	9e a7       	std	Y+46, r25	; 0x2e
    5a98:	8d a7       	std	Y+45, r24	; 0x2d
    5a9a:	8d a5       	ldd	r24, Y+45	; 0x2d
    5a9c:	9e a5       	ldd	r25, Y+46	; 0x2e
    5a9e:	01 97       	sbiw	r24, 0x01	; 1
    5aa0:	f1 f7       	brne	.-4      	; 0x5a9e <LCD_voidInit+0x8e6>
    5aa2:	9e a7       	std	Y+46, r25	; 0x2e
    5aa4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5aa6:	8f a5       	ldd	r24, Y+47	; 0x2f
    5aa8:	98 a9       	ldd	r25, Y+48	; 0x30
    5aaa:	01 97       	sbiw	r24, 0x01	; 1
    5aac:	98 ab       	std	Y+48, r25	; 0x30
    5aae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ab0:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ab2:	98 a9       	ldd	r25, Y+48	; 0x30
    5ab4:	00 97       	sbiw	r24, 0x00	; 0
    5ab6:	69 f7       	brne	.-38     	; 0x5a92 <LCD_voidInit+0x8da>
    5ab8:	14 c0       	rjmp	.+40     	; 0x5ae2 <LCD_voidInit+0x92a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5aba:	69 a9       	ldd	r22, Y+49	; 0x31
    5abc:	7a a9       	ldd	r23, Y+50	; 0x32
    5abe:	8b a9       	ldd	r24, Y+51	; 0x33
    5ac0:	9c a9       	ldd	r25, Y+52	; 0x34
    5ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ac6:	dc 01       	movw	r26, r24
    5ac8:	cb 01       	movw	r24, r22
    5aca:	98 ab       	std	Y+48, r25	; 0x30
    5acc:	8f a7       	std	Y+47, r24	; 0x2f
    5ace:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ad0:	98 a9       	ldd	r25, Y+48	; 0x30
    5ad2:	9c a7       	std	Y+44, r25	; 0x2c
    5ad4:	8b a7       	std	Y+43, r24	; 0x2b
    5ad6:	8b a5       	ldd	r24, Y+43	; 0x2b
    5ad8:	9c a5       	ldd	r25, Y+44	; 0x2c
    5ada:	01 97       	sbiw	r24, 0x01	; 1
    5adc:	f1 f7       	brne	.-4      	; 0x5ada <LCD_voidInit+0x922>
    5ade:	9c a7       	std	Y+44, r25	; 0x2c
    5ae0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_voidSendCommand(LCD_ClearDisplay);
    5ae2:	81 e0       	ldi	r24, 0x01	; 1
    5ae4:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <LCD_voidSendCommand>
    5ae8:	80 e0       	ldi	r24, 0x00	; 0
    5aea:	90 e0       	ldi	r25, 0x00	; 0
    5aec:	a0 ea       	ldi	r26, 0xA0	; 160
    5aee:	b0 e4       	ldi	r27, 0x40	; 64
    5af0:	8f a3       	std	Y+39, r24	; 0x27
    5af2:	98 a7       	std	Y+40, r25	; 0x28
    5af4:	a9 a7       	std	Y+41, r26	; 0x29
    5af6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5af8:	6f a1       	ldd	r22, Y+39	; 0x27
    5afa:	78 a5       	ldd	r23, Y+40	; 0x28
    5afc:	89 a5       	ldd	r24, Y+41	; 0x29
    5afe:	9a a5       	ldd	r25, Y+42	; 0x2a
    5b00:	20 e0       	ldi	r18, 0x00	; 0
    5b02:	30 e0       	ldi	r19, 0x00	; 0
    5b04:	4a e7       	ldi	r20, 0x7A	; 122
    5b06:	55 e4       	ldi	r21, 0x45	; 69
    5b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b0c:	dc 01       	movw	r26, r24
    5b0e:	cb 01       	movw	r24, r22
    5b10:	8b a3       	std	Y+35, r24	; 0x23
    5b12:	9c a3       	std	Y+36, r25	; 0x24
    5b14:	ad a3       	std	Y+37, r26	; 0x25
    5b16:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5b18:	6b a1       	ldd	r22, Y+35	; 0x23
    5b1a:	7c a1       	ldd	r23, Y+36	; 0x24
    5b1c:	8d a1       	ldd	r24, Y+37	; 0x25
    5b1e:	9e a1       	ldd	r25, Y+38	; 0x26
    5b20:	20 e0       	ldi	r18, 0x00	; 0
    5b22:	30 e0       	ldi	r19, 0x00	; 0
    5b24:	40 e8       	ldi	r20, 0x80	; 128
    5b26:	5f e3       	ldi	r21, 0x3F	; 63
    5b28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b2c:	88 23       	and	r24, r24
    5b2e:	2c f4       	brge	.+10     	; 0x5b3a <LCD_voidInit+0x982>
		__ticks = 1;
    5b30:	81 e0       	ldi	r24, 0x01	; 1
    5b32:	90 e0       	ldi	r25, 0x00	; 0
    5b34:	9a a3       	std	Y+34, r25	; 0x22
    5b36:	89 a3       	std	Y+33, r24	; 0x21
    5b38:	3f c0       	rjmp	.+126    	; 0x5bb8 <LCD_voidInit+0xa00>
	else if (__tmp > 65535)
    5b3a:	6b a1       	ldd	r22, Y+35	; 0x23
    5b3c:	7c a1       	ldd	r23, Y+36	; 0x24
    5b3e:	8d a1       	ldd	r24, Y+37	; 0x25
    5b40:	9e a1       	ldd	r25, Y+38	; 0x26
    5b42:	20 e0       	ldi	r18, 0x00	; 0
    5b44:	3f ef       	ldi	r19, 0xFF	; 255
    5b46:	4f e7       	ldi	r20, 0x7F	; 127
    5b48:	57 e4       	ldi	r21, 0x47	; 71
    5b4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b4e:	18 16       	cp	r1, r24
    5b50:	4c f5       	brge	.+82     	; 0x5ba4 <LCD_voidInit+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b52:	6f a1       	ldd	r22, Y+39	; 0x27
    5b54:	78 a5       	ldd	r23, Y+40	; 0x28
    5b56:	89 a5       	ldd	r24, Y+41	; 0x29
    5b58:	9a a5       	ldd	r25, Y+42	; 0x2a
    5b5a:	20 e0       	ldi	r18, 0x00	; 0
    5b5c:	30 e0       	ldi	r19, 0x00	; 0
    5b5e:	40 e2       	ldi	r20, 0x20	; 32
    5b60:	51 e4       	ldi	r21, 0x41	; 65
    5b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b66:	dc 01       	movw	r26, r24
    5b68:	cb 01       	movw	r24, r22
    5b6a:	bc 01       	movw	r22, r24
    5b6c:	cd 01       	movw	r24, r26
    5b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b72:	dc 01       	movw	r26, r24
    5b74:	cb 01       	movw	r24, r22
    5b76:	9a a3       	std	Y+34, r25	; 0x22
    5b78:	89 a3       	std	Y+33, r24	; 0x21
    5b7a:	0f c0       	rjmp	.+30     	; 0x5b9a <LCD_voidInit+0x9e2>
    5b7c:	80 e9       	ldi	r24, 0x90	; 144
    5b7e:	91 e0       	ldi	r25, 0x01	; 1
    5b80:	98 a3       	std	Y+32, r25	; 0x20
    5b82:	8f 8f       	std	Y+31, r24	; 0x1f
    5b84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5b86:	98 a1       	ldd	r25, Y+32	; 0x20
    5b88:	01 97       	sbiw	r24, 0x01	; 1
    5b8a:	f1 f7       	brne	.-4      	; 0x5b88 <LCD_voidInit+0x9d0>
    5b8c:	98 a3       	std	Y+32, r25	; 0x20
    5b8e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b90:	89 a1       	ldd	r24, Y+33	; 0x21
    5b92:	9a a1       	ldd	r25, Y+34	; 0x22
    5b94:	01 97       	sbiw	r24, 0x01	; 1
    5b96:	9a a3       	std	Y+34, r25	; 0x22
    5b98:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b9a:	89 a1       	ldd	r24, Y+33	; 0x21
    5b9c:	9a a1       	ldd	r25, Y+34	; 0x22
    5b9e:	00 97       	sbiw	r24, 0x00	; 0
    5ba0:	69 f7       	brne	.-38     	; 0x5b7c <LCD_voidInit+0x9c4>
    5ba2:	14 c0       	rjmp	.+40     	; 0x5bcc <LCD_voidInit+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ba4:	6b a1       	ldd	r22, Y+35	; 0x23
    5ba6:	7c a1       	ldd	r23, Y+36	; 0x24
    5ba8:	8d a1       	ldd	r24, Y+37	; 0x25
    5baa:	9e a1       	ldd	r25, Y+38	; 0x26
    5bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bb0:	dc 01       	movw	r26, r24
    5bb2:	cb 01       	movw	r24, r22
    5bb4:	9a a3       	std	Y+34, r25	; 0x22
    5bb6:	89 a3       	std	Y+33, r24	; 0x21
    5bb8:	89 a1       	ldd	r24, Y+33	; 0x21
    5bba:	9a a1       	ldd	r25, Y+34	; 0x22
    5bbc:	9e 8f       	std	Y+30, r25	; 0x1e
    5bbe:	8d 8f       	std	Y+29, r24	; 0x1d
    5bc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5bc2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5bc4:	01 97       	sbiw	r24, 0x01	; 1
    5bc6:	f1 f7       	brne	.-4      	; 0x5bc4 <LCD_voidInit+0xa0c>
    5bc8:	9e 8f       	std	Y+30, r25	; 0x1e
    5bca:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(LCD_DisplayON);
    5bcc:	8c e0       	ldi	r24, 0x0C	; 12
    5bce:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <LCD_voidSendCommand>
    5bd2:	80 e0       	ldi	r24, 0x00	; 0
    5bd4:	90 e0       	ldi	r25, 0x00	; 0
    5bd6:	a0 e8       	ldi	r26, 0x80	; 128
    5bd8:	bf e3       	ldi	r27, 0x3F	; 63
    5bda:	89 8f       	std	Y+25, r24	; 0x19
    5bdc:	9a 8f       	std	Y+26, r25	; 0x1a
    5bde:	ab 8f       	std	Y+27, r26	; 0x1b
    5be0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5be2:	69 8d       	ldd	r22, Y+25	; 0x19
    5be4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5be6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5be8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5bea:	20 e0       	ldi	r18, 0x00	; 0
    5bec:	30 e0       	ldi	r19, 0x00	; 0
    5bee:	4a e7       	ldi	r20, 0x7A	; 122
    5bf0:	55 e4       	ldi	r21, 0x45	; 69
    5bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bf6:	dc 01       	movw	r26, r24
    5bf8:	cb 01       	movw	r24, r22
    5bfa:	8d 8b       	std	Y+21, r24	; 0x15
    5bfc:	9e 8b       	std	Y+22, r25	; 0x16
    5bfe:	af 8b       	std	Y+23, r26	; 0x17
    5c00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5c02:	6d 89       	ldd	r22, Y+21	; 0x15
    5c04:	7e 89       	ldd	r23, Y+22	; 0x16
    5c06:	8f 89       	ldd	r24, Y+23	; 0x17
    5c08:	98 8d       	ldd	r25, Y+24	; 0x18
    5c0a:	20 e0       	ldi	r18, 0x00	; 0
    5c0c:	30 e0       	ldi	r19, 0x00	; 0
    5c0e:	40 e8       	ldi	r20, 0x80	; 128
    5c10:	5f e3       	ldi	r21, 0x3F	; 63
    5c12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c16:	88 23       	and	r24, r24
    5c18:	2c f4       	brge	.+10     	; 0x5c24 <LCD_voidInit+0xa6c>
		__ticks = 1;
    5c1a:	81 e0       	ldi	r24, 0x01	; 1
    5c1c:	90 e0       	ldi	r25, 0x00	; 0
    5c1e:	9c 8b       	std	Y+20, r25	; 0x14
    5c20:	8b 8b       	std	Y+19, r24	; 0x13
    5c22:	3f c0       	rjmp	.+126    	; 0x5ca2 <LCD_voidInit+0xaea>
	else if (__tmp > 65535)
    5c24:	6d 89       	ldd	r22, Y+21	; 0x15
    5c26:	7e 89       	ldd	r23, Y+22	; 0x16
    5c28:	8f 89       	ldd	r24, Y+23	; 0x17
    5c2a:	98 8d       	ldd	r25, Y+24	; 0x18
    5c2c:	20 e0       	ldi	r18, 0x00	; 0
    5c2e:	3f ef       	ldi	r19, 0xFF	; 255
    5c30:	4f e7       	ldi	r20, 0x7F	; 127
    5c32:	57 e4       	ldi	r21, 0x47	; 71
    5c34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c38:	18 16       	cp	r1, r24
    5c3a:	4c f5       	brge	.+82     	; 0x5c8e <LCD_voidInit+0xad6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c3c:	69 8d       	ldd	r22, Y+25	; 0x19
    5c3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c44:	20 e0       	ldi	r18, 0x00	; 0
    5c46:	30 e0       	ldi	r19, 0x00	; 0
    5c48:	40 e2       	ldi	r20, 0x20	; 32
    5c4a:	51 e4       	ldi	r21, 0x41	; 65
    5c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c50:	dc 01       	movw	r26, r24
    5c52:	cb 01       	movw	r24, r22
    5c54:	bc 01       	movw	r22, r24
    5c56:	cd 01       	movw	r24, r26
    5c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c5c:	dc 01       	movw	r26, r24
    5c5e:	cb 01       	movw	r24, r22
    5c60:	9c 8b       	std	Y+20, r25	; 0x14
    5c62:	8b 8b       	std	Y+19, r24	; 0x13
    5c64:	0f c0       	rjmp	.+30     	; 0x5c84 <LCD_voidInit+0xacc>
    5c66:	80 e9       	ldi	r24, 0x90	; 144
    5c68:	91 e0       	ldi	r25, 0x01	; 1
    5c6a:	9a 8b       	std	Y+18, r25	; 0x12
    5c6c:	89 8b       	std	Y+17, r24	; 0x11
    5c6e:	89 89       	ldd	r24, Y+17	; 0x11
    5c70:	9a 89       	ldd	r25, Y+18	; 0x12
    5c72:	01 97       	sbiw	r24, 0x01	; 1
    5c74:	f1 f7       	brne	.-4      	; 0x5c72 <LCD_voidInit+0xaba>
    5c76:	9a 8b       	std	Y+18, r25	; 0x12
    5c78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c7a:	8b 89       	ldd	r24, Y+19	; 0x13
    5c7c:	9c 89       	ldd	r25, Y+20	; 0x14
    5c7e:	01 97       	sbiw	r24, 0x01	; 1
    5c80:	9c 8b       	std	Y+20, r25	; 0x14
    5c82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c84:	8b 89       	ldd	r24, Y+19	; 0x13
    5c86:	9c 89       	ldd	r25, Y+20	; 0x14
    5c88:	00 97       	sbiw	r24, 0x00	; 0
    5c8a:	69 f7       	brne	.-38     	; 0x5c66 <LCD_voidInit+0xaae>
    5c8c:	14 c0       	rjmp	.+40     	; 0x5cb6 <LCD_voidInit+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c8e:	6d 89       	ldd	r22, Y+21	; 0x15
    5c90:	7e 89       	ldd	r23, Y+22	; 0x16
    5c92:	8f 89       	ldd	r24, Y+23	; 0x17
    5c94:	98 8d       	ldd	r25, Y+24	; 0x18
    5c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c9a:	dc 01       	movw	r26, r24
    5c9c:	cb 01       	movw	r24, r22
    5c9e:	9c 8b       	std	Y+20, r25	; 0x14
    5ca0:	8b 8b       	std	Y+19, r24	; 0x13
    5ca2:	8b 89       	ldd	r24, Y+19	; 0x13
    5ca4:	9c 89       	ldd	r25, Y+20	; 0x14
    5ca6:	98 8b       	std	Y+16, r25	; 0x10
    5ca8:	8f 87       	std	Y+15, r24	; 0x0f
    5caa:	8f 85       	ldd	r24, Y+15	; 0x0f
    5cac:	98 89       	ldd	r25, Y+16	; 0x10
    5cae:	01 97       	sbiw	r24, 0x01	; 1
    5cb0:	f1 f7       	brne	.-4      	; 0x5cae <LCD_voidInit+0xaf6>
    5cb2:	98 8b       	std	Y+16, r25	; 0x10
    5cb4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(LCD_EntryMode);
    5cb6:	86 e0       	ldi	r24, 0x06	; 6
    5cb8:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <LCD_voidSendCommand>
    5cbc:	80 e0       	ldi	r24, 0x00	; 0
    5cbe:	90 e0       	ldi	r25, 0x00	; 0
    5cc0:	a0 e8       	ldi	r26, 0x80	; 128
    5cc2:	bf e3       	ldi	r27, 0x3F	; 63
    5cc4:	8b 87       	std	Y+11, r24	; 0x0b
    5cc6:	9c 87       	std	Y+12, r25	; 0x0c
    5cc8:	ad 87       	std	Y+13, r26	; 0x0d
    5cca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ccc:	6b 85       	ldd	r22, Y+11	; 0x0b
    5cce:	7c 85       	ldd	r23, Y+12	; 0x0c
    5cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cd4:	20 e0       	ldi	r18, 0x00	; 0
    5cd6:	30 e0       	ldi	r19, 0x00	; 0
    5cd8:	4a e7       	ldi	r20, 0x7A	; 122
    5cda:	55 e4       	ldi	r21, 0x45	; 69
    5cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ce0:	dc 01       	movw	r26, r24
    5ce2:	cb 01       	movw	r24, r22
    5ce4:	8f 83       	std	Y+7, r24	; 0x07
    5ce6:	98 87       	std	Y+8, r25	; 0x08
    5ce8:	a9 87       	std	Y+9, r26	; 0x09
    5cea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5cec:	6f 81       	ldd	r22, Y+7	; 0x07
    5cee:	78 85       	ldd	r23, Y+8	; 0x08
    5cf0:	89 85       	ldd	r24, Y+9	; 0x09
    5cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cf4:	20 e0       	ldi	r18, 0x00	; 0
    5cf6:	30 e0       	ldi	r19, 0x00	; 0
    5cf8:	40 e8       	ldi	r20, 0x80	; 128
    5cfa:	5f e3       	ldi	r21, 0x3F	; 63
    5cfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5d00:	88 23       	and	r24, r24
    5d02:	2c f4       	brge	.+10     	; 0x5d0e <LCD_voidInit+0xb56>
		__ticks = 1;
    5d04:	81 e0       	ldi	r24, 0x01	; 1
    5d06:	90 e0       	ldi	r25, 0x00	; 0
    5d08:	9e 83       	std	Y+6, r25	; 0x06
    5d0a:	8d 83       	std	Y+5, r24	; 0x05
    5d0c:	3f c0       	rjmp	.+126    	; 0x5d8c <LCD_voidInit+0xbd4>
	else if (__tmp > 65535)
    5d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    5d10:	78 85       	ldd	r23, Y+8	; 0x08
    5d12:	89 85       	ldd	r24, Y+9	; 0x09
    5d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d16:	20 e0       	ldi	r18, 0x00	; 0
    5d18:	3f ef       	ldi	r19, 0xFF	; 255
    5d1a:	4f e7       	ldi	r20, 0x7F	; 127
    5d1c:	57 e4       	ldi	r21, 0x47	; 71
    5d1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5d22:	18 16       	cp	r1, r24
    5d24:	4c f5       	brge	.+82     	; 0x5d78 <LCD_voidInit+0xbc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d26:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d28:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d2e:	20 e0       	ldi	r18, 0x00	; 0
    5d30:	30 e0       	ldi	r19, 0x00	; 0
    5d32:	40 e2       	ldi	r20, 0x20	; 32
    5d34:	51 e4       	ldi	r21, 0x41	; 65
    5d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d3a:	dc 01       	movw	r26, r24
    5d3c:	cb 01       	movw	r24, r22
    5d3e:	bc 01       	movw	r22, r24
    5d40:	cd 01       	movw	r24, r26
    5d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d46:	dc 01       	movw	r26, r24
    5d48:	cb 01       	movw	r24, r22
    5d4a:	9e 83       	std	Y+6, r25	; 0x06
    5d4c:	8d 83       	std	Y+5, r24	; 0x05
    5d4e:	0f c0       	rjmp	.+30     	; 0x5d6e <LCD_voidInit+0xbb6>
    5d50:	80 e9       	ldi	r24, 0x90	; 144
    5d52:	91 e0       	ldi	r25, 0x01	; 1
    5d54:	9c 83       	std	Y+4, r25	; 0x04
    5d56:	8b 83       	std	Y+3, r24	; 0x03
    5d58:	8b 81       	ldd	r24, Y+3	; 0x03
    5d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    5d5c:	01 97       	sbiw	r24, 0x01	; 1
    5d5e:	f1 f7       	brne	.-4      	; 0x5d5c <LCD_voidInit+0xba4>
    5d60:	9c 83       	std	Y+4, r25	; 0x04
    5d62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d64:	8d 81       	ldd	r24, Y+5	; 0x05
    5d66:	9e 81       	ldd	r25, Y+6	; 0x06
    5d68:	01 97       	sbiw	r24, 0x01	; 1
    5d6a:	9e 83       	std	Y+6, r25	; 0x06
    5d6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    5d70:	9e 81       	ldd	r25, Y+6	; 0x06
    5d72:	00 97       	sbiw	r24, 0x00	; 0
    5d74:	69 f7       	brne	.-38     	; 0x5d50 <LCD_voidInit+0xb98>
    5d76:	14 c0       	rjmp	.+40     	; 0x5da0 <LCD_voidInit+0xbe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d78:	6f 81       	ldd	r22, Y+7	; 0x07
    5d7a:	78 85       	ldd	r23, Y+8	; 0x08
    5d7c:	89 85       	ldd	r24, Y+9	; 0x09
    5d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d84:	dc 01       	movw	r26, r24
    5d86:	cb 01       	movw	r24, r22
    5d88:	9e 83       	std	Y+6, r25	; 0x06
    5d8a:	8d 83       	std	Y+5, r24	; 0x05
    5d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    5d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    5d90:	9a 83       	std	Y+2, r25	; 0x02
    5d92:	89 83       	std	Y+1, r24	; 0x01
    5d94:	89 81       	ldd	r24, Y+1	; 0x01
    5d96:	9a 81       	ldd	r25, Y+2	; 0x02
    5d98:	01 97       	sbiw	r24, 0x01	; 1
    5d9a:	f1 f7       	brne	.-4      	; 0x5d98 <LCD_voidInit+0xbe0>
    5d9c:	9a 83       	std	Y+2, r25	; 0x02
    5d9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    5da0:	c4 57       	subi	r28, 0x74	; 116
    5da2:	df 4f       	sbci	r29, 0xFF	; 255
    5da4:	0f b6       	in	r0, 0x3f	; 63
    5da6:	f8 94       	cli
    5da8:	de bf       	out	0x3e, r29	; 62
    5daa:	0f be       	out	0x3f, r0	; 63
    5dac:	cd bf       	out	0x3d, r28	; 61
    5dae:	cf 91       	pop	r28
    5db0:	df 91       	pop	r29
    5db2:	1f 91       	pop	r17
    5db4:	0f 91       	pop	r16
    5db6:	08 95       	ret

00005db8 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command){
    5db8:	df 93       	push	r29
    5dba:	cf 93       	push	r28
    5dbc:	cd b7       	in	r28, 0x3d	; 61
    5dbe:	de b7       	in	r29, 0x3e	; 62
    5dc0:	2f 97       	sbiw	r28, 0x0f	; 15
    5dc2:	0f b6       	in	r0, 0x3f	; 63
    5dc4:	f8 94       	cli
    5dc6:	de bf       	out	0x3e, r29	; 62
    5dc8:	0f be       	out	0x3f, r0	; 63
    5dca:	cd bf       	out	0x3d, r28	; 61
    5dcc:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
    5dce:	81 e0       	ldi	r24, 0x01	; 1
    5dd0:	63 e0       	ldi	r22, 0x03	; 3
    5dd2:	40 e0       	ldi	r20, 0x00	; 0
    5dd4:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    5dd8:	81 e0       	ldi	r24, 0x01	; 1
    5dda:	62 e0       	ldi	r22, 0x02	; 2
    5ddc:	41 e0       	ldi	r20, 0x01	; 1
    5dde:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(command, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(command, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(command, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(command, 3));
#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
    5de2:	8f 85       	ldd	r24, Y+15	; 0x0f
    5de4:	82 95       	swap	r24
    5de6:	8f 70       	andi	r24, 0x0F	; 15
    5de8:	98 2f       	mov	r25, r24
    5dea:	91 70       	andi	r25, 0x01	; 1
    5dec:	82 e0       	ldi	r24, 0x02	; 2
    5dee:	60 e0       	ldi	r22, 0x00	; 0
    5df0:	49 2f       	mov	r20, r25
    5df2:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
    5df6:	8f 85       	ldd	r24, Y+15	; 0x0f
    5df8:	82 95       	swap	r24
    5dfa:	86 95       	lsr	r24
    5dfc:	87 70       	andi	r24, 0x07	; 7
    5dfe:	98 2f       	mov	r25, r24
    5e00:	91 70       	andi	r25, 0x01	; 1
    5e02:	82 e0       	ldi	r24, 0x02	; 2
    5e04:	61 e0       	ldi	r22, 0x01	; 1
    5e06:	49 2f       	mov	r20, r25
    5e08:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
    5e0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e0e:	82 95       	swap	r24
    5e10:	86 95       	lsr	r24
    5e12:	86 95       	lsr	r24
    5e14:	83 70       	andi	r24, 0x03	; 3
    5e16:	98 2f       	mov	r25, r24
    5e18:	91 70       	andi	r25, 0x01	; 1
    5e1a:	82 e0       	ldi	r24, 0x02	; 2
    5e1c:	62 e0       	ldi	r22, 0x02	; 2
    5e1e:	49 2f       	mov	r20, r25
    5e20:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
    5e24:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e26:	98 2f       	mov	r25, r24
    5e28:	99 1f       	adc	r25, r25
    5e2a:	99 27       	eor	r25, r25
    5e2c:	99 1f       	adc	r25, r25
    5e2e:	82 e0       	ldi	r24, 0x02	; 2
    5e30:	63 e0       	ldi	r22, 0x03	; 3
    5e32:	49 2f       	mov	r20, r25
    5e34:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    5e38:	81 e0       	ldi	r24, 0x01	; 1
    5e3a:	62 e0       	ldi	r22, 0x02	; 2
    5e3c:	40 e0       	ldi	r20, 0x00	; 0
    5e3e:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    5e42:	81 e0       	ldi	r24, 0x01	; 1
    5e44:	62 e0       	ldi	r22, 0x02	; 2
    5e46:	41 e0       	ldi	r20, 0x01	; 1
    5e48:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 0));
    5e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e4e:	98 2f       	mov	r25, r24
    5e50:	91 70       	andi	r25, 0x01	; 1
    5e52:	82 e0       	ldi	r24, 0x02	; 2
    5e54:	60 e0       	ldi	r22, 0x00	; 0
    5e56:	49 2f       	mov	r20, r25
    5e58:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 1));
    5e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e5e:	86 95       	lsr	r24
    5e60:	98 2f       	mov	r25, r24
    5e62:	91 70       	andi	r25, 0x01	; 1
    5e64:	82 e0       	ldi	r24, 0x02	; 2
    5e66:	61 e0       	ldi	r22, 0x01	; 1
    5e68:	49 2f       	mov	r20, r25
    5e6a:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 2));
    5e6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e70:	86 95       	lsr	r24
    5e72:	86 95       	lsr	r24
    5e74:	98 2f       	mov	r25, r24
    5e76:	91 70       	andi	r25, 0x01	; 1
    5e78:	82 e0       	ldi	r24, 0x02	; 2
    5e7a:	62 e0       	ldi	r22, 0x02	; 2
    5e7c:	49 2f       	mov	r20, r25
    5e7e:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 3));
    5e82:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e84:	86 95       	lsr	r24
    5e86:	86 95       	lsr	r24
    5e88:	86 95       	lsr	r24
    5e8a:	98 2f       	mov	r25, r24
    5e8c:	91 70       	andi	r25, 0x01	; 1
    5e8e:	82 e0       	ldi	r24, 0x02	; 2
    5e90:	63 e0       	ldi	r22, 0x03	; 3
    5e92:	49 2f       	mov	r20, r25
    5e94:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    5e98:	81 e0       	ldi	r24, 0x01	; 1
    5e9a:	62 e0       	ldi	r22, 0x02	; 2
    5e9c:	40 e0       	ldi	r20, 0x00	; 0
    5e9e:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
    5ea2:	80 e0       	ldi	r24, 0x00	; 0
    5ea4:	90 e0       	ldi	r25, 0x00	; 0
    5ea6:	a0 ea       	ldi	r26, 0xA0	; 160
    5ea8:	b0 e4       	ldi	r27, 0x40	; 64
    5eaa:	8b 87       	std	Y+11, r24	; 0x0b
    5eac:	9c 87       	std	Y+12, r25	; 0x0c
    5eae:	ad 87       	std	Y+13, r26	; 0x0d
    5eb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    5eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    5eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    5eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    5eba:	20 e0       	ldi	r18, 0x00	; 0
    5ebc:	30 e0       	ldi	r19, 0x00	; 0
    5ebe:	4a e7       	ldi	r20, 0x7A	; 122
    5ec0:	55 e4       	ldi	r21, 0x45	; 69
    5ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ec6:	dc 01       	movw	r26, r24
    5ec8:	cb 01       	movw	r24, r22
    5eca:	8f 83       	std	Y+7, r24	; 0x07
    5ecc:	98 87       	std	Y+8, r25	; 0x08
    5ece:	a9 87       	std	Y+9, r26	; 0x09
    5ed0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    5ed4:	78 85       	ldd	r23, Y+8	; 0x08
    5ed6:	89 85       	ldd	r24, Y+9	; 0x09
    5ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5eda:	20 e0       	ldi	r18, 0x00	; 0
    5edc:	30 e0       	ldi	r19, 0x00	; 0
    5ede:	40 e8       	ldi	r20, 0x80	; 128
    5ee0:	5f e3       	ldi	r21, 0x3F	; 63
    5ee2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ee6:	88 23       	and	r24, r24
    5ee8:	2c f4       	brge	.+10     	; 0x5ef4 <LCD_voidSendCommand+0x13c>
		__ticks = 1;
    5eea:	81 e0       	ldi	r24, 0x01	; 1
    5eec:	90 e0       	ldi	r25, 0x00	; 0
    5eee:	9e 83       	std	Y+6, r25	; 0x06
    5ef0:	8d 83       	std	Y+5, r24	; 0x05
    5ef2:	3f c0       	rjmp	.+126    	; 0x5f72 <LCD_voidSendCommand+0x1ba>
	else if (__tmp > 65535)
    5ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    5ef6:	78 85       	ldd	r23, Y+8	; 0x08
    5ef8:	89 85       	ldd	r24, Y+9	; 0x09
    5efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    5efc:	20 e0       	ldi	r18, 0x00	; 0
    5efe:	3f ef       	ldi	r19, 0xFF	; 255
    5f00:	4f e7       	ldi	r20, 0x7F	; 127
    5f02:	57 e4       	ldi	r21, 0x47	; 71
    5f04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5f08:	18 16       	cp	r1, r24
    5f0a:	4c f5       	brge	.+82     	; 0x5f5e <LCD_voidSendCommand+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f10:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f12:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f14:	20 e0       	ldi	r18, 0x00	; 0
    5f16:	30 e0       	ldi	r19, 0x00	; 0
    5f18:	40 e2       	ldi	r20, 0x20	; 32
    5f1a:	51 e4       	ldi	r21, 0x41	; 65
    5f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f20:	dc 01       	movw	r26, r24
    5f22:	cb 01       	movw	r24, r22
    5f24:	bc 01       	movw	r22, r24
    5f26:	cd 01       	movw	r24, r26
    5f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f2c:	dc 01       	movw	r26, r24
    5f2e:	cb 01       	movw	r24, r22
    5f30:	9e 83       	std	Y+6, r25	; 0x06
    5f32:	8d 83       	std	Y+5, r24	; 0x05
    5f34:	0f c0       	rjmp	.+30     	; 0x5f54 <LCD_voidSendCommand+0x19c>
    5f36:	80 e9       	ldi	r24, 0x90	; 144
    5f38:	91 e0       	ldi	r25, 0x01	; 1
    5f3a:	9c 83       	std	Y+4, r25	; 0x04
    5f3c:	8b 83       	std	Y+3, r24	; 0x03
    5f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    5f40:	9c 81       	ldd	r25, Y+4	; 0x04
    5f42:	01 97       	sbiw	r24, 0x01	; 1
    5f44:	f1 f7       	brne	.-4      	; 0x5f42 <LCD_voidSendCommand+0x18a>
    5f46:	9c 83       	std	Y+4, r25	; 0x04
    5f48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    5f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    5f4e:	01 97       	sbiw	r24, 0x01	; 1
    5f50:	9e 83       	std	Y+6, r25	; 0x06
    5f52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f54:	8d 81       	ldd	r24, Y+5	; 0x05
    5f56:	9e 81       	ldd	r25, Y+6	; 0x06
    5f58:	00 97       	sbiw	r24, 0x00	; 0
    5f5a:	69 f7       	brne	.-38     	; 0x5f36 <LCD_voidSendCommand+0x17e>
    5f5c:	14 c0       	rjmp	.+40     	; 0x5f86 <LCD_voidSendCommand+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f5e:	6f 81       	ldd	r22, Y+7	; 0x07
    5f60:	78 85       	ldd	r23, Y+8	; 0x08
    5f62:	89 85       	ldd	r24, Y+9	; 0x09
    5f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f6a:	dc 01       	movw	r26, r24
    5f6c:	cb 01       	movw	r24, r22
    5f6e:	9e 83       	std	Y+6, r25	; 0x06
    5f70:	8d 83       	std	Y+5, r24	; 0x05
    5f72:	8d 81       	ldd	r24, Y+5	; 0x05
    5f74:	9e 81       	ldd	r25, Y+6	; 0x06
    5f76:	9a 83       	std	Y+2, r25	; 0x02
    5f78:	89 83       	std	Y+1, r24	; 0x01
    5f7a:	89 81       	ldd	r24, Y+1	; 0x01
    5f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    5f7e:	01 97       	sbiw	r24, 0x01	; 1
    5f80:	f1 f7       	brne	.-4      	; 0x5f7e <LCD_voidSendCommand+0x1c6>
    5f82:	9a 83       	std	Y+2, r25	; 0x02
    5f84:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    5f86:	2f 96       	adiw	r28, 0x0f	; 15
    5f88:	0f b6       	in	r0, 0x3f	; 63
    5f8a:	f8 94       	cli
    5f8c:	de bf       	out	0x3e, r29	; 62
    5f8e:	0f be       	out	0x3f, r0	; 63
    5f90:	cd bf       	out	0x3d, r28	; 61
    5f92:	cf 91       	pop	r28
    5f94:	df 91       	pop	r29
    5f96:	08 95       	ret

00005f98 <LCD_voidSendInitCommand>:

void LCD_voidSendInitCommand(u8 command){
    5f98:	df 93       	push	r29
    5f9a:	cf 93       	push	r28
    5f9c:	cd b7       	in	r28, 0x3d	; 61
    5f9e:	de b7       	in	r29, 0x3e	; 62
    5fa0:	2f 97       	sbiw	r28, 0x0f	; 15
    5fa2:	0f b6       	in	r0, 0x3f	; 63
    5fa4:	f8 94       	cli
    5fa6:	de bf       	out	0x3e, r29	; 62
    5fa8:	0f be       	out	0x3f, r0	; 63
    5faa:	cd bf       	out	0x3d, r28	; 61
    5fac:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
    5fae:	81 e0       	ldi	r24, 0x01	; 1
    5fb0:	63 e0       	ldi	r22, 0x03	; 3
    5fb2:	40 e0       	ldi	r20, 0x00	; 0
    5fb4:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    5fb8:	81 e0       	ldi	r24, 0x01	; 1
    5fba:	62 e0       	ldi	r22, 0x02	; 2
    5fbc:	41 e0       	ldi	r20, 0x01	; 1
    5fbe:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
    5fc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    5fc4:	82 95       	swap	r24
    5fc6:	8f 70       	andi	r24, 0x0F	; 15
    5fc8:	98 2f       	mov	r25, r24
    5fca:	91 70       	andi	r25, 0x01	; 1
    5fcc:	82 e0       	ldi	r24, 0x02	; 2
    5fce:	60 e0       	ldi	r22, 0x00	; 0
    5fd0:	49 2f       	mov	r20, r25
    5fd2:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
    5fd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    5fd8:	82 95       	swap	r24
    5fda:	86 95       	lsr	r24
    5fdc:	87 70       	andi	r24, 0x07	; 7
    5fde:	98 2f       	mov	r25, r24
    5fe0:	91 70       	andi	r25, 0x01	; 1
    5fe2:	82 e0       	ldi	r24, 0x02	; 2
    5fe4:	61 e0       	ldi	r22, 0x01	; 1
    5fe6:	49 2f       	mov	r20, r25
    5fe8:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
    5fec:	8f 85       	ldd	r24, Y+15	; 0x0f
    5fee:	82 95       	swap	r24
    5ff0:	86 95       	lsr	r24
    5ff2:	86 95       	lsr	r24
    5ff4:	83 70       	andi	r24, 0x03	; 3
    5ff6:	98 2f       	mov	r25, r24
    5ff8:	91 70       	andi	r25, 0x01	; 1
    5ffa:	82 e0       	ldi	r24, 0x02	; 2
    5ffc:	62 e0       	ldi	r22, 0x02	; 2
    5ffe:	49 2f       	mov	r20, r25
    6000:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
    6004:	8f 85       	ldd	r24, Y+15	; 0x0f
    6006:	98 2f       	mov	r25, r24
    6008:	99 1f       	adc	r25, r25
    600a:	99 27       	eor	r25, r25
    600c:	99 1f       	adc	r25, r25
    600e:	82 e0       	ldi	r24, 0x02	; 2
    6010:	63 e0       	ldi	r22, 0x03	; 3
    6012:	49 2f       	mov	r20, r25
    6014:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    6018:	81 e0       	ldi	r24, 0x01	; 1
    601a:	62 e0       	ldi	r22, 0x02	; 2
    601c:	40 e0       	ldi	r20, 0x00	; 0
    601e:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
    6022:	80 e0       	ldi	r24, 0x00	; 0
    6024:	90 e0       	ldi	r25, 0x00	; 0
    6026:	a0 ea       	ldi	r26, 0xA0	; 160
    6028:	b0 e4       	ldi	r27, 0x40	; 64
    602a:	8b 87       	std	Y+11, r24	; 0x0b
    602c:	9c 87       	std	Y+12, r25	; 0x0c
    602e:	ad 87       	std	Y+13, r26	; 0x0d
    6030:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6032:	6b 85       	ldd	r22, Y+11	; 0x0b
    6034:	7c 85       	ldd	r23, Y+12	; 0x0c
    6036:	8d 85       	ldd	r24, Y+13	; 0x0d
    6038:	9e 85       	ldd	r25, Y+14	; 0x0e
    603a:	20 e0       	ldi	r18, 0x00	; 0
    603c:	30 e0       	ldi	r19, 0x00	; 0
    603e:	4a e7       	ldi	r20, 0x7A	; 122
    6040:	55 e4       	ldi	r21, 0x45	; 69
    6042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6046:	dc 01       	movw	r26, r24
    6048:	cb 01       	movw	r24, r22
    604a:	8f 83       	std	Y+7, r24	; 0x07
    604c:	98 87       	std	Y+8, r25	; 0x08
    604e:	a9 87       	std	Y+9, r26	; 0x09
    6050:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6052:	6f 81       	ldd	r22, Y+7	; 0x07
    6054:	78 85       	ldd	r23, Y+8	; 0x08
    6056:	89 85       	ldd	r24, Y+9	; 0x09
    6058:	9a 85       	ldd	r25, Y+10	; 0x0a
    605a:	20 e0       	ldi	r18, 0x00	; 0
    605c:	30 e0       	ldi	r19, 0x00	; 0
    605e:	40 e8       	ldi	r20, 0x80	; 128
    6060:	5f e3       	ldi	r21, 0x3F	; 63
    6062:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6066:	88 23       	and	r24, r24
    6068:	2c f4       	brge	.+10     	; 0x6074 <LCD_voidSendInitCommand+0xdc>
		__ticks = 1;
    606a:	81 e0       	ldi	r24, 0x01	; 1
    606c:	90 e0       	ldi	r25, 0x00	; 0
    606e:	9e 83       	std	Y+6, r25	; 0x06
    6070:	8d 83       	std	Y+5, r24	; 0x05
    6072:	3f c0       	rjmp	.+126    	; 0x60f2 <LCD_voidSendInitCommand+0x15a>
	else if (__tmp > 65535)
    6074:	6f 81       	ldd	r22, Y+7	; 0x07
    6076:	78 85       	ldd	r23, Y+8	; 0x08
    6078:	89 85       	ldd	r24, Y+9	; 0x09
    607a:	9a 85       	ldd	r25, Y+10	; 0x0a
    607c:	20 e0       	ldi	r18, 0x00	; 0
    607e:	3f ef       	ldi	r19, 0xFF	; 255
    6080:	4f e7       	ldi	r20, 0x7F	; 127
    6082:	57 e4       	ldi	r21, 0x47	; 71
    6084:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6088:	18 16       	cp	r1, r24
    608a:	4c f5       	brge	.+82     	; 0x60de <LCD_voidSendInitCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    608c:	6b 85       	ldd	r22, Y+11	; 0x0b
    608e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6090:	8d 85       	ldd	r24, Y+13	; 0x0d
    6092:	9e 85       	ldd	r25, Y+14	; 0x0e
    6094:	20 e0       	ldi	r18, 0x00	; 0
    6096:	30 e0       	ldi	r19, 0x00	; 0
    6098:	40 e2       	ldi	r20, 0x20	; 32
    609a:	51 e4       	ldi	r21, 0x41	; 65
    609c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60a0:	dc 01       	movw	r26, r24
    60a2:	cb 01       	movw	r24, r22
    60a4:	bc 01       	movw	r22, r24
    60a6:	cd 01       	movw	r24, r26
    60a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60ac:	dc 01       	movw	r26, r24
    60ae:	cb 01       	movw	r24, r22
    60b0:	9e 83       	std	Y+6, r25	; 0x06
    60b2:	8d 83       	std	Y+5, r24	; 0x05
    60b4:	0f c0       	rjmp	.+30     	; 0x60d4 <LCD_voidSendInitCommand+0x13c>
    60b6:	80 e9       	ldi	r24, 0x90	; 144
    60b8:	91 e0       	ldi	r25, 0x01	; 1
    60ba:	9c 83       	std	Y+4, r25	; 0x04
    60bc:	8b 83       	std	Y+3, r24	; 0x03
    60be:	8b 81       	ldd	r24, Y+3	; 0x03
    60c0:	9c 81       	ldd	r25, Y+4	; 0x04
    60c2:	01 97       	sbiw	r24, 0x01	; 1
    60c4:	f1 f7       	brne	.-4      	; 0x60c2 <LCD_voidSendInitCommand+0x12a>
    60c6:	9c 83       	std	Y+4, r25	; 0x04
    60c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60ca:	8d 81       	ldd	r24, Y+5	; 0x05
    60cc:	9e 81       	ldd	r25, Y+6	; 0x06
    60ce:	01 97       	sbiw	r24, 0x01	; 1
    60d0:	9e 83       	std	Y+6, r25	; 0x06
    60d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60d4:	8d 81       	ldd	r24, Y+5	; 0x05
    60d6:	9e 81       	ldd	r25, Y+6	; 0x06
    60d8:	00 97       	sbiw	r24, 0x00	; 0
    60da:	69 f7       	brne	.-38     	; 0x60b6 <LCD_voidSendInitCommand+0x11e>
    60dc:	14 c0       	rjmp	.+40     	; 0x6106 <LCD_voidSendInitCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60de:	6f 81       	ldd	r22, Y+7	; 0x07
    60e0:	78 85       	ldd	r23, Y+8	; 0x08
    60e2:	89 85       	ldd	r24, Y+9	; 0x09
    60e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    60e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60ea:	dc 01       	movw	r26, r24
    60ec:	cb 01       	movw	r24, r22
    60ee:	9e 83       	std	Y+6, r25	; 0x06
    60f0:	8d 83       	std	Y+5, r24	; 0x05
    60f2:	8d 81       	ldd	r24, Y+5	; 0x05
    60f4:	9e 81       	ldd	r25, Y+6	; 0x06
    60f6:	9a 83       	std	Y+2, r25	; 0x02
    60f8:	89 83       	std	Y+1, r24	; 0x01
    60fa:	89 81       	ldd	r24, Y+1	; 0x01
    60fc:	9a 81       	ldd	r25, Y+2	; 0x02
    60fe:	01 97       	sbiw	r24, 0x01	; 1
    6100:	f1 f7       	brne	.-4      	; 0x60fe <LCD_voidSendInitCommand+0x166>
    6102:	9a 83       	std	Y+2, r25	; 0x02
    6104:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    6106:	2f 96       	adiw	r28, 0x0f	; 15
    6108:	0f b6       	in	r0, 0x3f	; 63
    610a:	f8 94       	cli
    610c:	de bf       	out	0x3e, r29	; 62
    610e:	0f be       	out	0x3f, r0	; 63
    6110:	cd bf       	out	0x3d, r28	; 61
    6112:	cf 91       	pop	r28
    6114:	df 91       	pop	r29
    6116:	08 95       	ret

00006118 <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 data){
    6118:	df 93       	push	r29
    611a:	cf 93       	push	r28
    611c:	cd b7       	in	r28, 0x3d	; 61
    611e:	de b7       	in	r29, 0x3e	; 62
    6120:	2f 97       	sbiw	r28, 0x0f	; 15
    6122:	0f b6       	in	r0, 0x3f	; 63
    6124:	f8 94       	cli
    6126:	de bf       	out	0x3e, r29	; 62
    6128:	0f be       	out	0x3f, r0	; 63
    612a:	cd bf       	out	0x3d, r28	; 61
    612c:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, High); //RS = 1
    612e:	81 e0       	ldi	r24, 0x01	; 1
    6130:	63 e0       	ldi	r22, 0x03	; 3
    6132:	41 e0       	ldi	r20, 0x01	; 1
    6134:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    6138:	81 e0       	ldi	r24, 0x01	; 1
    613a:	62 e0       	ldi	r22, 0x02	; 2
    613c:	41 e0       	ldi	r20, 0x01	; 1
    613e:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(data, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(data, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(data, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(data, 3));
#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 4));
    6142:	8f 85       	ldd	r24, Y+15	; 0x0f
    6144:	82 95       	swap	r24
    6146:	8f 70       	andi	r24, 0x0F	; 15
    6148:	98 2f       	mov	r25, r24
    614a:	91 70       	andi	r25, 0x01	; 1
    614c:	82 e0       	ldi	r24, 0x02	; 2
    614e:	60 e0       	ldi	r22, 0x00	; 0
    6150:	49 2f       	mov	r20, r25
    6152:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 5));
    6156:	8f 85       	ldd	r24, Y+15	; 0x0f
    6158:	82 95       	swap	r24
    615a:	86 95       	lsr	r24
    615c:	87 70       	andi	r24, 0x07	; 7
    615e:	98 2f       	mov	r25, r24
    6160:	91 70       	andi	r25, 0x01	; 1
    6162:	82 e0       	ldi	r24, 0x02	; 2
    6164:	61 e0       	ldi	r22, 0x01	; 1
    6166:	49 2f       	mov	r20, r25
    6168:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 6));
    616c:	8f 85       	ldd	r24, Y+15	; 0x0f
    616e:	82 95       	swap	r24
    6170:	86 95       	lsr	r24
    6172:	86 95       	lsr	r24
    6174:	83 70       	andi	r24, 0x03	; 3
    6176:	98 2f       	mov	r25, r24
    6178:	91 70       	andi	r25, 0x01	; 1
    617a:	82 e0       	ldi	r24, 0x02	; 2
    617c:	62 e0       	ldi	r22, 0x02	; 2
    617e:	49 2f       	mov	r20, r25
    6180:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 7));
    6184:	8f 85       	ldd	r24, Y+15	; 0x0f
    6186:	98 2f       	mov	r25, r24
    6188:	99 1f       	adc	r25, r25
    618a:	99 27       	eor	r25, r25
    618c:	99 1f       	adc	r25, r25
    618e:	82 e0       	ldi	r24, 0x02	; 2
    6190:	63 e0       	ldi	r22, 0x03	; 3
    6192:	49 2f       	mov	r20, r25
    6194:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    6198:	81 e0       	ldi	r24, 0x01	; 1
    619a:	62 e0       	ldi	r22, 0x02	; 2
    619c:	40 e0       	ldi	r20, 0x00	; 0
    619e:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    61a2:	81 e0       	ldi	r24, 0x01	; 1
    61a4:	62 e0       	ldi	r22, 0x02	; 2
    61a6:	41 e0       	ldi	r20, 0x01	; 1
    61a8:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 0));
    61ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    61ae:	98 2f       	mov	r25, r24
    61b0:	91 70       	andi	r25, 0x01	; 1
    61b2:	82 e0       	ldi	r24, 0x02	; 2
    61b4:	60 e0       	ldi	r22, 0x00	; 0
    61b6:	49 2f       	mov	r20, r25
    61b8:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 1));
    61bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    61be:	86 95       	lsr	r24
    61c0:	98 2f       	mov	r25, r24
    61c2:	91 70       	andi	r25, 0x01	; 1
    61c4:	82 e0       	ldi	r24, 0x02	; 2
    61c6:	61 e0       	ldi	r22, 0x01	; 1
    61c8:	49 2f       	mov	r20, r25
    61ca:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 2));
    61ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    61d0:	86 95       	lsr	r24
    61d2:	86 95       	lsr	r24
    61d4:	98 2f       	mov	r25, r24
    61d6:	91 70       	andi	r25, 0x01	; 1
    61d8:	82 e0       	ldi	r24, 0x02	; 2
    61da:	62 e0       	ldi	r22, 0x02	; 2
    61dc:	49 2f       	mov	r20, r25
    61de:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 3));
    61e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    61e4:	86 95       	lsr	r24
    61e6:	86 95       	lsr	r24
    61e8:	86 95       	lsr	r24
    61ea:	98 2f       	mov	r25, r24
    61ec:	91 70       	andi	r25, 0x01	; 1
    61ee:	82 e0       	ldi	r24, 0x02	; 2
    61f0:	63 e0       	ldi	r22, 0x03	; 3
    61f2:	49 2f       	mov	r20, r25
    61f4:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    61f8:	81 e0       	ldi	r24, 0x01	; 1
    61fa:	62 e0       	ldi	r22, 0x02	; 2
    61fc:	40 e0       	ldi	r20, 0x00	; 0
    61fe:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
    6202:	80 e0       	ldi	r24, 0x00	; 0
    6204:	90 e0       	ldi	r25, 0x00	; 0
    6206:	a0 ea       	ldi	r26, 0xA0	; 160
    6208:	b0 e4       	ldi	r27, 0x40	; 64
    620a:	8b 87       	std	Y+11, r24	; 0x0b
    620c:	9c 87       	std	Y+12, r25	; 0x0c
    620e:	ad 87       	std	Y+13, r26	; 0x0d
    6210:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6212:	6b 85       	ldd	r22, Y+11	; 0x0b
    6214:	7c 85       	ldd	r23, Y+12	; 0x0c
    6216:	8d 85       	ldd	r24, Y+13	; 0x0d
    6218:	9e 85       	ldd	r25, Y+14	; 0x0e
    621a:	20 e0       	ldi	r18, 0x00	; 0
    621c:	30 e0       	ldi	r19, 0x00	; 0
    621e:	4a e7       	ldi	r20, 0x7A	; 122
    6220:	55 e4       	ldi	r21, 0x45	; 69
    6222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6226:	dc 01       	movw	r26, r24
    6228:	cb 01       	movw	r24, r22
    622a:	8f 83       	std	Y+7, r24	; 0x07
    622c:	98 87       	std	Y+8, r25	; 0x08
    622e:	a9 87       	std	Y+9, r26	; 0x09
    6230:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6232:	6f 81       	ldd	r22, Y+7	; 0x07
    6234:	78 85       	ldd	r23, Y+8	; 0x08
    6236:	89 85       	ldd	r24, Y+9	; 0x09
    6238:	9a 85       	ldd	r25, Y+10	; 0x0a
    623a:	20 e0       	ldi	r18, 0x00	; 0
    623c:	30 e0       	ldi	r19, 0x00	; 0
    623e:	40 e8       	ldi	r20, 0x80	; 128
    6240:	5f e3       	ldi	r21, 0x3F	; 63
    6242:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6246:	88 23       	and	r24, r24
    6248:	2c f4       	brge	.+10     	; 0x6254 <LCD_voidWriteChar+0x13c>
		__ticks = 1;
    624a:	81 e0       	ldi	r24, 0x01	; 1
    624c:	90 e0       	ldi	r25, 0x00	; 0
    624e:	9e 83       	std	Y+6, r25	; 0x06
    6250:	8d 83       	std	Y+5, r24	; 0x05
    6252:	3f c0       	rjmp	.+126    	; 0x62d2 <LCD_voidWriteChar+0x1ba>
	else if (__tmp > 65535)
    6254:	6f 81       	ldd	r22, Y+7	; 0x07
    6256:	78 85       	ldd	r23, Y+8	; 0x08
    6258:	89 85       	ldd	r24, Y+9	; 0x09
    625a:	9a 85       	ldd	r25, Y+10	; 0x0a
    625c:	20 e0       	ldi	r18, 0x00	; 0
    625e:	3f ef       	ldi	r19, 0xFF	; 255
    6260:	4f e7       	ldi	r20, 0x7F	; 127
    6262:	57 e4       	ldi	r21, 0x47	; 71
    6264:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6268:	18 16       	cp	r1, r24
    626a:	4c f5       	brge	.+82     	; 0x62be <LCD_voidWriteChar+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    626c:	6b 85       	ldd	r22, Y+11	; 0x0b
    626e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6270:	8d 85       	ldd	r24, Y+13	; 0x0d
    6272:	9e 85       	ldd	r25, Y+14	; 0x0e
    6274:	20 e0       	ldi	r18, 0x00	; 0
    6276:	30 e0       	ldi	r19, 0x00	; 0
    6278:	40 e2       	ldi	r20, 0x20	; 32
    627a:	51 e4       	ldi	r21, 0x41	; 65
    627c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6280:	dc 01       	movw	r26, r24
    6282:	cb 01       	movw	r24, r22
    6284:	bc 01       	movw	r22, r24
    6286:	cd 01       	movw	r24, r26
    6288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    628c:	dc 01       	movw	r26, r24
    628e:	cb 01       	movw	r24, r22
    6290:	9e 83       	std	Y+6, r25	; 0x06
    6292:	8d 83       	std	Y+5, r24	; 0x05
    6294:	0f c0       	rjmp	.+30     	; 0x62b4 <LCD_voidWriteChar+0x19c>
    6296:	80 e9       	ldi	r24, 0x90	; 144
    6298:	91 e0       	ldi	r25, 0x01	; 1
    629a:	9c 83       	std	Y+4, r25	; 0x04
    629c:	8b 83       	std	Y+3, r24	; 0x03
    629e:	8b 81       	ldd	r24, Y+3	; 0x03
    62a0:	9c 81       	ldd	r25, Y+4	; 0x04
    62a2:	01 97       	sbiw	r24, 0x01	; 1
    62a4:	f1 f7       	brne	.-4      	; 0x62a2 <LCD_voidWriteChar+0x18a>
    62a6:	9c 83       	std	Y+4, r25	; 0x04
    62a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62aa:	8d 81       	ldd	r24, Y+5	; 0x05
    62ac:	9e 81       	ldd	r25, Y+6	; 0x06
    62ae:	01 97       	sbiw	r24, 0x01	; 1
    62b0:	9e 83       	std	Y+6, r25	; 0x06
    62b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62b4:	8d 81       	ldd	r24, Y+5	; 0x05
    62b6:	9e 81       	ldd	r25, Y+6	; 0x06
    62b8:	00 97       	sbiw	r24, 0x00	; 0
    62ba:	69 f7       	brne	.-38     	; 0x6296 <LCD_voidWriteChar+0x17e>
    62bc:	14 c0       	rjmp	.+40     	; 0x62e6 <LCD_voidWriteChar+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62be:	6f 81       	ldd	r22, Y+7	; 0x07
    62c0:	78 85       	ldd	r23, Y+8	; 0x08
    62c2:	89 85       	ldd	r24, Y+9	; 0x09
    62c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    62c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62ca:	dc 01       	movw	r26, r24
    62cc:	cb 01       	movw	r24, r22
    62ce:	9e 83       	std	Y+6, r25	; 0x06
    62d0:	8d 83       	std	Y+5, r24	; 0x05
    62d2:	8d 81       	ldd	r24, Y+5	; 0x05
    62d4:	9e 81       	ldd	r25, Y+6	; 0x06
    62d6:	9a 83       	std	Y+2, r25	; 0x02
    62d8:	89 83       	std	Y+1, r24	; 0x01
    62da:	89 81       	ldd	r24, Y+1	; 0x01
    62dc:	9a 81       	ldd	r25, Y+2	; 0x02
    62de:	01 97       	sbiw	r24, 0x01	; 1
    62e0:	f1 f7       	brne	.-4      	; 0x62de <LCD_voidWriteChar+0x1c6>
    62e2:	9a 83       	std	Y+2, r25	; 0x02
    62e4:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    62e6:	2f 96       	adiw	r28, 0x0f	; 15
    62e8:	0f b6       	in	r0, 0x3f	; 63
    62ea:	f8 94       	cli
    62ec:	de bf       	out	0x3e, r29	; 62
    62ee:	0f be       	out	0x3f, r0	; 63
    62f0:	cd bf       	out	0x3d, r28	; 61
    62f2:	cf 91       	pop	r28
    62f4:	df 91       	pop	r29
    62f6:	08 95       	ret

000062f8 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Local_Data){
    62f8:	df 93       	push	r29
    62fa:	cf 93       	push	r28
    62fc:	00 d0       	rcall	.+0      	; 0x62fe <LCD_voidWriteString+0x6>
    62fe:	0f 92       	push	r0
    6300:	cd b7       	in	r28, 0x3d	; 61
    6302:	de b7       	in	r29, 0x3e	; 62
    6304:	9b 83       	std	Y+3, r25	; 0x03
    6306:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    6308:	19 82       	std	Y+1, r1	; 0x01
    630a:	0e c0       	rjmp	.+28     	; 0x6328 <LCD_voidWriteString+0x30>
	while(Local_Data[index] != '\0'){
		LCD_voidWriteChar(Local_Data[index]);
    630c:	89 81       	ldd	r24, Y+1	; 0x01
    630e:	28 2f       	mov	r18, r24
    6310:	30 e0       	ldi	r19, 0x00	; 0
    6312:	8a 81       	ldd	r24, Y+2	; 0x02
    6314:	9b 81       	ldd	r25, Y+3	; 0x03
    6316:	fc 01       	movw	r30, r24
    6318:	e2 0f       	add	r30, r18
    631a:	f3 1f       	adc	r31, r19
    631c:	80 81       	ld	r24, Z
    631e:	0e 94 8c 30 	call	0x6118	; 0x6118 <LCD_voidWriteChar>
		index++;
    6322:	89 81       	ldd	r24, Y+1	; 0x01
    6324:	8f 5f       	subi	r24, 0xFF	; 255
    6326:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}

void LCD_voidWriteString(u8* Local_Data){
	u8 index = 0;
	while(Local_Data[index] != '\0'){
    6328:	89 81       	ldd	r24, Y+1	; 0x01
    632a:	28 2f       	mov	r18, r24
    632c:	30 e0       	ldi	r19, 0x00	; 0
    632e:	8a 81       	ldd	r24, Y+2	; 0x02
    6330:	9b 81       	ldd	r25, Y+3	; 0x03
    6332:	fc 01       	movw	r30, r24
    6334:	e2 0f       	add	r30, r18
    6336:	f3 1f       	adc	r31, r19
    6338:	80 81       	ld	r24, Z
    633a:	88 23       	and	r24, r24
    633c:	39 f7       	brne	.-50     	; 0x630c <LCD_voidWriteString+0x14>
		LCD_voidWriteChar(Local_Data[index]);
		index++;
	}
}
    633e:	0f 90       	pop	r0
    6340:	0f 90       	pop	r0
    6342:	0f 90       	pop	r0
    6344:	cf 91       	pop	r28
    6346:	df 91       	pop	r29
    6348:	08 95       	ret

0000634a <IntToString>:

u8* IntToString(s32 anInteger,u8 *str){
    634a:	0f 93       	push	r16
    634c:	1f 93       	push	r17
    634e:	df 93       	push	r29
    6350:	cf 93       	push	r28
    6352:	cd b7       	in	r28, 0x3d	; 61
    6354:	de b7       	in	r29, 0x3e	; 62
    6356:	2e 97       	sbiw	r28, 0x0e	; 14
    6358:	0f b6       	in	r0, 0x3f	; 63
    635a:	f8 94       	cli
    635c:	de bf       	out	0x3e, r29	; 62
    635e:	0f be       	out	0x3f, r0	; 63
    6360:	cd bf       	out	0x3d, r28	; 61
    6362:	69 87       	std	Y+9, r22	; 0x09
    6364:	7a 87       	std	Y+10, r23	; 0x0a
    6366:	8b 87       	std	Y+11, r24	; 0x0b
    6368:	9c 87       	std	Y+12, r25	; 0x0c
    636a:	5e 87       	std	Y+14, r21	; 0x0e
    636c:	4d 87       	std	Y+13, r20	; 0x0d
	u32 flag = 0;
    636e:	1d 82       	std	Y+5, r1	; 0x05
    6370:	1e 82       	std	Y+6, r1	; 0x06
    6372:	1f 82       	std	Y+7, r1	; 0x07
    6374:	18 86       	std	Y+8, r1	; 0x08
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
    6376:	83 e1       	ldi	r24, 0x13	; 19
    6378:	90 e0       	ldi	r25, 0x00	; 0
    637a:	a0 e0       	ldi	r26, 0x00	; 0
    637c:	b0 e0       	ldi	r27, 0x00	; 0
    637e:	89 83       	std	Y+1, r24	; 0x01
    6380:	9a 83       	std	Y+2, r25	; 0x02
    6382:	ab 83       	std	Y+3, r26	; 0x03
    6384:	bc 83       	std	Y+4, r27	; 0x04
	str[i--] = '\0';
    6386:	29 81       	ldd	r18, Y+1	; 0x01
    6388:	3a 81       	ldd	r19, Y+2	; 0x02
    638a:	8d 85       	ldd	r24, Y+13	; 0x0d
    638c:	9e 85       	ldd	r25, Y+14	; 0x0e
    638e:	fc 01       	movw	r30, r24
    6390:	e2 0f       	add	r30, r18
    6392:	f3 1f       	adc	r31, r19
    6394:	10 82       	st	Z, r1
    6396:	89 81       	ldd	r24, Y+1	; 0x01
    6398:	9a 81       	ldd	r25, Y+2	; 0x02
    639a:	ab 81       	ldd	r26, Y+3	; 0x03
    639c:	bc 81       	ldd	r27, Y+4	; 0x04
    639e:	01 97       	sbiw	r24, 0x01	; 1
    63a0:	a1 09       	sbc	r26, r1
    63a2:	b1 09       	sbc	r27, r1
    63a4:	89 83       	std	Y+1, r24	; 0x01
    63a6:	9a 83       	std	Y+2, r25	; 0x02
    63a8:	ab 83       	std	Y+3, r26	; 0x03
    63aa:	bc 83       	std	Y+4, r27	; 0x04
	if (anInteger < 0) {
    63ac:	89 85       	ldd	r24, Y+9	; 0x09
    63ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    63b0:	ab 85       	ldd	r26, Y+11	; 0x0b
    63b2:	bc 85       	ldd	r27, Y+12	; 0x0c
    63b4:	bb 23       	and	r27, r27
    63b6:	0c f0       	brlt	.+2      	; 0x63ba <IntToString+0x70>
    63b8:	4d c0       	rjmp	.+154    	; 0x6454 <IntToString+0x10a>
		flag = 1;
    63ba:	81 e0       	ldi	r24, 0x01	; 1
    63bc:	90 e0       	ldi	r25, 0x00	; 0
    63be:	a0 e0       	ldi	r26, 0x00	; 0
    63c0:	b0 e0       	ldi	r27, 0x00	; 0
    63c2:	8d 83       	std	Y+5, r24	; 0x05
    63c4:	9e 83       	std	Y+6, r25	; 0x06
    63c6:	af 83       	std	Y+7, r26	; 0x07
    63c8:	b8 87       	std	Y+8, r27	; 0x08
		anInteger = -anInteger;
    63ca:	89 85       	ldd	r24, Y+9	; 0x09
    63cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    63ce:	ab 85       	ldd	r26, Y+11	; 0x0b
    63d0:	bc 85       	ldd	r27, Y+12	; 0x0c
    63d2:	b0 95       	com	r27
    63d4:	a0 95       	com	r26
    63d6:	90 95       	com	r25
    63d8:	81 95       	neg	r24
    63da:	9f 4f       	sbci	r25, 0xFF	; 255
    63dc:	af 4f       	sbci	r26, 0xFF	; 255
    63de:	bf 4f       	sbci	r27, 0xFF	; 255
    63e0:	89 87       	std	Y+9, r24	; 0x09
    63e2:	9a 87       	std	Y+10, r25	; 0x0a
    63e4:	ab 87       	std	Y+11, r26	; 0x0b
    63e6:	bc 87       	std	Y+12, r27	; 0x0c
    63e8:	35 c0       	rjmp	.+106    	; 0x6454 <IntToString+0x10a>
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
    63ea:	29 81       	ldd	r18, Y+1	; 0x01
    63ec:	3a 81       	ldd	r19, Y+2	; 0x02
    63ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    63f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    63f2:	8c 01       	movw	r16, r24
    63f4:	02 0f       	add	r16, r18
    63f6:	13 1f       	adc	r17, r19
    63f8:	89 85       	ldd	r24, Y+9	; 0x09
    63fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    63fc:	ab 85       	ldd	r26, Y+11	; 0x0b
    63fe:	bc 85       	ldd	r27, Y+12	; 0x0c
    6400:	2a e0       	ldi	r18, 0x0A	; 10
    6402:	30 e0       	ldi	r19, 0x00	; 0
    6404:	40 e0       	ldi	r20, 0x00	; 0
    6406:	50 e0       	ldi	r21, 0x00	; 0
    6408:	bc 01       	movw	r22, r24
    640a:	cd 01       	movw	r24, r26
    640c:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <__divmodsi4>
    6410:	dc 01       	movw	r26, r24
    6412:	cb 01       	movw	r24, r22
    6414:	80 5d       	subi	r24, 0xD0	; 208
    6416:	f8 01       	movw	r30, r16
    6418:	80 83       	st	Z, r24
    641a:	89 81       	ldd	r24, Y+1	; 0x01
    641c:	9a 81       	ldd	r25, Y+2	; 0x02
    641e:	ab 81       	ldd	r26, Y+3	; 0x03
    6420:	bc 81       	ldd	r27, Y+4	; 0x04
    6422:	01 97       	sbiw	r24, 0x01	; 1
    6424:	a1 09       	sbc	r26, r1
    6426:	b1 09       	sbc	r27, r1
    6428:	89 83       	std	Y+1, r24	; 0x01
    642a:	9a 83       	std	Y+2, r25	; 0x02
    642c:	ab 83       	std	Y+3, r26	; 0x03
    642e:	bc 83       	std	Y+4, r27	; 0x04
		anInteger /= 10;
    6430:	89 85       	ldd	r24, Y+9	; 0x09
    6432:	9a 85       	ldd	r25, Y+10	; 0x0a
    6434:	ab 85       	ldd	r26, Y+11	; 0x0b
    6436:	bc 85       	ldd	r27, Y+12	; 0x0c
    6438:	2a e0       	ldi	r18, 0x0A	; 10
    643a:	30 e0       	ldi	r19, 0x00	; 0
    643c:	40 e0       	ldi	r20, 0x00	; 0
    643e:	50 e0       	ldi	r21, 0x00	; 0
    6440:	bc 01       	movw	r22, r24
    6442:	cd 01       	movw	r24, r26
    6444:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <__divmodsi4>
    6448:	da 01       	movw	r26, r20
    644a:	c9 01       	movw	r24, r18
    644c:	89 87       	std	Y+9, r24	; 0x09
    644e:	9a 87       	std	Y+10, r25	; 0x0a
    6450:	ab 87       	std	Y+11, r26	; 0x0b
    6452:	bc 87       	std	Y+12, r27	; 0x0c
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
    6454:	89 85       	ldd	r24, Y+9	; 0x09
    6456:	9a 85       	ldd	r25, Y+10	; 0x0a
    6458:	ab 85       	ldd	r26, Y+11	; 0x0b
    645a:	bc 85       	ldd	r27, Y+12	; 0x0c
    645c:	00 97       	sbiw	r24, 0x00	; 0
    645e:	a1 05       	cpc	r26, r1
    6460:	b1 05       	cpc	r27, r1
    6462:	19 f6       	brne	.-122    	; 0x63ea <IntToString+0xa0>
		str[i--] = (anInteger % 10) + '0';
		anInteger /= 10;
	}
	if (flag){
    6464:	8d 81       	ldd	r24, Y+5	; 0x05
    6466:	9e 81       	ldd	r25, Y+6	; 0x06
    6468:	af 81       	ldd	r26, Y+7	; 0x07
    646a:	b8 85       	ldd	r27, Y+8	; 0x08
    646c:	00 97       	sbiw	r24, 0x00	; 0
    646e:	a1 05       	cpc	r26, r1
    6470:	b1 05       	cpc	r27, r1
    6472:	a1 f0       	breq	.+40     	; 0x649c <IntToString+0x152>
		str[i--] = '-';
    6474:	29 81       	ldd	r18, Y+1	; 0x01
    6476:	3a 81       	ldd	r19, Y+2	; 0x02
    6478:	8d 85       	ldd	r24, Y+13	; 0x0d
    647a:	9e 85       	ldd	r25, Y+14	; 0x0e
    647c:	fc 01       	movw	r30, r24
    647e:	e2 0f       	add	r30, r18
    6480:	f3 1f       	adc	r31, r19
    6482:	8d e2       	ldi	r24, 0x2D	; 45
    6484:	80 83       	st	Z, r24
    6486:	89 81       	ldd	r24, Y+1	; 0x01
    6488:	9a 81       	ldd	r25, Y+2	; 0x02
    648a:	ab 81       	ldd	r26, Y+3	; 0x03
    648c:	bc 81       	ldd	r27, Y+4	; 0x04
    648e:	01 97       	sbiw	r24, 0x01	; 1
    6490:	a1 09       	sbc	r26, r1
    6492:	b1 09       	sbc	r27, r1
    6494:	89 83       	std	Y+1, r24	; 0x01
    6496:	9a 83       	std	Y+2, r25	; 0x02
    6498:	ab 83       	std	Y+3, r26	; 0x03
    649a:	bc 83       	std	Y+4, r27	; 0x04
	}
	i++;
    649c:	89 81       	ldd	r24, Y+1	; 0x01
    649e:	9a 81       	ldd	r25, Y+2	; 0x02
    64a0:	ab 81       	ldd	r26, Y+3	; 0x03
    64a2:	bc 81       	ldd	r27, Y+4	; 0x04
    64a4:	01 96       	adiw	r24, 0x01	; 1
    64a6:	a1 1d       	adc	r26, r1
    64a8:	b1 1d       	adc	r27, r1
    64aa:	89 83       	std	Y+1, r24	; 0x01
    64ac:	9a 83       	std	Y+2, r25	; 0x02
    64ae:	ab 83       	std	Y+3, r26	; 0x03
    64b0:	bc 83       	std	Y+4, r27	; 0x04
	return str + i;
    64b2:	29 81       	ldd	r18, Y+1	; 0x01
    64b4:	3a 81       	ldd	r19, Y+2	; 0x02
    64b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    64b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    64ba:	82 0f       	add	r24, r18
    64bc:	93 1f       	adc	r25, r19

}
    64be:	2e 96       	adiw	r28, 0x0e	; 14
    64c0:	0f b6       	in	r0, 0x3f	; 63
    64c2:	f8 94       	cli
    64c4:	de bf       	out	0x3e, r29	; 62
    64c6:	0f be       	out	0x3f, r0	; 63
    64c8:	cd bf       	out	0x3d, r28	; 61
    64ca:	cf 91       	pop	r28
    64cc:	df 91       	pop	r29
    64ce:	1f 91       	pop	r17
    64d0:	0f 91       	pop	r16
    64d2:	08 95       	ret

000064d4 <LCD_voidWriteIntData>:

void LCD_voidWriteIntData(s32 Data){
    64d4:	df 93       	push	r29
    64d6:	cf 93       	push	r28
    64d8:	cd b7       	in	r28, 0x3d	; 61
    64da:	de b7       	in	r29, 0x3e	; 62
    64dc:	6a 97       	sbiw	r28, 0x1a	; 26
    64de:	0f b6       	in	r0, 0x3f	; 63
    64e0:	f8 94       	cli
    64e2:	de bf       	out	0x3e, r29	; 62
    64e4:	0f be       	out	0x3f, r0	; 63
    64e6:	cd bf       	out	0x3d, r28	; 61
    64e8:	6f 8b       	std	Y+23, r22	; 0x17
    64ea:	78 8f       	std	Y+24, r23	; 0x18
    64ec:	89 8f       	std	Y+25, r24	; 0x19
    64ee:	9a 8f       	std	Y+26, r25	; 0x1a
	if(Data){
    64f0:	8f 89       	ldd	r24, Y+23	; 0x17
    64f2:	98 8d       	ldd	r25, Y+24	; 0x18
    64f4:	a9 8d       	ldd	r26, Y+25	; 0x19
    64f6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    64f8:	00 97       	sbiw	r24, 0x00	; 0
    64fa:	a1 05       	cpc	r26, r1
    64fc:	b1 05       	cpc	r27, r1
    64fe:	99 f0       	breq	.+38     	; 0x6526 <LCD_voidWriteIntData+0x52>
		u8 arr[INT_TO_STRING_ARR_SIZE];
		u8 *str = IntToString(Data,arr);
    6500:	8f 89       	ldd	r24, Y+23	; 0x17
    6502:	98 8d       	ldd	r25, Y+24	; 0x18
    6504:	a9 8d       	ldd	r26, Y+25	; 0x19
    6506:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6508:	9e 01       	movw	r18, r28
    650a:	2d 5f       	subi	r18, 0xFD	; 253
    650c:	3f 4f       	sbci	r19, 0xFF	; 255
    650e:	bc 01       	movw	r22, r24
    6510:	cd 01       	movw	r24, r26
    6512:	a9 01       	movw	r20, r18
    6514:	0e 94 a5 31 	call	0x634a	; 0x634a <IntToString>
    6518:	9a 83       	std	Y+2, r25	; 0x02
    651a:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidWriteString(str);
    651c:	89 81       	ldd	r24, Y+1	; 0x01
    651e:	9a 81       	ldd	r25, Y+2	; 0x02
    6520:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <LCD_voidWriteString>
    6524:	03 c0       	rjmp	.+6      	; 0x652c <LCD_voidWriteIntData+0x58>
	}
	else{
		LCD_voidWriteChar('0');
    6526:	80 e3       	ldi	r24, 0x30	; 48
    6528:	0e 94 8c 30 	call	0x6118	; 0x6118 <LCD_voidWriteChar>
	}
}
    652c:	6a 96       	adiw	r28, 0x1a	; 26
    652e:	0f b6       	in	r0, 0x3f	; 63
    6530:	f8 94       	cli
    6532:	de bf       	out	0x3e, r29	; 62
    6534:	0f be       	out	0x3f, r0	; 63
    6536:	cd bf       	out	0x3d, r28	; 61
    6538:	cf 91       	pop	r28
    653a:	df 91       	pop	r29
    653c:	08 95       	ret

0000653e <LCD_voidWriteFloatData>:

void LCD_voidWriteFloatData(f32 Data){
    653e:	df 93       	push	r29
    6540:	cf 93       	push	r28
    6542:	cd b7       	in	r28, 0x3d	; 61
    6544:	de b7       	in	r29, 0x3e	; 62
    6546:	a6 97       	sbiw	r28, 0x26	; 38
    6548:	0f b6       	in	r0, 0x3f	; 63
    654a:	f8 94       	cli
    654c:	de bf       	out	0x3e, r29	; 62
    654e:	0f be       	out	0x3f, r0	; 63
    6550:	cd bf       	out	0x3d, r28	; 61
    6552:	6b a3       	std	Y+35, r22	; 0x23
    6554:	7c a3       	std	Y+36, r23	; 0x24
    6556:	8d a3       	std	Y+37, r24	; 0x25
    6558:	9e a3       	std	Y+38, r25	; 0x26
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
    655a:	6b a1       	ldd	r22, Y+35	; 0x23
    655c:	7c a1       	ldd	r23, Y+36	; 0x24
    655e:	8d a1       	ldd	r24, Y+37	; 0x25
    6560:	9e a1       	ldd	r25, Y+38	; 0x26
    6562:	20 e0       	ldi	r18, 0x00	; 0
    6564:	30 e0       	ldi	r19, 0x00	; 0
    6566:	48 ec       	ldi	r20, 0xC8	; 200
    6568:	52 e4       	ldi	r21, 0x42	; 66
    656a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    656e:	dc 01       	movw	r26, r24
    6570:	cb 01       	movw	r24, r22
    6572:	bc 01       	movw	r22, r24
    6574:	cd 01       	movw	r24, r26
    6576:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    657a:	dc 01       	movw	r26, r24
    657c:	cb 01       	movw	r24, r22
    657e:	8b 87       	std	Y+11, r24	; 0x0b
    6580:	9c 87       	std	Y+12, r25	; 0x0c
    6582:	ad 87       	std	Y+13, r26	; 0x0d
    6584:	be 87       	std	Y+14, r27	; 0x0e
	u8 *str = IntToString(number,arr);
    6586:	8b 85       	ldd	r24, Y+11	; 0x0b
    6588:	9c 85       	ldd	r25, Y+12	; 0x0c
    658a:	ad 85       	ldd	r26, Y+13	; 0x0d
    658c:	be 85       	ldd	r27, Y+14	; 0x0e
    658e:	9e 01       	movw	r18, r28
    6590:	21 5f       	subi	r18, 0xF1	; 241
    6592:	3f 4f       	sbci	r19, 0xFF	; 255
    6594:	bc 01       	movw	r22, r24
    6596:	cd 01       	movw	r24, r26
    6598:	a9 01       	movw	r20, r18
    659a:	0e 94 a5 31 	call	0x634a	; 0x634a <IntToString>
    659e:	9a 87       	std	Y+10, r25	; 0x0a
    65a0:	89 87       	std	Y+9, r24	; 0x09
	u32 counter=0;
    65a2:	1d 82       	std	Y+5, r1	; 0x05
    65a4:	1e 82       	std	Y+6, r1	; 0x06
    65a6:	1f 82       	std	Y+7, r1	; 0x07
    65a8:	18 86       	std	Y+8, r1	; 0x08
	u32 counter2=0;
    65aa:	19 82       	std	Y+1, r1	; 0x01
    65ac:	1a 82       	std	Y+2, r1	; 0x02
    65ae:	1b 82       	std	Y+3, r1	; 0x03
    65b0:	1c 82       	std	Y+4, r1	; 0x04
    65b2:	0b c0       	rjmp	.+22     	; 0x65ca <LCD_voidWriteFloatData+0x8c>
	while(str[counter] != '\0'){
		counter++;
    65b4:	8d 81       	ldd	r24, Y+5	; 0x05
    65b6:	9e 81       	ldd	r25, Y+6	; 0x06
    65b8:	af 81       	ldd	r26, Y+7	; 0x07
    65ba:	b8 85       	ldd	r27, Y+8	; 0x08
    65bc:	01 96       	adiw	r24, 0x01	; 1
    65be:	a1 1d       	adc	r26, r1
    65c0:	b1 1d       	adc	r27, r1
    65c2:	8d 83       	std	Y+5, r24	; 0x05
    65c4:	9e 83       	std	Y+6, r25	; 0x06
    65c6:	af 83       	std	Y+7, r26	; 0x07
    65c8:	b8 87       	std	Y+8, r27	; 0x08
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
	u8 *str = IntToString(number,arr);
	u32 counter=0;
	u32 counter2=0;
	while(str[counter] != '\0'){
    65ca:	2d 81       	ldd	r18, Y+5	; 0x05
    65cc:	3e 81       	ldd	r19, Y+6	; 0x06
    65ce:	89 85       	ldd	r24, Y+9	; 0x09
    65d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    65d2:	fc 01       	movw	r30, r24
    65d4:	e2 0f       	add	r30, r18
    65d6:	f3 1f       	adc	r31, r19
    65d8:	80 81       	ld	r24, Z
    65da:	88 23       	and	r24, r24
    65dc:	59 f7       	brne	.-42     	; 0x65b4 <LCD_voidWriteFloatData+0x76>
		counter++;
	}
	counter -= 2;
    65de:	8d 81       	ldd	r24, Y+5	; 0x05
    65e0:	9e 81       	ldd	r25, Y+6	; 0x06
    65e2:	af 81       	ldd	r26, Y+7	; 0x07
    65e4:	b8 85       	ldd	r27, Y+8	; 0x08
    65e6:	02 97       	sbiw	r24, 0x02	; 2
    65e8:	a1 09       	sbc	r26, r1
    65ea:	b1 09       	sbc	r27, r1
    65ec:	8d 83       	std	Y+5, r24	; 0x05
    65ee:	9e 83       	std	Y+6, r25	; 0x06
    65f0:	af 83       	std	Y+7, r26	; 0x07
    65f2:	b8 87       	std	Y+8, r27	; 0x08
	if(!counter){
    65f4:	8d 81       	ldd	r24, Y+5	; 0x05
    65f6:	9e 81       	ldd	r25, Y+6	; 0x06
    65f8:	af 81       	ldd	r26, Y+7	; 0x07
    65fa:	b8 85       	ldd	r27, Y+8	; 0x08
    65fc:	00 97       	sbiw	r24, 0x00	; 0
    65fe:	a1 05       	cpc	r26, r1
    6600:	b1 05       	cpc	r27, r1
    6602:	49 f5       	brne	.+82     	; 0x6656 <LCD_voidWriteFloatData+0x118>
		LCD_voidWriteChar('0');
    6604:	80 e3       	ldi	r24, 0x30	; 48
    6606:	0e 94 8c 30 	call	0x6118	; 0x6118 <LCD_voidWriteChar>
    660a:	25 c0       	rjmp	.+74     	; 0x6656 <LCD_voidWriteFloatData+0x118>
	}
	while(str[counter2] != '\0'){
		if(counter2 == counter){
    660c:	29 81       	ldd	r18, Y+1	; 0x01
    660e:	3a 81       	ldd	r19, Y+2	; 0x02
    6610:	4b 81       	ldd	r20, Y+3	; 0x03
    6612:	5c 81       	ldd	r21, Y+4	; 0x04
    6614:	8d 81       	ldd	r24, Y+5	; 0x05
    6616:	9e 81       	ldd	r25, Y+6	; 0x06
    6618:	af 81       	ldd	r26, Y+7	; 0x07
    661a:	b8 85       	ldd	r27, Y+8	; 0x08
    661c:	28 17       	cp	r18, r24
    661e:	39 07       	cpc	r19, r25
    6620:	4a 07       	cpc	r20, r26
    6622:	5b 07       	cpc	r21, r27
    6624:	19 f4       	brne	.+6      	; 0x662c <LCD_voidWriteFloatData+0xee>
			LCD_voidWriteChar('.');
    6626:	8e e2       	ldi	r24, 0x2E	; 46
    6628:	0e 94 8c 30 	call	0x6118	; 0x6118 <LCD_voidWriteChar>
		}
		LCD_voidWriteChar(str[counter2]);
    662c:	29 81       	ldd	r18, Y+1	; 0x01
    662e:	3a 81       	ldd	r19, Y+2	; 0x02
    6630:	89 85       	ldd	r24, Y+9	; 0x09
    6632:	9a 85       	ldd	r25, Y+10	; 0x0a
    6634:	fc 01       	movw	r30, r24
    6636:	e2 0f       	add	r30, r18
    6638:	f3 1f       	adc	r31, r19
    663a:	80 81       	ld	r24, Z
    663c:	0e 94 8c 30 	call	0x6118	; 0x6118 <LCD_voidWriteChar>
		counter2++;
    6640:	89 81       	ldd	r24, Y+1	; 0x01
    6642:	9a 81       	ldd	r25, Y+2	; 0x02
    6644:	ab 81       	ldd	r26, Y+3	; 0x03
    6646:	bc 81       	ldd	r27, Y+4	; 0x04
    6648:	01 96       	adiw	r24, 0x01	; 1
    664a:	a1 1d       	adc	r26, r1
    664c:	b1 1d       	adc	r27, r1
    664e:	89 83       	std	Y+1, r24	; 0x01
    6650:	9a 83       	std	Y+2, r25	; 0x02
    6652:	ab 83       	std	Y+3, r26	; 0x03
    6654:	bc 83       	std	Y+4, r27	; 0x04
	}
	counter -= 2;
	if(!counter){
		LCD_voidWriteChar('0');
	}
	while(str[counter2] != '\0'){
    6656:	29 81       	ldd	r18, Y+1	; 0x01
    6658:	3a 81       	ldd	r19, Y+2	; 0x02
    665a:	89 85       	ldd	r24, Y+9	; 0x09
    665c:	9a 85       	ldd	r25, Y+10	; 0x0a
    665e:	fc 01       	movw	r30, r24
    6660:	e2 0f       	add	r30, r18
    6662:	f3 1f       	adc	r31, r19
    6664:	80 81       	ld	r24, Z
    6666:	88 23       	and	r24, r24
    6668:	89 f6       	brne	.-94     	; 0x660c <LCD_voidWriteFloatData+0xce>
			LCD_voidWriteChar('.');
		}
		LCD_voidWriteChar(str[counter2]);
		counter2++;
	}
}
    666a:	a6 96       	adiw	r28, 0x26	; 38
    666c:	0f b6       	in	r0, 0x3f	; 63
    666e:	f8 94       	cli
    6670:	de bf       	out	0x3e, r29	; 62
    6672:	0f be       	out	0x3f, r0	; 63
    6674:	cd bf       	out	0x3d, r28	; 61
    6676:	cf 91       	pop	r28
    6678:	df 91       	pop	r29
    667a:	08 95       	ret

0000667c <LCD_voidGoToPosition>:

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
    667c:	df 93       	push	r29
    667e:	cf 93       	push	r28
    6680:	00 d0       	rcall	.+0      	; 0x6682 <LCD_voidGoToPosition+0x6>
    6682:	0f 92       	push	r0
    6684:	cd b7       	in	r28, 0x3d	; 61
    6686:	de b7       	in	r29, 0x3e	; 62
    6688:	8a 83       	std	Y+2, r24	; 0x02
    668a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = FIRST_LINE_ADDRESS;
    668c:	80 e8       	ldi	r24, 0x80	; 128
    668e:	89 83       	std	Y+1, r24	; 0x01

	if(X_Position == 0){
    6690:	8a 81       	ldd	r24, Y+2	; 0x02
    6692:	88 23       	and	r24, r24
    6694:	21 f4       	brne	.+8      	; 0x669e <LCD_voidGoToPosition+0x22>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
    6696:	8b 81       	ldd	r24, Y+3	; 0x03
    6698:	80 58       	subi	r24, 0x80	; 128
    669a:	89 83       	std	Y+1, r24	; 0x01
    669c:	14 c0       	rjmp	.+40     	; 0x66c6 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 1){
    669e:	8a 81       	ldd	r24, Y+2	; 0x02
    66a0:	81 30       	cpi	r24, 0x01	; 1
    66a2:	21 f4       	brne	.+8      	; 0x66ac <LCD_voidGoToPosition+0x30>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
    66a4:	8b 81       	ldd	r24, Y+3	; 0x03
    66a6:	80 54       	subi	r24, 0x40	; 64
    66a8:	89 83       	std	Y+1, r24	; 0x01
    66aa:	0d c0       	rjmp	.+26     	; 0x66c6 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 2){
    66ac:	8a 81       	ldd	r24, Y+2	; 0x02
    66ae:	82 30       	cpi	r24, 0x02	; 2
    66b0:	21 f4       	brne	.+8      	; 0x66ba <LCD_voidGoToPosition+0x3e>
		Local_Address = THIRD_LINE_ADDRESS + Y_Position;
    66b2:	8b 81       	ldd	r24, Y+3	; 0x03
    66b4:	8c 56       	subi	r24, 0x6C	; 108
    66b6:	89 83       	std	Y+1, r24	; 0x01
    66b8:	06 c0       	rjmp	.+12     	; 0x66c6 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 3){
    66ba:	8a 81       	ldd	r24, Y+2	; 0x02
    66bc:	83 30       	cpi	r24, 0x03	; 3
    66be:	19 f4       	brne	.+6      	; 0x66c6 <LCD_voidGoToPosition+0x4a>
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
    66c0:	8b 81       	ldd	r24, Y+3	; 0x03
    66c2:	8c 52       	subi	r24, 0x2C	; 44
    66c4:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
    66c6:	89 81       	ldd	r24, Y+1	; 0x01
    66c8:	80 68       	ori	r24, 0x80	; 128
    66ca:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(Local_Address);
    66cc:	89 81       	ldd	r24, Y+1	; 0x01
    66ce:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <LCD_voidSendCommand>
}
    66d2:	0f 90       	pop	r0
    66d4:	0f 90       	pop	r0
    66d6:	0f 90       	pop	r0
    66d8:	cf 91       	pop	r28
    66da:	df 91       	pop	r29
    66dc:	08 95       	ret

000066de <LCD_voidClearPosition>:

void LCD_voidClearPosition(u8 X_Position, u8 Y_Position){
    66de:	df 93       	push	r29
    66e0:	cf 93       	push	r28
    66e2:	00 d0       	rcall	.+0      	; 0x66e4 <LCD_voidClearPosition+0x6>
    66e4:	cd b7       	in	r28, 0x3d	; 61
    66e6:	de b7       	in	r29, 0x3e	; 62
    66e8:	89 83       	std	Y+1, r24	; 0x01
    66ea:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidGoToPosition(X_Position, Y_Position);
    66ec:	89 81       	ldd	r24, Y+1	; 0x01
    66ee:	6a 81       	ldd	r22, Y+2	; 0x02
    66f0:	0e 94 3e 33 	call	0x667c	; 0x667c <LCD_voidGoToPosition>
	LCD_voidWriteChar(' ');
    66f4:	80 e2       	ldi	r24, 0x20	; 32
    66f6:	0e 94 8c 30 	call	0x6118	; 0x6118 <LCD_voidWriteChar>
}
    66fa:	0f 90       	pop	r0
    66fc:	0f 90       	pop	r0
    66fe:	cf 91       	pop	r28
    6700:	df 91       	pop	r29
    6702:	08 95       	ret

00006704 <LCD_voidClearLine>:

void LCD_voidClearLine(u8 X_Position){
    6704:	df 93       	push	r29
    6706:	cf 93       	push	r28
    6708:	00 d0       	rcall	.+0      	; 0x670a <LCD_voidClearLine+0x6>
    670a:	cd b7       	in	r28, 0x3d	; 61
    670c:	de b7       	in	r29, 0x3e	; 62
    670e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Y_Position = 0;
    6710:	19 82       	std	Y+1, r1	; 0x01
    6712:	07 c0       	rjmp	.+14     	; 0x6722 <LCD_voidClearLine+0x1e>
	while(Y_Position <20){
		LCD_voidClearPosition(X_Position,Y_Position);
    6714:	8a 81       	ldd	r24, Y+2	; 0x02
    6716:	69 81       	ldd	r22, Y+1	; 0x01
    6718:	0e 94 6f 33 	call	0x66de	; 0x66de <LCD_voidClearPosition>
		Y_Position++;
    671c:	89 81       	ldd	r24, Y+1	; 0x01
    671e:	8f 5f       	subi	r24, 0xFF	; 255
    6720:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidWriteChar(' ');
}

void LCD_voidClearLine(u8 X_Position){
	u8 Y_Position = 0;
	while(Y_Position <20){
    6722:	89 81       	ldd	r24, Y+1	; 0x01
    6724:	84 31       	cpi	r24, 0x14	; 20
    6726:	b0 f3       	brcs	.-20     	; 0x6714 <LCD_voidClearLine+0x10>
		LCD_voidClearPosition(X_Position,Y_Position);
		Y_Position++;
	}
}
    6728:	0f 90       	pop	r0
    672a:	0f 90       	pop	r0
    672c:	cf 91       	pop	r28
    672e:	df 91       	pop	r29
    6730:	08 95       	ret

00006732 <LCD_voidDisplaySpecialChar>:

void LCD_voidDisplaySpecialChar(u8 *char_ptr,u8 CGRam_index,u8 row,u8 column){
    6732:	df 93       	push	r29
    6734:	cf 93       	push	r28
    6736:	cd b7       	in	r28, 0x3d	; 61
    6738:	de b7       	in	r29, 0x3e	; 62
    673a:	27 97       	sbiw	r28, 0x07	; 7
    673c:	0f b6       	in	r0, 0x3f	; 63
    673e:	f8 94       	cli
    6740:	de bf       	out	0x3e, r29	; 62
    6742:	0f be       	out	0x3f, r0	; 63
    6744:	cd bf       	out	0x3d, r28	; 61
    6746:	9c 83       	std	Y+4, r25	; 0x04
    6748:	8b 83       	std	Y+3, r24	; 0x03
    674a:	6d 83       	std	Y+5, r22	; 0x05
    674c:	4e 83       	std	Y+6, r20	; 0x06
    674e:	2f 83       	std	Y+7, r18	; 0x07
	LCD_voidGoToPosition(row,column);
    6750:	8e 81       	ldd	r24, Y+6	; 0x06
    6752:	6f 81       	ldd	r22, Y+7	; 0x07
    6754:	0e 94 3e 33 	call	0x667c	; 0x667c <LCD_voidGoToPosition>
	LCD_voidWriteChar(CGRam_index);
    6758:	8d 81       	ldd	r24, Y+5	; 0x05
    675a:	0e 94 8c 30 	call	0x6118	; 0x6118 <LCD_voidWriteChar>
	u8 address = 0;
    675e:	1a 82       	std	Y+2, r1	; 0x02
	u8 index = 0;
    6760:	19 82       	std	Y+1, r1	; 0x01
	if(CGRam_index < 8){
    6762:	8d 81       	ldd	r24, Y+5	; 0x05
    6764:	88 30       	cpi	r24, 0x08	; 8
    6766:	30 f5       	brcc	.+76     	; 0x67b4 <LCD_voidDisplaySpecialChar+0x82>
		address = CGRam_index * 8;
    6768:	8d 81       	ldd	r24, Y+5	; 0x05
    676a:	88 2f       	mov	r24, r24
    676c:	90 e0       	ldi	r25, 0x00	; 0
    676e:	88 0f       	add	r24, r24
    6770:	99 1f       	adc	r25, r25
    6772:	88 0f       	add	r24, r24
    6774:	99 1f       	adc	r25, r25
    6776:	88 0f       	add	r24, r24
    6778:	99 1f       	adc	r25, r25
    677a:	8a 83       	std	Y+2, r24	; 0x02
		SET_BIT(address,6);
    677c:	8a 81       	ldd	r24, Y+2	; 0x02
    677e:	80 64       	ori	r24, 0x40	; 64
    6780:	8a 83       	std	Y+2, r24	; 0x02
		CLR_BIT(address,7);
    6782:	8a 81       	ldd	r24, Y+2	; 0x02
    6784:	8f 77       	andi	r24, 0x7F	; 127
    6786:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendCommand(address);
    6788:	8a 81       	ldd	r24, Y+2	; 0x02
    678a:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <LCD_voidSendCommand>
		for(index = 0; index < 8; index++){
    678e:	19 82       	std	Y+1, r1	; 0x01
    6790:	0e c0       	rjmp	.+28     	; 0x67ae <LCD_voidDisplaySpecialChar+0x7c>
			LCD_voidWriteChar(char_ptr[index]);
    6792:	89 81       	ldd	r24, Y+1	; 0x01
    6794:	28 2f       	mov	r18, r24
    6796:	30 e0       	ldi	r19, 0x00	; 0
    6798:	8b 81       	ldd	r24, Y+3	; 0x03
    679a:	9c 81       	ldd	r25, Y+4	; 0x04
    679c:	fc 01       	movw	r30, r24
    679e:	e2 0f       	add	r30, r18
    67a0:	f3 1f       	adc	r31, r19
    67a2:	80 81       	ld	r24, Z
    67a4:	0e 94 8c 30 	call	0x6118	; 0x6118 <LCD_voidWriteChar>
	if(CGRam_index < 8){
		address = CGRam_index * 8;
		SET_BIT(address,6);
		CLR_BIT(address,7);
		LCD_voidSendCommand(address);
		for(index = 0; index < 8; index++){
    67a8:	89 81       	ldd	r24, Y+1	; 0x01
    67aa:	8f 5f       	subi	r24, 0xFF	; 255
    67ac:	89 83       	std	Y+1, r24	; 0x01
    67ae:	89 81       	ldd	r24, Y+1	; 0x01
    67b0:	88 30       	cpi	r24, 0x08	; 8
    67b2:	78 f3       	brcs	.-34     	; 0x6792 <LCD_voidDisplaySpecialChar+0x60>
			LCD_voidWriteChar(char_ptr[index]);
		}
	}
	LCD_voidSendCommand(LCD_ReturnHome);
    67b4:	82 e0       	ldi	r24, 0x02	; 2
    67b6:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <LCD_voidSendCommand>
}
    67ba:	27 96       	adiw	r28, 0x07	; 7
    67bc:	0f b6       	in	r0, 0x3f	; 63
    67be:	f8 94       	cli
    67c0:	de bf       	out	0x3e, r29	; 62
    67c2:	0f be       	out	0x3f, r0	; 63
    67c4:	cd bf       	out	0x3d, r28	; 61
    67c6:	cf 91       	pop	r28
    67c8:	df 91       	pop	r29
    67ca:	08 95       	ret

000067cc <KPD_u8GetPressedKey>:
 */
#include "../../../Library/STD_types.h"
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "../Header/Keypad_Interface.h"

u8 KPD_u8GetPressedKey(){
    67cc:	df 93       	push	r29
    67ce:	cf 93       	push	r28
    67d0:	cd b7       	in	r28, 0x3d	; 61
    67d2:	de b7       	in	r29, 0x3e	; 62
    67d4:	a1 97       	sbiw	r28, 0x21	; 33
    67d6:	0f b6       	in	r0, 0x3f	; 63
    67d8:	f8 94       	cli
    67da:	de bf       	out	0x3e, r29	; 62
    67dc:	0f be       	out	0x3f, r0	; 63
    67de:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = NO_PRESSED_KEY;
    67e0:	8f ef       	ldi	r24, 0xFF	; 255
    67e2:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
    67e4:	ce 01       	movw	r24, r28
    67e6:	04 96       	adiw	r24, 0x04	; 4
    67e8:	9e 8f       	std	Y+30, r25	; 0x1e
    67ea:	8d 8f       	std	Y+29, r24	; 0x1d
    67ec:	e9 eb       	ldi	r30, 0xB9	; 185
    67ee:	f1 e0       	ldi	r31, 0x01	; 1
    67f0:	f8 a3       	std	Y+32, r31	; 0x20
    67f2:	ef 8f       	std	Y+31, r30	; 0x1f
    67f4:	f0 e1       	ldi	r31, 0x10	; 16
    67f6:	f9 a3       	std	Y+33, r31	; 0x21
    67f8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    67fa:	f8 a1       	ldd	r31, Y+32	; 0x20
    67fc:	00 80       	ld	r0, Z
    67fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6800:	98 a1       	ldd	r25, Y+32	; 0x20
    6802:	01 96       	adiw	r24, 0x01	; 1
    6804:	98 a3       	std	Y+32, r25	; 0x20
    6806:	8f 8f       	std	Y+31, r24	; 0x1f
    6808:	ed 8d       	ldd	r30, Y+29	; 0x1d
    680a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    680c:	00 82       	st	Z, r0
    680e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6810:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6812:	01 96       	adiw	r24, 0x01	; 1
    6814:	9e 8f       	std	Y+30, r25	; 0x1e
    6816:	8d 8f       	std	Y+29, r24	; 0x1d
    6818:	99 a1       	ldd	r25, Y+33	; 0x21
    681a:	91 50       	subi	r25, 0x01	; 1
    681c:	99 a3       	std	Y+33, r25	; 0x21
    681e:	e9 a1       	ldd	r30, Y+33	; 0x21
    6820:	ee 23       	and	r30, r30
    6822:	51 f7       	brne	.-44     	; 0x67f8 <KPD_u8GetPressedKey+0x2c>
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
    6824:	87 e0       	ldi	r24, 0x07	; 7
    6826:	8c 8b       	std	Y+20, r24	; 0x14
    6828:	86 e0       	ldi	r24, 0x06	; 6
    682a:	8d 8b       	std	Y+21, r24	; 0x15
    682c:	85 e0       	ldi	r24, 0x05	; 5
    682e:	8e 8b       	std	Y+22, r24	; 0x16
    6830:	83 e0       	ldi	r24, 0x03	; 3
    6832:	8f 8b       	std	Y+23, r24	; 0x17
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    6834:	85 e0       	ldi	r24, 0x05	; 5
    6836:	88 8f       	std	Y+24, r24	; 0x18
    6838:	84 e0       	ldi	r24, 0x04	; 4
    683a:	89 8f       	std	Y+25, r24	; 0x19
    683c:	83 e0       	ldi	r24, 0x03	; 3
    683e:	8a 8f       	std	Y+26, r24	; 0x1a
    6840:	82 e0       	ldi	r24, 0x02	; 2
    6842:	8b 8f       	std	Y+27, r24	; 0x1b
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
    6844:	1a 82       	std	Y+2, r1	; 0x02
    6846:	6b c0       	rjmp	.+214    	; 0x691e <KPD_u8GetPressedKey+0x152>
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);
    6848:	8a 81       	ldd	r24, Y+2	; 0x02
    684a:	28 2f       	mov	r18, r24
    684c:	30 e0       	ldi	r19, 0x00	; 0
    684e:	ce 01       	movw	r24, r28
    6850:	44 96       	adiw	r24, 0x14	; 20
    6852:	fc 01       	movw	r30, r24
    6854:	e2 0f       	add	r30, r18
    6856:	f3 1f       	adc	r31, r19
    6858:	90 81       	ld	r25, Z
    685a:	84 e0       	ldi	r24, 0x04	; 4
    685c:	69 2f       	mov	r22, r25
    685e:	40 e0       	ldi	r20, 0x00	; 0
    6860:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
    6864:	19 82       	std	Y+1, r1	; 0x01
    6866:	46 c0       	rjmp	.+140    	; 0x68f4 <KPD_u8GetPressedKey+0x128>
			if(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
    6868:	89 81       	ldd	r24, Y+1	; 0x01
    686a:	28 2f       	mov	r18, r24
    686c:	30 e0       	ldi	r19, 0x00	; 0
    686e:	ce 01       	movw	r24, r28
    6870:	48 96       	adiw	r24, 0x18	; 24
    6872:	fc 01       	movw	r30, r24
    6874:	e2 0f       	add	r30, r18
    6876:	f3 1f       	adc	r31, r19
    6878:	90 81       	ld	r25, Z
    687a:	83 e0       	ldi	r24, 0x03	; 3
    687c:	69 2f       	mov	r22, r25
    687e:	0e 94 58 19 	call	0x32b0	; 0x32b0 <DIO_u8GetPinValue>
    6882:	88 23       	and	r24, r24
    6884:	a1 f5       	brne	.+104    	; 0x68ee <KPD_u8GetPressedKey+0x122>
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIndex][Local_u8ColIndex];
    6886:	89 81       	ldd	r24, Y+1	; 0x01
    6888:	28 2f       	mov	r18, r24
    688a:	30 e0       	ldi	r19, 0x00	; 0
    688c:	8a 81       	ldd	r24, Y+2	; 0x02
    688e:	48 2f       	mov	r20, r24
    6890:	50 e0       	ldi	r21, 0x00	; 0
    6892:	22 0f       	add	r18, r18
    6894:	33 1f       	adc	r19, r19
    6896:	22 0f       	add	r18, r18
    6898:	33 1f       	adc	r19, r19
    689a:	ce 01       	movw	r24, r28
    689c:	01 96       	adiw	r24, 0x01	; 1
    689e:	82 0f       	add	r24, r18
    68a0:	93 1f       	adc	r25, r19
    68a2:	84 0f       	add	r24, r20
    68a4:	95 1f       	adc	r25, r21
    68a6:	fc 01       	movw	r30, r24
    68a8:	33 96       	adiw	r30, 0x03	; 3
    68aa:	80 81       	ld	r24, Z
    68ac:	8b 83       	std	Y+3, r24	; 0x03
				while(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
    68ae:	89 81       	ldd	r24, Y+1	; 0x01
    68b0:	28 2f       	mov	r18, r24
    68b2:	30 e0       	ldi	r19, 0x00	; 0
    68b4:	ce 01       	movw	r24, r28
    68b6:	48 96       	adiw	r24, 0x18	; 24
    68b8:	fc 01       	movw	r30, r24
    68ba:	e2 0f       	add	r30, r18
    68bc:	f3 1f       	adc	r31, r19
    68be:	90 81       	ld	r25, Z
    68c0:	83 e0       	ldi	r24, 0x03	; 3
    68c2:	69 2f       	mov	r22, r25
    68c4:	0e 94 58 19 	call	0x32b0	; 0x32b0 <DIO_u8GetPinValue>
    68c8:	88 23       	and	r24, r24
    68ca:	89 f3       	breq	.-30     	; 0x68ae <KPD_u8GetPressedKey+0xe2>

				}
				DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
    68cc:	8a 81       	ldd	r24, Y+2	; 0x02
    68ce:	28 2f       	mov	r18, r24
    68d0:	30 e0       	ldi	r19, 0x00	; 0
    68d2:	ce 01       	movw	r24, r28
    68d4:	44 96       	adiw	r24, 0x14	; 20
    68d6:	fc 01       	movw	r30, r24
    68d8:	e2 0f       	add	r30, r18
    68da:	f3 1f       	adc	r31, r19
    68dc:	90 81       	ld	r25, Z
    68de:	84 e0       	ldi	r24, 0x04	; 4
    68e0:	69 2f       	mov	r22, r25
    68e2:	41 e0       	ldi	r20, 0x01	; 1
    68e4:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
				return Local_u8PressedKey;
    68e8:	fb 81       	ldd	r31, Y+3	; 0x03
    68ea:	fc 8f       	std	Y+28, r31	; 0x1c
    68ec:	1e c0       	rjmp	.+60     	; 0x692a <KPD_u8GetPressedKey+0x15e>
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
    68ee:	89 81       	ldd	r24, Y+1	; 0x01
    68f0:	8f 5f       	subi	r24, 0xFF	; 255
    68f2:	89 83       	std	Y+1, r24	; 0x01
    68f4:	89 81       	ldd	r24, Y+1	; 0x01
    68f6:	84 30       	cpi	r24, 0x04	; 4
    68f8:	08 f4       	brcc	.+2      	; 0x68fc <KPD_u8GetPressedKey+0x130>
    68fa:	b6 cf       	rjmp	.-148    	; 0x6868 <KPD_u8GetPressedKey+0x9c>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
    68fc:	8a 81       	ldd	r24, Y+2	; 0x02
    68fe:	28 2f       	mov	r18, r24
    6900:	30 e0       	ldi	r19, 0x00	; 0
    6902:	ce 01       	movw	r24, r28
    6904:	44 96       	adiw	r24, 0x14	; 20
    6906:	fc 01       	movw	r30, r24
    6908:	e2 0f       	add	r30, r18
    690a:	f3 1f       	adc	r31, r19
    690c:	90 81       	ld	r25, Z
    690e:	84 e0       	ldi	r24, 0x04	; 4
    6910:	69 2f       	mov	r22, r25
    6912:	41 e0       	ldi	r20, 0x01	; 1
    6914:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
    6918:	8a 81       	ldd	r24, Y+2	; 0x02
    691a:	8f 5f       	subi	r24, 0xFF	; 255
    691c:	8a 83       	std	Y+2, r24	; 0x02
    691e:	8a 81       	ldd	r24, Y+2	; 0x02
    6920:	84 30       	cpi	r24, 0x04	; 4
    6922:	08 f4       	brcc	.+2      	; 0x6926 <KPD_u8GetPressedKey+0x15a>
    6924:	91 cf       	rjmp	.-222    	; 0x6848 <KPD_u8GetPressedKey+0x7c>

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);

	}
	return Local_u8PressedKey;
    6926:	8b 81       	ldd	r24, Y+3	; 0x03
    6928:	8c 8f       	std	Y+28, r24	; 0x1c
    692a:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    692c:	a1 96       	adiw	r28, 0x21	; 33
    692e:	0f b6       	in	r0, 0x3f	; 63
    6930:	f8 94       	cli
    6932:	de bf       	out	0x3e, r29	; 62
    6934:	0f be       	out	0x3f, r0	; 63
    6936:	cd bf       	out	0x3d, r28	; 61
    6938:	cf 91       	pop	r28
    693a:	df 91       	pop	r29
    693c:	08 95       	ret

0000693e <main>:
u8 SLAVE_ADDRESS = 0xA0;
u8 REG_ADDRESS = 0;
u8* slave_ptr = &SLAVE_ADDRESS;
u8* reg_ptr = &REG_ADDRESS;

int main(){
    693e:	ef 92       	push	r14
    6940:	0f 93       	push	r16
    6942:	1f 93       	push	r17
    6944:	df 93       	push	r29
    6946:	cf 93       	push	r28
    6948:	cd b7       	in	r28, 0x3d	; 61
    694a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
    694c:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <DIO_voidInit>
	DIO_voidSetPinValue(DIO_PortB,DIO_PIN4,High);
    6950:	82 e0       	ldi	r24, 0x02	; 2
    6952:	64 e0       	ldi	r22, 0x04	; 4
    6954:	41 e0       	ldi	r20, 0x01	; 1
    6956:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PortC,DIO_PIN0,High);
    695a:	83 e0       	ldi	r24, 0x03	; 3
    695c:	60 e0       	ldi	r22, 0x00	; 0
    695e:	41 e0       	ldi	r20, 0x01	; 1
    6960:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PortC,DIO_PIN1,High);
    6964:	83 e0       	ldi	r24, 0x03	; 3
    6966:	61 e0       	ldi	r22, 0x01	; 1
    6968:	41 e0       	ldi	r20, 0x01	; 1
    696a:	0e 94 4a 18 	call	0x3094	; 0x3094 <DIO_voidSetPinValue>
	LCD_voidInit();
    696e:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <LCD_voidInit>
	TMR0_voidInit();
    6972:	0e 94 b3 10 	call	0x2166	; 0x2166 <TMR0_voidInit>
	BCM_voidInit();
    6976:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <BCM_voidInit>
	while(1){
		global_index = 0;
    697a:	10 92 cc 05 	sts	0x05CC, r1
		REG_ADDRESS = 0;
    697e:	10 92 cd 05 	sts	0x05CD, r1
    6982:	52 c0       	rjmp	.+164    	; 0x6a28 <main+0xea>
		while(name[global_index] != '\0'){
			BCM_voidAddToQueue(name[global_index],USART, TXC_Complete, NULL, NULL, SPECIFIC);
    6984:	80 91 cc 05 	lds	r24, 0x05CC
    6988:	88 2f       	mov	r24, r24
    698a:	90 e0       	ldi	r25, 0x00	; 0
    698c:	fc 01       	movw	r30, r24
    698e:	e5 58       	subi	r30, 0x85	; 133
    6990:	fe 4f       	sbci	r31, 0xFE	; 254
    6992:	80 81       	ld	r24, Z
    6994:	20 e2       	ldi	r18, 0x20	; 32
    6996:	35 e3       	ldi	r19, 0x35	; 53
    6998:	60 e0       	ldi	r22, 0x00	; 0
    699a:	a9 01       	movw	r20, r18
    699c:	20 e0       	ldi	r18, 0x00	; 0
    699e:	30 e0       	ldi	r19, 0x00	; 0
    69a0:	00 e0       	ldi	r16, 0x00	; 0
    69a2:	10 e0       	ldi	r17, 0x00	; 0
    69a4:	ee 24       	eor	r14, r14
    69a6:	e3 94       	inc	r14
    69a8:	0e 94 6f 0b 	call	0x16de	; 0x16de <BCM_voidAddToQueue>
			BCM_voidAddToQueue(name[global_index],SPI, SPI_Complete, NULL, NULL, SPECIFIC);
    69ac:	80 91 cc 05 	lds	r24, 0x05CC
    69b0:	88 2f       	mov	r24, r24
    69b2:	90 e0       	ldi	r25, 0x00	; 0
    69b4:	fc 01       	movw	r30, r24
    69b6:	e5 58       	subi	r30, 0x85	; 133
    69b8:	fe 4f       	sbci	r31, 0xFE	; 254
    69ba:	80 81       	ld	r24, Z
    69bc:	27 e2       	ldi	r18, 0x27	; 39
    69be:	35 e3       	ldi	r19, 0x35	; 53
    69c0:	61 e0       	ldi	r22, 0x01	; 1
    69c2:	a9 01       	movw	r20, r18
    69c4:	20 e0       	ldi	r18, 0x00	; 0
    69c6:	30 e0       	ldi	r19, 0x00	; 0
    69c8:	00 e0       	ldi	r16, 0x00	; 0
    69ca:	10 e0       	ldi	r17, 0x00	; 0
    69cc:	ee 24       	eor	r14, r14
    69ce:	e3 94       	inc	r14
    69d0:	0e 94 6f 0b 	call	0x16de	; 0x16de <BCM_voidAddToQueue>
			BCM_voidAddToQueue(name[global_index],I2C, I2C_Complete, slave_ptr, reg_ptr, SPECIFIC);
    69d4:	80 91 cc 05 	lds	r24, 0x05CC
    69d8:	88 2f       	mov	r24, r24
    69da:	90 e0       	ldi	r25, 0x00	; 0
    69dc:	fc 01       	movw	r30, r24
    69de:	e5 58       	subi	r30, 0x85	; 133
    69e0:	fe 4f       	sbci	r31, 0xFE	; 254
    69e2:	80 81       	ld	r24, Z
    69e4:	2e e2       	ldi	r18, 0x2E	; 46
    69e6:	35 e3       	ldi	r19, 0x35	; 53
    69e8:	e0 91 83 01 	lds	r30, 0x0183
    69ec:	f0 91 84 01 	lds	r31, 0x0184
    69f0:	a0 91 85 01 	lds	r26, 0x0185
    69f4:	b0 91 86 01 	lds	r27, 0x0186
    69f8:	62 e0       	ldi	r22, 0x02	; 2
    69fa:	a9 01       	movw	r20, r18
    69fc:	9f 01       	movw	r18, r30
    69fe:	8d 01       	movw	r16, r26
    6a00:	ee 24       	eor	r14, r14
    6a02:	e3 94       	inc	r14
    6a04:	0e 94 6f 0b 	call	0x16de	; 0x16de <BCM_voidAddToQueue>
			REG_ADDRESS++;
    6a08:	80 91 cd 05 	lds	r24, 0x05CD
    6a0c:	8f 5f       	subi	r24, 0xFF	; 255
    6a0e:	80 93 cd 05 	sts	0x05CD, r24
			global_index++;
    6a12:	80 91 cc 05 	lds	r24, 0x05CC
    6a16:	8f 5f       	subi	r24, 0xFF	; 255
    6a18:	80 93 cc 05 	sts	0x05CC, r24
			TMR0_voidSetBusyWait(10);
    6a1c:	6a e0       	ldi	r22, 0x0A	; 10
    6a1e:	70 e0       	ldi	r23, 0x00	; 0
    6a20:	80 e0       	ldi	r24, 0x00	; 0
    6a22:	90 e0       	ldi	r25, 0x00	; 0
    6a24:	0e 94 1a 11 	call	0x2234	; 0x2234 <TMR0_voidSetBusyWait>
	TMR0_voidInit();
	BCM_voidInit();
	while(1){
		global_index = 0;
		REG_ADDRESS = 0;
		while(name[global_index] != '\0'){
    6a28:	80 91 cc 05 	lds	r24, 0x05CC
    6a2c:	88 2f       	mov	r24, r24
    6a2e:	90 e0       	ldi	r25, 0x00	; 0
    6a30:	fc 01       	movw	r30, r24
    6a32:	e5 58       	subi	r30, 0x85	; 133
    6a34:	fe 4f       	sbci	r31, 0xFE	; 254
    6a36:	80 81       	ld	r24, Z
    6a38:	88 23       	and	r24, r24
    6a3a:	09 f0       	breq	.+2      	; 0x6a3e <main+0x100>
    6a3c:	a3 cf       	rjmp	.-186    	; 0x6984 <main+0x46>
    6a3e:	9d cf       	rjmp	.-198    	; 0x697a <main+0x3c>

00006a40 <TXC_Complete>:
	}
	return 0;
}


void TXC_Complete(){
    6a40:	df 93       	push	r29
    6a42:	cf 93       	push	r28
    6a44:	cd b7       	in	r28, 0x3d	; 61
    6a46:	de b7       	in	r29, 0x3e	; 62
	//	LCD_voidGoToPosition(0,0);
	//	LCD_voidWriteString((u8*)"USART Data sent!");
}
    6a48:	cf 91       	pop	r28
    6a4a:	df 91       	pop	r29
    6a4c:	08 95       	ret

00006a4e <SPI_Complete>:

void SPI_Complete(){
    6a4e:	df 93       	push	r29
    6a50:	cf 93       	push	r28
    6a52:	cd b7       	in	r28, 0x3d	; 61
    6a54:	de b7       	in	r29, 0x3e	; 62
	//	LCD_voidGoToPosition(1,0);
	//	LCD_voidWriteString((u8*)"SPI Data sent!");
}
    6a56:	cf 91       	pop	r28
    6a58:	df 91       	pop	r29
    6a5a:	08 95       	ret

00006a5c <I2C_Complete>:
void I2C_Complete(){
    6a5c:	df 93       	push	r29
    6a5e:	cf 93       	push	r28
    6a60:	cd b7       	in	r28, 0x3d	; 61
    6a62:	de b7       	in	r29, 0x3e	; 62
	//	LCD_voidGoToPosition(1,0);
	//	LCD_voidWriteString((u8*)"I2C Data sent!");
}
    6a64:	cf 91       	pop	r28
    6a66:	df 91       	pop	r29
    6a68:	08 95       	ret

00006a6a <__mulsi3>:
    6a6a:	62 9f       	mul	r22, r18
    6a6c:	d0 01       	movw	r26, r0
    6a6e:	73 9f       	mul	r23, r19
    6a70:	f0 01       	movw	r30, r0
    6a72:	82 9f       	mul	r24, r18
    6a74:	e0 0d       	add	r30, r0
    6a76:	f1 1d       	adc	r31, r1
    6a78:	64 9f       	mul	r22, r20
    6a7a:	e0 0d       	add	r30, r0
    6a7c:	f1 1d       	adc	r31, r1
    6a7e:	92 9f       	mul	r25, r18
    6a80:	f0 0d       	add	r31, r0
    6a82:	83 9f       	mul	r24, r19
    6a84:	f0 0d       	add	r31, r0
    6a86:	74 9f       	mul	r23, r20
    6a88:	f0 0d       	add	r31, r0
    6a8a:	65 9f       	mul	r22, r21
    6a8c:	f0 0d       	add	r31, r0
    6a8e:	99 27       	eor	r25, r25
    6a90:	72 9f       	mul	r23, r18
    6a92:	b0 0d       	add	r27, r0
    6a94:	e1 1d       	adc	r30, r1
    6a96:	f9 1f       	adc	r31, r25
    6a98:	63 9f       	mul	r22, r19
    6a9a:	b0 0d       	add	r27, r0
    6a9c:	e1 1d       	adc	r30, r1
    6a9e:	f9 1f       	adc	r31, r25
    6aa0:	bd 01       	movw	r22, r26
    6aa2:	cf 01       	movw	r24, r30
    6aa4:	11 24       	eor	r1, r1
    6aa6:	08 95       	ret

00006aa8 <__divmodqi4>:
    6aa8:	87 fb       	bst	r24, 7
    6aaa:	08 2e       	mov	r0, r24
    6aac:	06 26       	eor	r0, r22
    6aae:	87 fd       	sbrc	r24, 7
    6ab0:	81 95       	neg	r24
    6ab2:	67 fd       	sbrc	r22, 7
    6ab4:	61 95       	neg	r22
    6ab6:	20 d0       	rcall	.+64     	; 0x6af8 <__udivmodqi4>
    6ab8:	0e f4       	brtc	.+2      	; 0x6abc <__divmodqi4_1>
    6aba:	91 95       	neg	r25

00006abc <__divmodqi4_1>:
    6abc:	07 fc       	sbrc	r0, 7
    6abe:	81 95       	neg	r24

00006ac0 <__divmodqi4_exit>:
    6ac0:	08 95       	ret

00006ac2 <__divmodsi4>:
    6ac2:	97 fb       	bst	r25, 7
    6ac4:	09 2e       	mov	r0, r25
    6ac6:	05 26       	eor	r0, r21
    6ac8:	0e d0       	rcall	.+28     	; 0x6ae6 <__divmodsi4_neg1>
    6aca:	57 fd       	sbrc	r21, 7
    6acc:	04 d0       	rcall	.+8      	; 0x6ad6 <__divmodsi4_neg2>
    6ace:	20 d0       	rcall	.+64     	; 0x6b10 <__udivmodsi4>
    6ad0:	0a d0       	rcall	.+20     	; 0x6ae6 <__divmodsi4_neg1>
    6ad2:	00 1c       	adc	r0, r0
    6ad4:	38 f4       	brcc	.+14     	; 0x6ae4 <__divmodsi4_exit>

00006ad6 <__divmodsi4_neg2>:
    6ad6:	50 95       	com	r21
    6ad8:	40 95       	com	r20
    6ada:	30 95       	com	r19
    6adc:	21 95       	neg	r18
    6ade:	3f 4f       	sbci	r19, 0xFF	; 255
    6ae0:	4f 4f       	sbci	r20, 0xFF	; 255
    6ae2:	5f 4f       	sbci	r21, 0xFF	; 255

00006ae4 <__divmodsi4_exit>:
    6ae4:	08 95       	ret

00006ae6 <__divmodsi4_neg1>:
    6ae6:	f6 f7       	brtc	.-4      	; 0x6ae4 <__divmodsi4_exit>
    6ae8:	90 95       	com	r25
    6aea:	80 95       	com	r24
    6aec:	70 95       	com	r23
    6aee:	61 95       	neg	r22
    6af0:	7f 4f       	sbci	r23, 0xFF	; 255
    6af2:	8f 4f       	sbci	r24, 0xFF	; 255
    6af4:	9f 4f       	sbci	r25, 0xFF	; 255
    6af6:	08 95       	ret

00006af8 <__udivmodqi4>:
    6af8:	99 1b       	sub	r25, r25
    6afa:	79 e0       	ldi	r23, 0x09	; 9
    6afc:	04 c0       	rjmp	.+8      	; 0x6b06 <__udivmodqi4_ep>

00006afe <__udivmodqi4_loop>:
    6afe:	99 1f       	adc	r25, r25
    6b00:	96 17       	cp	r25, r22
    6b02:	08 f0       	brcs	.+2      	; 0x6b06 <__udivmodqi4_ep>
    6b04:	96 1b       	sub	r25, r22

00006b06 <__udivmodqi4_ep>:
    6b06:	88 1f       	adc	r24, r24
    6b08:	7a 95       	dec	r23
    6b0a:	c9 f7       	brne	.-14     	; 0x6afe <__udivmodqi4_loop>
    6b0c:	80 95       	com	r24
    6b0e:	08 95       	ret

00006b10 <__udivmodsi4>:
    6b10:	a1 e2       	ldi	r26, 0x21	; 33
    6b12:	1a 2e       	mov	r1, r26
    6b14:	aa 1b       	sub	r26, r26
    6b16:	bb 1b       	sub	r27, r27
    6b18:	fd 01       	movw	r30, r26
    6b1a:	0d c0       	rjmp	.+26     	; 0x6b36 <__udivmodsi4_ep>

00006b1c <__udivmodsi4_loop>:
    6b1c:	aa 1f       	adc	r26, r26
    6b1e:	bb 1f       	adc	r27, r27
    6b20:	ee 1f       	adc	r30, r30
    6b22:	ff 1f       	adc	r31, r31
    6b24:	a2 17       	cp	r26, r18
    6b26:	b3 07       	cpc	r27, r19
    6b28:	e4 07       	cpc	r30, r20
    6b2a:	f5 07       	cpc	r31, r21
    6b2c:	20 f0       	brcs	.+8      	; 0x6b36 <__udivmodsi4_ep>
    6b2e:	a2 1b       	sub	r26, r18
    6b30:	b3 0b       	sbc	r27, r19
    6b32:	e4 0b       	sbc	r30, r20
    6b34:	f5 0b       	sbc	r31, r21

00006b36 <__udivmodsi4_ep>:
    6b36:	66 1f       	adc	r22, r22
    6b38:	77 1f       	adc	r23, r23
    6b3a:	88 1f       	adc	r24, r24
    6b3c:	99 1f       	adc	r25, r25
    6b3e:	1a 94       	dec	r1
    6b40:	69 f7       	brne	.-38     	; 0x6b1c <__udivmodsi4_loop>
    6b42:	60 95       	com	r22
    6b44:	70 95       	com	r23
    6b46:	80 95       	com	r24
    6b48:	90 95       	com	r25
    6b4a:	9b 01       	movw	r18, r22
    6b4c:	ac 01       	movw	r20, r24
    6b4e:	bd 01       	movw	r22, r26
    6b50:	cf 01       	movw	r24, r30
    6b52:	08 95       	ret

00006b54 <__prologue_saves__>:
    6b54:	2f 92       	push	r2
    6b56:	3f 92       	push	r3
    6b58:	4f 92       	push	r4
    6b5a:	5f 92       	push	r5
    6b5c:	6f 92       	push	r6
    6b5e:	7f 92       	push	r7
    6b60:	8f 92       	push	r8
    6b62:	9f 92       	push	r9
    6b64:	af 92       	push	r10
    6b66:	bf 92       	push	r11
    6b68:	cf 92       	push	r12
    6b6a:	df 92       	push	r13
    6b6c:	ef 92       	push	r14
    6b6e:	ff 92       	push	r15
    6b70:	0f 93       	push	r16
    6b72:	1f 93       	push	r17
    6b74:	cf 93       	push	r28
    6b76:	df 93       	push	r29
    6b78:	cd b7       	in	r28, 0x3d	; 61
    6b7a:	de b7       	in	r29, 0x3e	; 62
    6b7c:	ca 1b       	sub	r28, r26
    6b7e:	db 0b       	sbc	r29, r27
    6b80:	0f b6       	in	r0, 0x3f	; 63
    6b82:	f8 94       	cli
    6b84:	de bf       	out	0x3e, r29	; 62
    6b86:	0f be       	out	0x3f, r0	; 63
    6b88:	cd bf       	out	0x3d, r28	; 61
    6b8a:	09 94       	ijmp

00006b8c <__epilogue_restores__>:
    6b8c:	2a 88       	ldd	r2, Y+18	; 0x12
    6b8e:	39 88       	ldd	r3, Y+17	; 0x11
    6b90:	48 88       	ldd	r4, Y+16	; 0x10
    6b92:	5f 84       	ldd	r5, Y+15	; 0x0f
    6b94:	6e 84       	ldd	r6, Y+14	; 0x0e
    6b96:	7d 84       	ldd	r7, Y+13	; 0x0d
    6b98:	8c 84       	ldd	r8, Y+12	; 0x0c
    6b9a:	9b 84       	ldd	r9, Y+11	; 0x0b
    6b9c:	aa 84       	ldd	r10, Y+10	; 0x0a
    6b9e:	b9 84       	ldd	r11, Y+9	; 0x09
    6ba0:	c8 84       	ldd	r12, Y+8	; 0x08
    6ba2:	df 80       	ldd	r13, Y+7	; 0x07
    6ba4:	ee 80       	ldd	r14, Y+6	; 0x06
    6ba6:	fd 80       	ldd	r15, Y+5	; 0x05
    6ba8:	0c 81       	ldd	r16, Y+4	; 0x04
    6baa:	1b 81       	ldd	r17, Y+3	; 0x03
    6bac:	aa 81       	ldd	r26, Y+2	; 0x02
    6bae:	b9 81       	ldd	r27, Y+1	; 0x01
    6bb0:	ce 0f       	add	r28, r30
    6bb2:	d1 1d       	adc	r29, r1
    6bb4:	0f b6       	in	r0, 0x3f	; 63
    6bb6:	f8 94       	cli
    6bb8:	de bf       	out	0x3e, r29	; 62
    6bba:	0f be       	out	0x3f, r0	; 63
    6bbc:	cd bf       	out	0x3d, r28	; 61
    6bbe:	ed 01       	movw	r28, r26
    6bc0:	08 95       	ret

00006bc2 <_exit>:
    6bc2:	f8 94       	cli

00006bc4 <__stop_program>:
    6bc4:	ff cf       	rjmp	.-2      	; 0x6bc4 <__stop_program>
